<?php
/**
 * LoyaltiesApi
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LoyaltiesApi Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoyaltiesApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createInBulkLoyaltyTiers' => [
            'application/json',
        ],
        'deleteEarningRule' => [
            'application/json',
        ],
        'deleteLoyaltyProgram' => [
            'application/json',
        ],
        'deleteRewardAssignment1' => [
            'application/json',
        ],
        'disableEarningRule' => [
            'application/json',
        ],
        'enableEarningRule' => [
            'application/json',
        ],
        'exportLoyaltyCardTransactions' => [
            'application/json',
        ],
        'exportLoyaltyCardTransactions1' => [
            'application/json',
        ],
        'getEarningRule' => [
            'application/json',
        ],
        'getLoyaltyTier' => [
            'application/json',
        ],
        'getRewardAssignment1' => [
            'application/json',
        ],
        'getRewardAssignment2' => [
            'application/json',
        ],
        'getRewardDetails' => [
            'application/json',
        ],
        'listLoyaltyCardTransactions' => [
            'application/json',
        ],
        'listLoyaltyCardTransactions1' => [
            'application/json',
        ],
        'listLoyaltyTierEarningRules' => [
            'application/json',
        ],
        'listLoyaltyTierRewards' => [
            'application/json',
        ],
        'listLoyaltyTiers' => [
            'application/json',
        ],
        'listMemberLoyaltyTier' => [
            'application/json',
        ],
        'listMemberRewards' => [
            'application/json',
        ],
        'listPointsExpiration' => [
            'application/json',
        ],
        'redeemReward' => [
            'application/json',
        ],
        'redeemReward1' => [
            'application/json',
        ],
        'transferPoints' => [
            'application/json',
        ],
        'updateLoyaltyCardBalance' => [
            'application/json',
        ],
        'updateLoyaltyCardBalance1' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createInBulkLoyaltyTiers
     *
     * Create loyalty tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTiersCreateInBulkRequestBodyItem[]|null $loyalties_tiers_create_in_bulk_request_body_item Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInBulkLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltyTier[]
     */
    public function createInBulkLoyaltyTiers(
        string $campaign_id,
        ?array $loyalties_tiers_create_in_bulk_request_body_item = null,
        string $contentType = self::contentTypes['createInBulkLoyaltyTiers'][0]
    ): array
    {
        list($response) = $this->createInBulkLoyaltyTiersWithHttpInfo($campaign_id, $loyalties_tiers_create_in_bulk_request_body_item, $contentType);
        return $response;
    }

    /**
     * Operation createInBulkLoyaltyTiersWithHttpInfo
     *
     * Create loyalty tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTiersCreateInBulkRequestBodyItem[]|null $loyalties_tiers_create_in_bulk_request_body_item Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInBulkLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltyTier[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createInBulkLoyaltyTiersWithHttpInfo(
        string $campaign_id,
        ?array $loyalties_tiers_create_in_bulk_request_body_item = null,
        string $contentType = self::contentTypes['createInBulkLoyaltyTiers'][0]
    ): array
    {
        $request = $this->createInBulkLoyaltyTiersRequest($campaign_id, $loyalties_tiers_create_in_bulk_request_body_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltyTier[]', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltyTier[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltyTier[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltyTier[]';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltyTier[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInBulkLoyaltyTiersAsync
     *
     * Create loyalty tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTiersCreateInBulkRequestBodyItem[]|null $loyalties_tiers_create_in_bulk_request_body_item Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInBulkLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createInBulkLoyaltyTiersAsync(
        string $campaign_id,
        ?array $loyalties_tiers_create_in_bulk_request_body_item = null,
        string $contentType = self::contentTypes['createInBulkLoyaltyTiers'][0]
    ): PromiseInterface
    {
        return $this->createInBulkLoyaltyTiersAsyncWithHttpInfo($campaign_id, $loyalties_tiers_create_in_bulk_request_body_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInBulkLoyaltyTiersAsyncWithHttpInfo
     *
     * Create loyalty tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTiersCreateInBulkRequestBodyItem[]|null $loyalties_tiers_create_in_bulk_request_body_item Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInBulkLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createInBulkLoyaltyTiersAsyncWithHttpInfo(
        $campaign_id,
        $loyalties_tiers_create_in_bulk_request_body_item = null,
        string $contentType = self::contentTypes['createInBulkLoyaltyTiers'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltyTier[]';
        $request = $this->createInBulkLoyaltyTiersRequest($campaign_id, $loyalties_tiers_create_in_bulk_request_body_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInBulkLoyaltyTiers'
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTiersCreateInBulkRequestBodyItem[]|null $loyalties_tiers_create_in_bulk_request_body_item Provide tier definitions you want to add to existing loyalty campaign. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInBulkLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInBulkLoyaltyTiersRequest(
        $campaign_id,
        $loyalties_tiers_create_in_bulk_request_body_item = null,
        string $contentType = self::contentTypes['createInBulkLoyaltyTiers'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling createInBulkLoyaltyTiers'
            );
        }



        $resourcePath = '/v1/loyalties/{campaignId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_tiers_create_in_bulk_request_body_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_tiers_create_in_bulk_request_body_item));
            } else {
                $httpBody = $loyalties_tiers_create_in_bulk_request_body_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEarningRule
     *
     * Delete Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteEarningRule(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['deleteEarningRule'][0]
    ): void
    {
        $this->deleteEarningRuleWithHttpInfo($campaign_id, $earning_rule_id, $contentType);
    }

    /**
     * Operation deleteEarningRuleWithHttpInfo
     *
     * Delete Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEarningRuleWithHttpInfo(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['deleteEarningRule'][0]
    ): array
    {
        $request = $this->deleteEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEarningRuleAsync
     *
     * Delete Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteEarningRuleAsync(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['deleteEarningRule'][0]
    ): PromiseInterface
    {
        return $this->deleteEarningRuleAsyncWithHttpInfo($campaign_id, $earning_rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEarningRuleAsyncWithHttpInfo
     *
     * Delete Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteEarningRuleAsyncWithHttpInfo(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['deleteEarningRule'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEarningRule'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEarningRuleRequest(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['deleteEarningRule'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteEarningRule'
            );
        }

        // verify the required parameter 'earning_rule_id' is set
        if ($earning_rule_id === null || (is_array($earning_rule_id) && count($earning_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $earning_rule_id when calling deleteEarningRule'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($earning_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'earningRuleId' . '}',
                ObjectSerializer::toPathValue($earning_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteLoyaltyProgram
     *
     * Delete Loyalty Campaign
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  bool|null $force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesDeleteResponseBody
     */
    public function deleteLoyaltyProgram(
        string $campaign_id,
        ?bool $force = null,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): \OpenAPI\Client\Model\LoyaltiesDeleteResponseBody
    {
        list($response) = $this->deleteLoyaltyProgramWithHttpInfo($campaign_id, $force, $contentType);
        return $response;
    }

    /**
     * Operation deleteLoyaltyProgramWithHttpInfo
     *
     * Delete Loyalty Campaign
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  bool|null $force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesDeleteResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteLoyaltyProgramWithHttpInfo(
        string $campaign_id,
        ?bool $force = null,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): array
    {
        $request = $this->deleteLoyaltyProgramRequest($campaign_id, $force, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesDeleteResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesDeleteResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesDeleteResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesDeleteResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesDeleteResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteLoyaltyProgramAsync
     *
     * Delete Loyalty Campaign
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  bool|null $force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLoyaltyProgramAsync(
        string $campaign_id,
        ?bool $force = null,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): PromiseInterface
    {
        return $this->deleteLoyaltyProgramAsyncWithHttpInfo($campaign_id, $force, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteLoyaltyProgramAsyncWithHttpInfo
     *
     * Delete Loyalty Campaign
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  bool|null $force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteLoyaltyProgramAsyncWithHttpInfo(
        $campaign_id,
        $force = null,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesDeleteResponseBody';
        $request = $this->deleteLoyaltyProgramRequest($campaign_id, $force, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteLoyaltyProgram'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  bool|null $force If this flag is set to true, the campaign and related vouchers will be removed permanently. If it is set to false or not set at all, the loyalty campaign and all related loyalty cards will be moved to the bin. Going forward, the user will be able to create the next campaign with the same name. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteLoyaltyProgram'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteLoyaltyProgramRequest(
        $campaign_id,
        $force = null,
        string $contentType = self::contentTypes['deleteLoyaltyProgram'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteLoyaltyProgram'
            );
        }



        $resourcePath = '/v1/loyalties/{campaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force,
            'force', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteRewardAssignment1
     *
     * Delete Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return void
     */
    public function deleteRewardAssignment1(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['deleteRewardAssignment1'][0]
    ): void
    {
        $this->deleteRewardAssignment1WithHttpInfo($campaign_id, $assignment_id, $contentType);
    }

    /**
     * Operation deleteRewardAssignment1WithHttpInfo
     *
     * Delete Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRewardAssignment1WithHttpInfo(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['deleteRewardAssignment1'][0]
    ): array
    {
        $request = $this->deleteRewardAssignment1Request($campaign_id, $assignment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteRewardAssignment1Async
     *
     * Delete Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteRewardAssignment1Async(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['deleteRewardAssignment1'][0]
    ): PromiseInterface
    {
        return $this->deleteRewardAssignment1AsyncWithHttpInfo($campaign_id, $assignment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteRewardAssignment1AsyncWithHttpInfo
     *
     * Delete Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function deleteRewardAssignment1AsyncWithHttpInfo(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['deleteRewardAssignment1'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->deleteRewardAssignment1Request($campaign_id, $assignment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteRewardAssignment1'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteRewardAssignment1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteRewardAssignment1Request(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['deleteRewardAssignment1'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling deleteRewardAssignment1'
            );
        }

        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null || (is_array($assignment_id) && count($assignment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling deleteRewardAssignment1'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/rewards/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disableEarningRule
     *
     * Disable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody
     */
    public function disableEarningRule(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['disableEarningRule'][0]
    ): \OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody
    {
        list($response) = $this->disableEarningRuleWithHttpInfo($campaign_id, $earning_rule_id, $contentType);
        return $response;
    }

    /**
     * Operation disableEarningRuleWithHttpInfo
     *
     * Disable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableEarningRuleWithHttpInfo(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['disableEarningRule'][0]
    ): array
    {
        $request = $this->disableEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disableEarningRuleAsync
     *
     * Disable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function disableEarningRuleAsync(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['disableEarningRule'][0]
    ): PromiseInterface
    {
        return $this->disableEarningRuleAsyncWithHttpInfo($campaign_id, $earning_rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disableEarningRuleAsyncWithHttpInfo
     *
     * Disable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function disableEarningRuleAsyncWithHttpInfo(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['disableEarningRule'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesEarningRulesDisableResponseBody';
        $request = $this->disableEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disableEarningRule'
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disableEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disableEarningRuleRequest(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['disableEarningRule'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling disableEarningRule'
            );
        }

        // verify the required parameter 'earning_rule_id' is set
        if ($earning_rule_id === null || (is_array($earning_rule_id) && count($earning_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $earning_rule_id when calling disableEarningRule'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($earning_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'earningRuleId' . '}',
                ObjectSerializer::toPathValue($earning_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enableEarningRule
     *
     * Enable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody
     */
    public function enableEarningRule(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['enableEarningRule'][0]
    ): \OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody
    {
        list($response) = $this->enableEarningRuleWithHttpInfo($campaign_id, $earning_rule_id, $contentType);
        return $response;
    }

    /**
     * Operation enableEarningRuleWithHttpInfo
     *
     * Enable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function enableEarningRuleWithHttpInfo(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['enableEarningRule'][0]
    ): array
    {
        $request = $this->enableEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enableEarningRuleAsync
     *
     * Enable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function enableEarningRuleAsync(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['enableEarningRule'][0]
    ): PromiseInterface
    {
        return $this->enableEarningRuleAsyncWithHttpInfo($campaign_id, $earning_rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enableEarningRuleAsyncWithHttpInfo
     *
     * Enable Earning Rule
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function enableEarningRuleAsyncWithHttpInfo(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['enableEarningRule'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesEarningRulesEnableResponseBody';
        $request = $this->enableEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enableEarningRule'
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $earning_rule_id Unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enableEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enableEarningRuleRequest(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['enableEarningRule'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling enableEarningRule'
            );
        }

        // verify the required parameter 'earning_rule_id' is set
        if ($earning_rule_id === null || (is_array($earning_rule_id) && count($earning_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $earning_rule_id when calling enableEarningRule'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}/enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($earning_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'earningRuleId' . '}',
                ObjectSerializer::toPathValue($earning_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportLoyaltyCardTransactions
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody
     */
    public function exportLoyaltyCardTransactions(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody
    {
        list($response) = $this->exportLoyaltyCardTransactionsWithHttpInfo($member_id, $loyalties_members_transactions_export_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation exportLoyaltyCardTransactionsWithHttpInfo
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportLoyaltyCardTransactionsWithHttpInfo(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions'][0]
    ): array
    {
        $request = $this->exportLoyaltyCardTransactionsRequest($member_id, $loyalties_members_transactions_export_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportLoyaltyCardTransactionsAsync
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exportLoyaltyCardTransactionsAsync(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions'][0]
    ): PromiseInterface
    {
        return $this->exportLoyaltyCardTransactionsAsyncWithHttpInfo($member_id, $loyalties_members_transactions_export_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportLoyaltyCardTransactionsAsyncWithHttpInfo
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exportLoyaltyCardTransactionsAsyncWithHttpInfo(
        $member_id,
        $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody';
        $request = $this->exportLoyaltyCardTransactionsRequest($member_id, $loyalties_members_transactions_export_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportLoyaltyCardTransactions'
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportLoyaltyCardTransactionsRequest(
        $member_id,
        $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions'][0]
    ): Request
    {

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling exportLoyaltyCardTransactions'
            );
        }



        $resourcePath = '/v1/loyalties/members/{memberId}/transactions/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_members_transactions_export_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_members_transactions_export_create_request_body));
            } else {
                $httpBody = $loyalties_members_transactions_export_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportLoyaltyCardTransactions1
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody
     */
    public function exportLoyaltyCardTransactions1(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions1'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody
    {
        list($response) = $this->exportLoyaltyCardTransactions1WithHttpInfo($campaign_id, $member_id, $loyalties_members_transactions_export_create_request_body, $contentType);
        return $response;
    }

    /**
     * Operation exportLoyaltyCardTransactions1WithHttpInfo
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportLoyaltyCardTransactions1WithHttpInfo(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions1'][0]
    ): array
    {
        $request = $this->exportLoyaltyCardTransactions1Request($campaign_id, $member_id, $loyalties_members_transactions_export_create_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportLoyaltyCardTransactions1Async
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exportLoyaltyCardTransactions1Async(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions1'][0]
    ): PromiseInterface
    {
        return $this->exportLoyaltyCardTransactions1AsyncWithHttpInfo($campaign_id, $member_id, $loyalties_members_transactions_export_create_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportLoyaltyCardTransactions1AsyncWithHttpInfo
     *
     * Export Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function exportLoyaltyCardTransactions1AsyncWithHttpInfo(
        $campaign_id,
        $member_id,
        $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions1'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateResponseBody';
        $request = $this->exportLoyaltyCardTransactions1Request($campaign_id, $member_id, $loyalties_members_transactions_export_create_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportLoyaltyCardTransactions1'
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to export. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to export transaction data for. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersTransactionsExportCreateRequestBody|null $loyalties_members_transactions_export_create_request_body Specify the parameters and filters for the transaction export. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportLoyaltyCardTransactions1Request(
        $campaign_id,
        $member_id,
        $loyalties_members_transactions_export_create_request_body = null,
        string $contentType = self::contentTypes['exportLoyaltyCardTransactions1'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling exportLoyaltyCardTransactions1'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling exportLoyaltyCardTransactions1'
            );
        }



        $resourcePath = '/v1/loyalties/{campaignId}/members/{memberId}/transactions/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_members_transactions_export_create_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_members_transactions_export_create_request_body));
            } else {
                $httpBody = $loyalties_members_transactions_export_create_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEarningRule
     *
     * Get Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody
     */
    public function getEarningRule(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['getEarningRule'][0]
    ): \OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody
    {
        list($response) = $this->getEarningRuleWithHttpInfo($campaign_id, $earning_rule_id, $contentType);
        return $response;
    }

    /**
     * Operation getEarningRuleWithHttpInfo
     *
     * Get Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEarningRule'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEarningRuleWithHttpInfo(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['getEarningRule'][0]
    ): array
    {
        $request = $this->getEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEarningRuleAsync
     *
     * Get Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEarningRuleAsync(
        string $campaign_id,
        string $earning_rule_id,
        string $contentType = self::contentTypes['getEarningRule'][0]
    ): PromiseInterface
    {
        return $this->getEarningRuleAsyncWithHttpInfo($campaign_id, $earning_rule_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEarningRuleAsyncWithHttpInfo
     *
     * Get Earning Rule
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getEarningRuleAsyncWithHttpInfo(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['getEarningRule'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesEarningRulesGetResponseBody';
        $request = $this->getEarningRuleRequest($campaign_id, $earning_rule_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEarningRule'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $earning_rule_id A unique earning rule ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEarningRule'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEarningRuleRequest(
        $campaign_id,
        $earning_rule_id,
        string $contentType = self::contentTypes['getEarningRule'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getEarningRule'
            );
        }

        // verify the required parameter 'earning_rule_id' is set
        if ($earning_rule_id === null || (is_array($earning_rule_id) && count($earning_rule_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $earning_rule_id when calling getEarningRule'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/earning-rules/{earningRuleId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($earning_rule_id !== null) {
            $resourcePath = str_replace(
                '{' . 'earningRuleId' . '}',
                ObjectSerializer::toPathValue($earning_rule_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLoyaltyTier
     *
     * Get Loyalty Tier
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody
     */
    public function getLoyaltyTier(
        string $campaign_id,
        string $loyalty_tier_id,
        string $contentType = self::contentTypes['getLoyaltyTier'][0]
    ): \OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody
    {
        list($response) = $this->getLoyaltyTierWithHttpInfo($campaign_id, $loyalty_tier_id, $contentType);
        return $response;
    }

    /**
     * Operation getLoyaltyTierWithHttpInfo
     *
     * Get Loyalty Tier
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLoyaltyTierWithHttpInfo(
        string $campaign_id,
        string $loyalty_tier_id,
        string $contentType = self::contentTypes['getLoyaltyTier'][0]
    ): array
    {
        $request = $this->getLoyaltyTierRequest($campaign_id, $loyalty_tier_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLoyaltyTierAsync
     *
     * Get Loyalty Tier
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLoyaltyTierAsync(
        string $campaign_id,
        string $loyalty_tier_id,
        string $contentType = self::contentTypes['getLoyaltyTier'][0]
    ): PromiseInterface
    {
        return $this->getLoyaltyTierAsyncWithHttpInfo($campaign_id, $loyalty_tier_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLoyaltyTierAsyncWithHttpInfo
     *
     * Get Loyalty Tier
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLoyaltyTierAsyncWithHttpInfo(
        $campaign_id,
        $loyalty_tier_id,
        string $contentType = self::contentTypes['getLoyaltyTier'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersGetResponseBody';
        $request = $this->getLoyaltyTierRequest($campaign_id, $loyalty_tier_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLoyaltyTier'
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLoyaltyTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLoyaltyTierRequest(
        $campaign_id,
        $loyalty_tier_id,
        string $contentType = self::contentTypes['getLoyaltyTier'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getLoyaltyTier'
            );
        }

        // verify the required parameter 'loyalty_tier_id' is set
        if ($loyalty_tier_id === null || (is_array($loyalty_tier_id) && count($loyalty_tier_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyalty_tier_id when calling getLoyaltyTier'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($loyalty_tier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyTierId' . '}',
                ObjectSerializer::toPathValue($loyalty_tier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRewardAssignment1
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody
     */
    public function getRewardAssignment1(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment1'][0]
    ): \OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody
    {
        list($response) = $this->getRewardAssignment1WithHttpInfo($campaign_id, $assignment_id, $contentType);
        return $response;
    }

    /**
     * Operation getRewardAssignment1WithHttpInfo
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRewardAssignment1WithHttpInfo(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment1'][0]
    ): array
    {
        $request = $this->getRewardAssignment1Request($campaign_id, $assignment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRewardAssignment1Async
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRewardAssignment1Async(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment1'][0]
    ): PromiseInterface
    {
        return $this->getRewardAssignment1AsyncWithHttpInfo($campaign_id, $assignment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRewardAssignment1AsyncWithHttpInfo
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRewardAssignment1AsyncWithHttpInfo(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment1'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsGetResponseBody';
        $request = $this->getRewardAssignment1Request($campaign_id, $assignment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRewardAssignment1'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRewardAssignment1Request(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment1'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getRewardAssignment1'
            );
        }

        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null || (is_array($assignment_id) && count($assignment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling getRewardAssignment1'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRewardAssignment2
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment2'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody
     */
    public function getRewardAssignment2(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment2'][0]
    ): \OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody
    {
        list($response) = $this->getRewardAssignment2WithHttpInfo($campaign_id, $assignment_id, $contentType);
        return $response;
    }

    /**
     * Operation getRewardAssignment2WithHttpInfo
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment2'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRewardAssignment2WithHttpInfo(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment2'][0]
    ): array
    {
        $request = $this->getRewardAssignment2Request($campaign_id, $assignment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRewardAssignment2Async
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment2'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRewardAssignment2Async(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment2'][0]
    ): PromiseInterface
    {
        return $this->getRewardAssignment2AsyncWithHttpInfo($campaign_id, $assignment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRewardAssignment2AsyncWithHttpInfo
     *
     * Get Reward Assignment
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment2'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRewardAssignment2AsyncWithHttpInfo(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment2'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesRewardsGetResponseBody';
        $request = $this->getRewardAssignment2Request($campaign_id, $assignment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRewardAssignment2'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id A unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardAssignment2'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRewardAssignment2Request(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['getRewardAssignment2'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getRewardAssignment2'
            );
        }

        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null || (is_array($assignment_id) && count($assignment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling getRewardAssignment2'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/rewards/{assignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRewardDetails
     *
     * Get Reward Details
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardDetails'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody
     */
    public function getRewardDetails(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardDetails'][0]
    ): \OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody
    {
        list($response) = $this->getRewardDetailsWithHttpInfo($campaign_id, $assignment_id, $contentType);
        return $response;
    }

    /**
     * Operation getRewardDetailsWithHttpInfo
     *
     * Get Reward Details
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardDetails'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRewardDetailsWithHttpInfo(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardDetails'][0]
    ): array
    {
        $request = $this->getRewardDetailsRequest($campaign_id, $assignment_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRewardDetailsAsync
     *
     * Get Reward Details
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRewardDetailsAsync(
        string $campaign_id,
        string $assignment_id,
        string $contentType = self::contentTypes['getRewardDetails'][0]
    ): PromiseInterface
    {
        return $this->getRewardDetailsAsyncWithHttpInfo($campaign_id, $assignment_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRewardDetailsAsyncWithHttpInfo
     *
     * Get Reward Details
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getRewardDetailsAsyncWithHttpInfo(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['getRewardDetails'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesRewardAssignmentsRewardGetResponseBody';
        $request = $this->getRewardDetailsRequest($campaign_id, $assignment_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRewardDetails'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $assignment_id Unique reward assignment ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getRewardDetails'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getRewardDetailsRequest(
        $campaign_id,
        $assignment_id,
        string $contentType = self::contentTypes['getRewardDetails'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling getRewardDetails'
            );
        }

        // verify the required parameter 'assignment_id' is set
        if ($assignment_id === null || (is_array($assignment_id) && count($assignment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $assignment_id when calling getRewardDetails'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/reward-assignments/{assignmentId}/reward';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($assignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'assignmentId' . '}',
                ObjectSerializer::toPathValue($assignment_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLoyaltyCardTransactions
     *
     * List Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody
     */
    public function listLoyaltyCardTransactions(
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody
    {
        list($response) = $this->listLoyaltyCardTransactionsWithHttpInfo($member_id, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation listLoyaltyCardTransactionsWithHttpInfo
     *
     * List Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLoyaltyCardTransactionsWithHttpInfo(
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions'][0]
    ): array
    {
        $request = $this->listLoyaltyCardTransactionsRequest($member_id, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLoyaltyCardTransactionsAsync
     *
     * List Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyCardTransactionsAsync(
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions'][0]
    ): PromiseInterface
    {
        return $this->listLoyaltyCardTransactionsAsyncWithHttpInfo($member_id, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLoyaltyCardTransactionsAsyncWithHttpInfo
     *
     * List Loyalty Card Transactions
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyCardTransactionsAsyncWithHttpInfo(
        $member_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody';
        $request = $this->listLoyaltyCardTransactionsRequest($member_id, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLoyaltyCardTransactions'
     *
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLoyaltyCardTransactionsRequest(
        $member_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions'][0]
    ): Request
    {

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling listLoyaltyCardTransactions'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyCardTransactions, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyCardTransactions, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listLoyaltyCardTransactions, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listLoyaltyCardTransactions, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/loyalties/members/{memberId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLoyaltyCardTransactions1
     *
     * List Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody
     */
    public function listLoyaltyCardTransactions1(
        string $campaign_id,
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions1'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody
    {
        list($response) = $this->listLoyaltyCardTransactions1WithHttpInfo($campaign_id, $member_id, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation listLoyaltyCardTransactions1WithHttpInfo
     *
     * List Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLoyaltyCardTransactions1WithHttpInfo(
        string $campaign_id,
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions1'][0]
    ): array
    {
        $request = $this->listLoyaltyCardTransactions1Request($campaign_id, $member_id, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLoyaltyCardTransactions1Async
     *
     * List Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyCardTransactions1Async(
        string $campaign_id,
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions1'][0]
    ): PromiseInterface
    {
        return $this->listLoyaltyCardTransactions1AsyncWithHttpInfo($campaign_id, $member_id, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLoyaltyCardTransactions1AsyncWithHttpInfo
     *
     * List Loyalty Card Transactions
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyCardTransactions1AsyncWithHttpInfo(
        $campaign_id,
        $member_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions1'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransactionsListResponseBody';
        $request = $this->listLoyaltyCardTransactions1Request($campaign_id, $member_id, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLoyaltyCardTransactions1'
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher whose transactions you would like to return. (required)
     * @param  string $member_id A unique code identifying the loyalty card that you are looking to retrieve transaction data for. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyCardTransactions1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLoyaltyCardTransactions1Request(
        $campaign_id,
        $member_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listLoyaltyCardTransactions1'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling listLoyaltyCardTransactions1'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling listLoyaltyCardTransactions1'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyCardTransactions1, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyCardTransactions1, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listLoyaltyCardTransactions1, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listLoyaltyCardTransactions1, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/loyalties/{campaignId}/members/{memberId}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLoyaltyTierEarningRules
     *
     * List Loyalty Tier Earning Rules
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierEarningRules'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody
     */
    public function listLoyaltyTierEarningRules(
        string $campaign_id,
        string $loyalty_tier_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyTierEarningRules'][0]
    ): \OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody
    {
        list($response) = $this->listLoyaltyTierEarningRulesWithHttpInfo($campaign_id, $loyalty_tier_id, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation listLoyaltyTierEarningRulesWithHttpInfo
     *
     * List Loyalty Tier Earning Rules
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierEarningRules'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLoyaltyTierEarningRulesWithHttpInfo(
        string $campaign_id,
        string $loyalty_tier_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyTierEarningRules'][0]
    ): array
    {
        $request = $this->listLoyaltyTierEarningRulesRequest($campaign_id, $loyalty_tier_id, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLoyaltyTierEarningRulesAsync
     *
     * List Loyalty Tier Earning Rules
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierEarningRules'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyTierEarningRulesAsync(
        string $campaign_id,
        string $loyalty_tier_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listLoyaltyTierEarningRules'][0]
    ): PromiseInterface
    {
        return $this->listLoyaltyTierEarningRulesAsyncWithHttpInfo($campaign_id, $loyalty_tier_id, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLoyaltyTierEarningRulesAsyncWithHttpInfo
     *
     * List Loyalty Tier Earning Rules
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierEarningRules'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyTierEarningRulesAsyncWithHttpInfo(
        $campaign_id,
        $loyalty_tier_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listLoyaltyTierEarningRules'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersEarningRulesListResponseBody';
        $request = $this->listLoyaltyTierEarningRulesRequest($campaign_id, $loyalty_tier_id, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLoyaltyTierEarningRules'
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierEarningRules'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLoyaltyTierEarningRulesRequest(
        $campaign_id,
        $loyalty_tier_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listLoyaltyTierEarningRules'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling listLoyaltyTierEarningRules'
            );
        }

        // verify the required parameter 'loyalty_tier_id' is set
        if ($loyalty_tier_id === null || (is_array($loyalty_tier_id) && count($loyalty_tier_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyalty_tier_id when calling listLoyaltyTierEarningRules'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyTierEarningRules, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyTierEarningRules, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listLoyaltyTierEarningRules, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listLoyaltyTierEarningRules, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/earning-rules';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($loyalty_tier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyTierId' . '}',
                ObjectSerializer::toPathValue($loyalty_tier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLoyaltyTierRewards
     *
     * List Loyalty Tier Rewards
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierRewards'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody
     */
    public function listLoyaltyTierRewards(
        string $campaign_id,
        string $loyalty_tier_id,
        string $contentType = self::contentTypes['listLoyaltyTierRewards'][0]
    ): \OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody
    {
        list($response) = $this->listLoyaltyTierRewardsWithHttpInfo($campaign_id, $loyalty_tier_id, $contentType);
        return $response;
    }

    /**
     * Operation listLoyaltyTierRewardsWithHttpInfo
     *
     * List Loyalty Tier Rewards
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierRewards'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLoyaltyTierRewardsWithHttpInfo(
        string $campaign_id,
        string $loyalty_tier_id,
        string $contentType = self::contentTypes['listLoyaltyTierRewards'][0]
    ): array
    {
        $request = $this->listLoyaltyTierRewardsRequest($campaign_id, $loyalty_tier_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLoyaltyTierRewardsAsync
     *
     * List Loyalty Tier Rewards
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierRewards'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyTierRewardsAsync(
        string $campaign_id,
        string $loyalty_tier_id,
        string $contentType = self::contentTypes['listLoyaltyTierRewards'][0]
    ): PromiseInterface
    {
        return $this->listLoyaltyTierRewardsAsyncWithHttpInfo($campaign_id, $loyalty_tier_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLoyaltyTierRewardsAsyncWithHttpInfo
     *
     * List Loyalty Tier Rewards
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierRewards'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyTierRewardsAsyncWithHttpInfo(
        $campaign_id,
        $loyalty_tier_id,
        string $contentType = self::contentTypes['listLoyaltyTierRewards'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersRewardsListResponseBody';
        $request = $this->listLoyaltyTierRewardsRequest($campaign_id, $loyalty_tier_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLoyaltyTierRewards'
     *
     * @param  string $campaign_id Unique campaign ID or name. (required)
     * @param  string $loyalty_tier_id Unique loyalty tier ID. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTierRewards'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLoyaltyTierRewardsRequest(
        $campaign_id,
        $loyalty_tier_id,
        string $contentType = self::contentTypes['listLoyaltyTierRewards'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling listLoyaltyTierRewards'
            );
        }

        // verify the required parameter 'loyalty_tier_id' is set
        if ($loyalty_tier_id === null || (is_array($loyalty_tier_id) && count($loyalty_tier_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $loyalty_tier_id when calling listLoyaltyTierRewards'
            );
        }


        $resourcePath = '/v1/loyalties/{campaignId}/tiers/{loyaltyTierId}/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($loyalty_tier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'loyaltyTierId' . '}',
                ObjectSerializer::toPathValue($loyalty_tier_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listLoyaltyTiers
     *
     * List Loyalty Tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListLoyaltyTiers|null $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesTiersListResponseBody
     */
    public function listLoyaltyTiers(
        string $campaign_id,
        ?int $limit = null,
        ?ParameterOrderListLoyaltyTiers $order = null,
        string $contentType = self::contentTypes['listLoyaltyTiers'][0]
    ): \OpenAPI\Client\Model\LoyaltiesTiersListResponseBody
    {
        list($response) = $this->listLoyaltyTiersWithHttpInfo($campaign_id, $limit, $order, $contentType);
        return $response;
    }

    /**
     * Operation listLoyaltyTiersWithHttpInfo
     *
     * List Loyalty Tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListLoyaltyTiers|null $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesTiersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listLoyaltyTiersWithHttpInfo(
        string $campaign_id,
        ?int $limit = null,
        ?ParameterOrderListLoyaltyTiers $order = null,
        string $contentType = self::contentTypes['listLoyaltyTiers'][0]
    ): array
    {
        $request = $this->listLoyaltyTiersRequest($campaign_id, $limit, $order, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesTiersListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesTiersListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesTiersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesTiersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listLoyaltyTiersAsync
     *
     * List Loyalty Tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListLoyaltyTiers|null $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyTiersAsync(
        string $campaign_id,
        ?int $limit = null,
        ?ParameterOrderListLoyaltyTiers $order = null,
        string $contentType = self::contentTypes['listLoyaltyTiers'][0]
    ): PromiseInterface
    {
        return $this->listLoyaltyTiersAsyncWithHttpInfo($campaign_id, $limit, $order, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listLoyaltyTiersAsyncWithHttpInfo
     *
     * List Loyalty Tiers
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListLoyaltyTiers|null $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listLoyaltyTiersAsyncWithHttpInfo(
        $campaign_id,
        $limit = null,
        $order = null,
        string $contentType = self::contentTypes['listLoyaltyTiers'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesTiersListResponseBody';
        $request = $this->listLoyaltyTiersRequest($campaign_id, $limit, $order, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listLoyaltyTiers'
     *
     * @param  string $campaign_id Unique loyalty campaign ID or name. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  ParameterOrderListLoyaltyTiers|null $order Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listLoyaltyTiers'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listLoyaltyTiersRequest(
        $campaign_id,
        $limit = null,
        $order = null,
        string $contentType = self::contentTypes['listLoyaltyTiers'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling listLoyaltyTiers'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyTiers, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listLoyaltyTiers, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/v1/loyalties/{campaignId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order,
            'order', // param base name
            'ParameterOrderListLoyaltyTiers', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMemberLoyaltyTier
     *
     * List Member&#39;s Loyalty Tiers
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberLoyaltyTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody
     */
    public function listMemberLoyaltyTier(
        string $member_id,
        string $contentType = self::contentTypes['listMemberLoyaltyTier'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody
    {
        list($response) = $this->listMemberLoyaltyTierWithHttpInfo($member_id, $contentType);
        return $response;
    }

    /**
     * Operation listMemberLoyaltyTierWithHttpInfo
     *
     * List Member&#39;s Loyalty Tiers
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberLoyaltyTier'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMemberLoyaltyTierWithHttpInfo(
        string $member_id,
        string $contentType = self::contentTypes['listMemberLoyaltyTier'][0]
    ): array
    {
        $request = $this->listMemberLoyaltyTierRequest($member_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMemberLoyaltyTierAsync
     *
     * List Member&#39;s Loyalty Tiers
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberLoyaltyTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listMemberLoyaltyTierAsync(
        string $member_id,
        string $contentType = self::contentTypes['listMemberLoyaltyTier'][0]
    ): PromiseInterface
    {
        return $this->listMemberLoyaltyTierAsyncWithHttpInfo($member_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMemberLoyaltyTierAsyncWithHttpInfo
     *
     * List Member&#39;s Loyalty Tiers
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberLoyaltyTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listMemberLoyaltyTierAsyncWithHttpInfo(
        $member_id,
        string $contentType = self::contentTypes['listMemberLoyaltyTier'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTiersListResponseBody';
        $request = $this->listMemberLoyaltyTierRequest($member_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMemberLoyaltyTier'
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberLoyaltyTier'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMemberLoyaltyTierRequest(
        $member_id,
        string $contentType = self::contentTypes['listMemberLoyaltyTier'][0]
    ): Request
    {

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling listMemberLoyaltyTier'
            );
        }


        $resourcePath = '/v1/loyalties/members/{memberId}/tiers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listMemberRewards
     *
     * List Member Rewards
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  bool|null $affordable_only Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberRewards'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody
     */
    public function listMemberRewards(
        string $member_id,
        ?bool $affordable_only = null,
        string $contentType = self::contentTypes['listMemberRewards'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody
    {
        list($response) = $this->listMemberRewardsWithHttpInfo($member_id, $affordable_only, $contentType);
        return $response;
    }

    /**
     * Operation listMemberRewardsWithHttpInfo
     *
     * List Member Rewards
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  bool|null $affordable_only Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberRewards'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listMemberRewardsWithHttpInfo(
        string $member_id,
        ?bool $affordable_only = null,
        string $contentType = self::contentTypes['listMemberRewards'][0]
    ): array
    {
        $request = $this->listMemberRewardsRequest($member_id, $affordable_only, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listMemberRewardsAsync
     *
     * List Member Rewards
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  bool|null $affordable_only Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberRewards'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listMemberRewardsAsync(
        string $member_id,
        ?bool $affordable_only = null,
        string $contentType = self::contentTypes['listMemberRewards'][0]
    ): PromiseInterface
    {
        return $this->listMemberRewardsAsyncWithHttpInfo($member_id, $affordable_only, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listMemberRewardsAsyncWithHttpInfo
     *
     * List Member Rewards
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  bool|null $affordable_only Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberRewards'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listMemberRewardsAsyncWithHttpInfo(
        $member_id,
        $affordable_only = null,
        string $contentType = self::contentTypes['listMemberRewards'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersRewardsListResponseBody';
        $request = $this->listMemberRewardsRequest($member_id, $affordable_only, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listMemberRewards'
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  bool|null $affordable_only Limit the results to rewards that the customer can actually afford (only rewards whose price in points is not higher than the loyalty points balance on a loyalty card). Set this flag to true to return rewards which the customer can actually afford. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listMemberRewards'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listMemberRewardsRequest(
        $member_id,
        $affordable_only = null,
        string $contentType = self::contentTypes['listMemberRewards'][0]
    ): Request
    {

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling listMemberRewards'
            );
        }



        $resourcePath = '/v1/loyalties/members/{memberId}/rewards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $affordable_only,
            'affordable_only', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPointsExpiration
     *
     * Get Points Expiration
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $member_id Loyalty card code. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPointsExpiration'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody
     */
    public function listPointsExpiration(
        string $campaign_id,
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listPointsExpiration'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody
    {
        list($response) = $this->listPointsExpirationWithHttpInfo($campaign_id, $member_id, $limit, $page, $contentType);
        return $response;
    }

    /**
     * Operation listPointsExpirationWithHttpInfo
     *
     * Get Points Expiration
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $member_id Loyalty card code. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPointsExpiration'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPointsExpirationWithHttpInfo(
        string $campaign_id,
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listPointsExpiration'][0]
    ): array
    {
        $request = $this->listPointsExpirationRequest($campaign_id, $member_id, $limit, $page, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPointsExpirationAsync
     *
     * Get Points Expiration
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $member_id Loyalty card code. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPointsExpiration'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listPointsExpirationAsync(
        string $campaign_id,
        string $member_id,
        ?int $limit = null,
        ?int $page = null,
        string $contentType = self::contentTypes['listPointsExpiration'][0]
    ): PromiseInterface
    {
        return $this->listPointsExpirationAsyncWithHttpInfo($campaign_id, $member_id, $limit, $page, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPointsExpirationAsyncWithHttpInfo
     *
     * Get Points Expiration
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $member_id Loyalty card code. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPointsExpiration'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function listPointsExpirationAsyncWithHttpInfo(
        $campaign_id,
        $member_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listPointsExpiration'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersPointsExpirationListResponseBody';
        $request = $this->listPointsExpirationRequest($campaign_id, $member_id, $limit, $page, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPointsExpiration'
     *
     * @param  string $campaign_id The campaign ID or name of the loyalty campaign. You can either pass the campaign ID, which was assigned by Voucherify, or the name of the campaign as the path parameter value, e.g., Loyalty%20Campaign. (required)
     * @param  string $member_id Loyalty card code. (required)
     * @param  int|null $limit Limits the number of objects to be returned. The limit can range between 1 and 100 items. If no limit is set, it returns 10 items. (optional)
     * @param  int|null $page Which page of results to return. The lowest value is 1. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPointsExpiration'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPointsExpirationRequest(
        $campaign_id,
        $member_id,
        $limit = null,
        $page = null,
        string $contentType = self::contentTypes['listPointsExpiration'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling listPointsExpiration'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling listPointsExpiration'
            );
        }

        if ($limit !== null && $limit > 100) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listPointsExpiration, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 1) {
            throw new InvalidArgumentException('invalid value for "$limit" when calling LoyaltiesApi.listPointsExpiration, must be bigger than or equal to 1.');
        }
        
        if ($page !== null && $page > 100) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listPointsExpiration, must be smaller than or equal to 100.');
        }
        if ($page !== null && $page < 1) {
            throw new InvalidArgumentException('invalid value for "$page" when calling LoyaltiesApi.listPointsExpiration, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/v1/loyalties/{campaignId}/members/{memberId}/points-expiration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemReward
     *
     * Redeem Reward
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody
     */
    public function redeemReward(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody
    {
        list($response) = $this->redeemRewardWithHttpInfo($member_id, $loyalties_members_redemption_redeem_request_body, $contentType);
        return $response;
    }

    /**
     * Operation redeemRewardWithHttpInfo
     *
     * Redeem Reward
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemRewardWithHttpInfo(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): array
    {
        $request = $this->redeemRewardRequest($member_id, $loyalties_members_redemption_redeem_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redeemRewardAsync
     *
     * Redeem Reward
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function redeemRewardAsync(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): PromiseInterface
    {
        return $this->redeemRewardAsyncWithHttpInfo($member_id, $loyalties_members_redemption_redeem_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemRewardAsyncWithHttpInfo
     *
     * Redeem Reward
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function redeemRewardAsyncWithHttpInfo(
        $member_id,
        $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody';
        $request = $this->redeemRewardRequest($member_id, $loyalties_members_redemption_redeem_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemReward'
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redeemRewardRequest(
        $member_id,
        $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward'][0]
    ): Request
    {

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling redeemReward'
            );
        }



        $resourcePath = '/v1/loyalties/members/{memberId}/redemption';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_members_redemption_redeem_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_members_redemption_redeem_request_body));
            } else {
                $httpBody = $loyalties_members_redemption_redeem_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemReward1
     *
     * Redeem Reward
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody
     */
    public function redeemReward1(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward1'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody
    {
        list($response) = $this->redeemReward1WithHttpInfo($campaign_id, $member_id, $loyalties_members_redemption_redeem_request_body, $contentType);
        return $response;
    }

    /**
     * Operation redeemReward1WithHttpInfo
     *
     * Redeem Reward
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemReward1WithHttpInfo(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward1'][0]
    ): array
    {
        $request = $this->redeemReward1Request($campaign_id, $member_id, $loyalties_members_redemption_redeem_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redeemReward1Async
     *
     * Redeem Reward
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function redeemReward1Async(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward1'][0]
    ): PromiseInterface
    {
        return $this->redeemReward1AsyncWithHttpInfo($campaign_id, $member_id, $loyalties_members_redemption_redeem_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemReward1AsyncWithHttpInfo
     *
     * Redeem Reward
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function redeemReward1AsyncWithHttpInfo(
        $campaign_id,
        $member_id,
        $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward1'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemResponseBody';
        $request = $this->redeemReward1Request($campaign_id, $member_id, $loyalties_members_redemption_redeem_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemReward1'
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersRedemptionRedeemRequestBody|null $loyalties_members_redemption_redeem_request_body Specify the reward to be redeemed. In case of a pay with points reward, specify the order and the number of points to be applied to the order. Please note that if you do not specify the amount of points, the application will default to applying the number of points to pay for the remainder of the order. If the limit of available points on the card is reached, then only the available points on the card will be applied to the order. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['redeemReward1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function redeemReward1Request(
        $campaign_id,
        $member_id,
        $loyalties_members_redemption_redeem_request_body = null,
        string $contentType = self::contentTypes['redeemReward1'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling redeemReward1'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling redeemReward1'
            );
        }



        $resourcePath = '/v1/loyalties/{campaignId}/members/{memberId}/redemption';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_members_redemption_redeem_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_members_redemption_redeem_request_body));
            } else {
                $httpBody = $loyalties_members_redemption_redeem_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation transferPoints
     *
     * Transfer Loyalty Points
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param  string $member_id A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTransferPoints[]|null $loyalties_transfer_points Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferPoints'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody
     */
    public function transferPoints(
        string $campaign_id,
        string $member_id,
        ?array $loyalties_transfer_points = null,
        string $contentType = self::contentTypes['transferPoints'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody
    {
        list($response) = $this->transferPointsWithHttpInfo($campaign_id, $member_id, $loyalties_transfer_points, $contentType);
        return $response;
    }

    /**
     * Operation transferPointsWithHttpInfo
     *
     * Transfer Loyalty Points
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param  string $member_id A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTransferPoints[]|null $loyalties_transfer_points Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferPoints'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function transferPointsWithHttpInfo(
        string $campaign_id,
        string $member_id,
        ?array $loyalties_transfer_points = null,
        string $contentType = self::contentTypes['transferPoints'][0]
    ): array
    {
        $request = $this->transferPointsRequest($campaign_id, $member_id, $loyalties_transfer_points, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation transferPointsAsync
     *
     * Transfer Loyalty Points
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param  string $member_id A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTransferPoints[]|null $loyalties_transfer_points Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferPoints'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function transferPointsAsync(
        string $campaign_id,
        string $member_id,
        ?array $loyalties_transfer_points = null,
        string $contentType = self::contentTypes['transferPoints'][0]
    ): PromiseInterface
    {
        return $this->transferPointsAsyncWithHttpInfo($campaign_id, $member_id, $loyalties_transfer_points, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation transferPointsAsyncWithHttpInfo
     *
     * Transfer Loyalty Points
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param  string $member_id A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTransferPoints[]|null $loyalties_transfer_points Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferPoints'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function transferPointsAsyncWithHttpInfo(
        $campaign_id,
        $member_id,
        $loyalties_transfer_points = null,
        string $contentType = self::contentTypes['transferPoints'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersTransfersCreateResponseBody';
        $request = $this->transferPointsRequest($campaign_id, $member_id, $loyalties_transfer_points, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'transferPoints'
     *
     * @param  string $campaign_id A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent (destination). (required)
     * @param  string $member_id A unique code identifying the loyalty card to which the user wants to transfer loyalty points (destination). (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesTransferPoints[]|null $loyalties_transfer_points Provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['transferPoints'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function transferPointsRequest(
        $campaign_id,
        $member_id,
        $loyalties_transfer_points = null,
        string $contentType = self::contentTypes['transferPoints'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling transferPoints'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling transferPoints'
            );
        }



        $resourcePath = '/v1/loyalties/{campaignId}/members/{memberId}/transfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_transfer_points)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_transfer_points));
            } else {
                $httpBody = $loyalties_transfer_points;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLoyaltyCardBalance
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody
     */
    public function updateLoyaltyCardBalance(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody
    {
        list($response) = $this->updateLoyaltyCardBalanceWithHttpInfo($member_id, $loyalties_members_balance_update_request_body, $contentType);
        return $response;
    }

    /**
     * Operation updateLoyaltyCardBalanceWithHttpInfo
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLoyaltyCardBalanceWithHttpInfo(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance'][0]
    ): array
    {
        $request = $this->updateLoyaltyCardBalanceRequest($member_id, $loyalties_members_balance_update_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLoyaltyCardBalanceAsync
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLoyaltyCardBalanceAsync(
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance'][0]
    ): PromiseInterface
    {
        return $this->updateLoyaltyCardBalanceAsyncWithHttpInfo($member_id, $loyalties_members_balance_update_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLoyaltyCardBalanceAsyncWithHttpInfo
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLoyaltyCardBalanceAsyncWithHttpInfo(
        $member_id,
        $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody';
        $request = $this->updateLoyaltyCardBalanceRequest($member_id, $loyalties_members_balance_update_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLoyaltyCardBalance'
     *
     * @param  string $member_id Unique loyalty card assigned to a particular customer. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLoyaltyCardBalanceRequest(
        $member_id,
        $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance'][0]
    ): Request
    {

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling updateLoyaltyCardBalance'
            );
        }



        $resourcePath = '/v1/loyalties/members/{memberId}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_members_balance_update_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_members_balance_update_request_body));
            } else {
                $httpBody = $loyalties_members_balance_update_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateLoyaltyCardBalance1
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody
     */
    public function updateLoyaltyCardBalance1(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance1'][0]
    ): \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody
    {
        list($response) = $this->updateLoyaltyCardBalance1WithHttpInfo($campaign_id, $member_id, $loyalties_members_balance_update_request_body, $contentType);
        return $response;
    }

    /**
     * Operation updateLoyaltyCardBalance1WithHttpInfo
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance1'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateLoyaltyCardBalance1WithHttpInfo(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance1'][0]
    ): array
    {
        $request = $this->updateLoyaltyCardBalance1Request($campaign_id, $member_id, $loyalties_members_balance_update_request_body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if (in_array('\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody', ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody';
            if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateLoyaltyCardBalance1Async
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLoyaltyCardBalance1Async(
        string $campaign_id,
        string $member_id,
        ?\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance1'][0]
    ): PromiseInterface
    {
        return $this->updateLoyaltyCardBalance1AsyncWithHttpInfo($campaign_id, $member_id, $loyalties_members_balance_update_request_body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateLoyaltyCardBalance1AsyncWithHttpInfo
     *
     * Add or Remove Loyalty Card Balance
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function updateLoyaltyCardBalance1AsyncWithHttpInfo(
        $campaign_id,
        $member_id,
        $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance1'][0]
    ): PromiseInterface
    {
        $returnType = '\OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateResponseBody';
        $request = $this->updateLoyaltyCardBalance1Request($campaign_id, $member_id, $loyalties_members_balance_update_request_body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateLoyaltyCardBalance1'
     *
     * @param  string $campaign_id Unique campaign ID. (required)
     * @param  string $member_id A code that identifies the loyalty card. (required)
     * @param  \OpenAPI\Client\Model\LoyaltiesMembersBalanceUpdateRequestBody|null $loyalties_members_balance_update_request_body Specify the point adjustment along with the expiration mechanism. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateLoyaltyCardBalance1'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateLoyaltyCardBalance1Request(
        $campaign_id,
        $member_id,
        $loyalties_members_balance_update_request_body = null,
        string $contentType = self::contentTypes['updateLoyaltyCardBalance1'][0]
    ): Request
    {

        // verify the required parameter 'campaign_id' is set
        if ($campaign_id === null || (is_array($campaign_id) && count($campaign_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $campaign_id when calling updateLoyaltyCardBalance1'
            );
        }

        // verify the required parameter 'member_id' is set
        if ($member_id === null || (is_array($member_id) && count($member_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $member_id when calling updateLoyaltyCardBalance1'
            );
        }



        $resourcePath = '/v1/loyalties/{campaignId}/members/{memberId}/balance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($campaign_id !== null) {
            $resourcePath = str_replace(
                '{' . 'campaignId' . '}',
                ObjectSerializer::toPathValue($campaign_id),
                $resourcePath
            );
        }
        // path params
        if ($member_id !== null) {
            $resourcePath = str_replace(
                '{' . 'memberId' . '}',
                ObjectSerializer::toPathValue($member_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($loyalties_members_balance_update_request_body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($loyalties_members_balance_update_request_body));
            } else {
                $httpBody = $loyalties_members_balance_update_request_body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Id');
        if ($apiKey !== null) {
            $headers['X-App-Id'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-App-Token');
        if ($apiKey !== null) {
            $headers['X-App-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
