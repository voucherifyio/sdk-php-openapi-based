<?php
/**
 * ValidationsValidateResponseBodyRedeemablesItemResultDiscount
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ValidationsValidateResponseBodyRedeemablesItemResultDiscount Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ValidationsValidateResponseBodyRedeemablesItemResultDiscount implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Validations_Validate_Response_Body_Redeemables_ItemResultDiscount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'type' => 'string',
        'amount_off' => 'float',
        'amount_off_formula' => 'string',
        'aggregated_amount_limit' => 'int',
        'effect' => 'string',
        'is_dynamic' => 'bool',
        'unit_off' => 'int',
        'unit_off_formula' => 'string',
        'unit_type' => 'string',
        'product' => '\OpenAPI\Client\Model\ValidationsValidateResponseBodyRedeemablesItemResultDiscountProduct',
        'sku' => '\OpenAPI\Client\Model\SimpleSkuDiscountUnit',
        'units' => '\OpenAPI\Client\Model\DiscountUnitMultipleOneUnit[]',
        'percent_off' => 'float',
        'percent_off_formula' => 'string',
        'amount_limit' => 'float',
        'fixed_amount' => 'float',
        'fixed_amount_formula' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'type' => null,
        'amount_off' => null,
        'amount_off_formula' => null,
        'aggregated_amount_limit' => null,
        'effect' => null,
        'is_dynamic' => null,
        'unit_off' => null,
        'unit_off_formula' => null,
        'unit_type' => null,
        'product' => null,
        'sku' => null,
        'units' => null,
        'percent_off' => null,
        'percent_off_formula' => null,
        'amount_limit' => null,
        'fixed_amount' => null,
        'fixed_amount_formula' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'type' => true,
        'amount_off' => true,
        'amount_off_formula' => true,
        'aggregated_amount_limit' => true,
        'effect' => true,
        'is_dynamic' => true,
        'unit_off' => true,
        'unit_off_formula' => true,
        'unit_type' => true,
        'product' => true,
        'sku' => true,
        'units' => true,
        'percent_off' => true,
        'percent_off_formula' => true,
        'amount_limit' => true,
        'fixed_amount' => true,
        'fixed_amount_formula' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'type' => 'type',
        'amount_off' => 'amount_off',
        'amount_off_formula' => 'amount_off_formula',
        'aggregated_amount_limit' => 'aggregated_amount_limit',
        'effect' => 'effect',
        'is_dynamic' => 'is_dynamic',
        'unit_off' => 'unit_off',
        'unit_off_formula' => 'unit_off_formula',
        'unit_type' => 'unit_type',
        'product' => 'product',
        'sku' => 'sku',
        'units' => 'units',
        'percent_off' => 'percent_off',
        'percent_off_formula' => 'percent_off_formula',
        'amount_limit' => 'amount_limit',
        'fixed_amount' => 'fixed_amount',
        'fixed_amount_formula' => 'fixed_amount_formula'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'type' => 'setType',
        'amount_off' => 'setAmountOff',
        'amount_off_formula' => 'setAmountOffFormula',
        'aggregated_amount_limit' => 'setAggregatedAmountLimit',
        'effect' => 'setEffect',
        'is_dynamic' => 'setIsDynamic',
        'unit_off' => 'setUnitOff',
        'unit_off_formula' => 'setUnitOffFormula',
        'unit_type' => 'setUnitType',
        'product' => 'setProduct',
        'sku' => 'setSku',
        'units' => 'setUnits',
        'percent_off' => 'setPercentOff',
        'percent_off_formula' => 'setPercentOffFormula',
        'amount_limit' => 'setAmountLimit',
        'fixed_amount' => 'setFixedAmount',
        'fixed_amount_formula' => 'setFixedAmountFormula'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'type' => 'getType',
        'amount_off' => 'getAmountOff',
        'amount_off_formula' => 'getAmountOffFormula',
        'aggregated_amount_limit' => 'getAggregatedAmountLimit',
        'effect' => 'getEffect',
        'is_dynamic' => 'getIsDynamic',
        'unit_off' => 'getUnitOff',
        'unit_off_formula' => 'getUnitOffFormula',
        'unit_type' => 'getUnitType',
        'product' => 'getProduct',
        'sku' => 'getSku',
        'units' => 'getUnits',
        'percent_off' => 'getPercentOff',
        'percent_off_formula' => 'getPercentOffFormula',
        'amount_limit' => 'getAmountLimit',
        'fixed_amount' => 'getFixedAmount',
        'fixed_amount_formula' => 'getFixedAmountFormula'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_AMOUNT = 'AMOUNT';
    public const TYPE_UNIT = 'UNIT';
    public const TYPE_PERCENT = 'PERCENT';
    public const TYPE_FIXED = 'FIXED';
    public const EFFECT_APPLY_TO_ORDER = 'APPLY_TO_ORDER';
    public const EFFECT_APPLY_TO_ITEMS = 'APPLY_TO_ITEMS';
    public const EFFECT_APPLY_TO_ITEMS_PROPORTIONALLY = 'APPLY_TO_ITEMS_PROPORTIONALLY';
    public const EFFECT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY = 'APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY';
    public const EFFECT_APPLY_TO_ITEMS_BY_QUANTITY = 'APPLY_TO_ITEMS_BY_QUANTITY';
    public const EFFECT_ADD_MISSING_ITEMS = 'ADD_MISSING_ITEMS';
    public const EFFECT_ADD_NEW_ITEMS = 'ADD_NEW_ITEMS';
    public const EFFECT_ADD_MANY_ITEMS = 'ADD_MANY_ITEMS';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_AMOUNT,
            self::TYPE_UNIT,
            self::TYPE_PERCENT,
            self::TYPE_FIXED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEffectAllowableValues()
    {
        return [
            self::EFFECT_APPLY_TO_ORDER,
            self::EFFECT_APPLY_TO_ITEMS,
            self::EFFECT_APPLY_TO_ITEMS_PROPORTIONALLY,
            self::EFFECT_APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY,
            self::EFFECT_APPLY_TO_ITEMS_BY_QUANTITY,
            self::EFFECT_ADD_MISSING_ITEMS,
            self::EFFECT_ADD_NEW_ITEMS,
            self::EFFECT_ADD_MANY_ITEMS,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('amount_off', $data ?? [], null);
        $this->setIfExists('amount_off_formula', $data ?? [], null);
        $this->setIfExists('aggregated_amount_limit', $data ?? [], null);
        $this->setIfExists('effect', $data ?? [], null);
        $this->setIfExists('is_dynamic', $data ?? [], null);
        $this->setIfExists('unit_off', $data ?? [], null);
        $this->setIfExists('unit_off_formula', $data ?? [], null);
        $this->setIfExists('unit_type', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('sku', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('percent_off', $data ?? [], null);
        $this->setIfExists('percent_off_formula', $data ?? [], null);
        $this->setIfExists('amount_limit', $data ?? [], null);
        $this->setIfExists('fixed_amount', $data ?? [], null);
        $this->setIfExists('fixed_amount_formula', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEffectAllowableValues();
        if (!is_null($this->container['effect']) && !in_array($this->container['effect'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'effect', must be one of '%s'",
                $this->container['effect'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets amount_off
     *
     * @return float|null
     */
    public function getAmountOff(): ?float
    {
        return $this->container['amount_off'];
    }

    /**
     * Sets amount_off
     *
     * @param float|null $amount_off Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.
     *
     * @return $this
     */
    public function setAmountOff(?float $amount_off): static
    {
        if (is_null($amount_off)) {
            array_push($this->openAPINullablesSetToNull, 'amount_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_off'] = $amount_off;

        return $this;
    }

    /**
     * Gets amount_off_formula
     *
     * @return string|null
     */
    public function getAmountOffFormula(): ?string
    {
        return $this->container['amount_off_formula'];
    }

    /**
     * Sets amount_off_formula
     *
     * @param string|null $amount_off_formula amount_off_formula
     *
     * @return $this
     */
    public function setAmountOffFormula(?string $amount_off_formula): static
    {
        if (is_null($amount_off_formula)) {
            array_push($this->openAPINullablesSetToNull, 'amount_off_formula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_off_formula', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_off_formula'] = $amount_off_formula;

        return $this;
    }

    /**
     * Gets aggregated_amount_limit
     *
     * @return int|null
     */
    public function getAggregatedAmountLimit(): ?int
    {
        return $this->container['aggregated_amount_limit'];
    }

    /**
     * Sets aggregated_amount_limit
     *
     * @param int|null $aggregated_amount_limit Maximum discount amount per order.
     *
     * @return $this
     */
    public function setAggregatedAmountLimit(?int $aggregated_amount_limit): static
    {
        if (is_null($aggregated_amount_limit)) {
            array_push($this->openAPINullablesSetToNull, 'aggregated_amount_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('aggregated_amount_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['aggregated_amount_limit'] = $aggregated_amount_limit;

        return $this;
    }

    /**
     * Gets effect
     *
     * @return string|null
     */
    public function getEffect(): ?string
    {
        return $this->container['effect'];
    }

    /**
     * Sets effect
     *
     * @param string|null $effect effect
     *
     * @return $this
     */
    public function setEffect(?string $effect): static
    {
        if (is_null($effect)) {
            array_push($this->openAPINullablesSetToNull, 'effect');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('effect', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getEffectAllowableValues();
        if (!is_null($effect) && !in_array($effect, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'effect', must be one of '%s'",
                    $effect,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['effect'] = $effect;

        return $this;
    }

    /**
     * Gets is_dynamic
     *
     * @return bool|null
     */
    public function getIsDynamic(): ?bool
    {
        return $this->container['is_dynamic'];
    }

    /**
     * Sets is_dynamic
     *
     * @param bool|null $is_dynamic Flag indicating whether the discount was calculated using a formula.
     *
     * @return $this
     */
    public function setIsDynamic(?bool $is_dynamic): static
    {
        if (is_null($is_dynamic)) {
            array_push($this->openAPINullablesSetToNull, 'is_dynamic');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_dynamic', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_dynamic'] = $is_dynamic;

        return $this;
    }

    /**
     * Gets unit_off
     *
     * @return int|null
     */
    public function getUnitOff(): ?int
    {
        return $this->container['unit_off'];
    }

    /**
     * Sets unit_off
     *
     * @param int|null $unit_off Number of units to be granted a full value discount.
     *
     * @return $this
     */
    public function setUnitOff(?int $unit_off): static
    {
        if (is_null($unit_off)) {
            array_push($this->openAPINullablesSetToNull, 'unit_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_off'] = $unit_off;

        return $this;
    }

    /**
     * Gets unit_off_formula
     *
     * @return string|null
     */
    public function getUnitOffFormula(): ?string
    {
        return $this->container['unit_off_formula'];
    }

    /**
     * Sets unit_off_formula
     *
     * @param string|null $unit_off_formula unit_off_formula
     *
     * @return $this
     */
    public function setUnitOffFormula(?string $unit_off_formula): static
    {
        if (is_null($unit_off_formula)) {
            array_push($this->openAPINullablesSetToNull, 'unit_off_formula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_off_formula', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_off_formula'] = $unit_off_formula;

        return $this;
    }

    /**
     * Gets unit_type
     *
     * @return string|null
     */
    public function getUnitType(): ?string
    {
        return $this->container['unit_type'];
    }

    /**
     * Sets unit_type
     *
     * @param string|null $unit_type The product deemed as free, chosen from product inventory (e.g. time, items).
     *
     * @return $this
     */
    public function setUnitType(?string $unit_type): static
    {
        if (is_null($unit_type)) {
            array_push($this->openAPINullablesSetToNull, 'unit_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('unit_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['unit_type'] = $unit_type;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \OpenAPI\Client\Model\ValidationsValidateResponseBodyRedeemablesItemResultDiscountProduct|null
     */
    public function getProduct(): ?\OpenAPI\Client\Model\ValidationsValidateResponseBodyRedeemablesItemResultDiscountProduct
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \OpenAPI\Client\Model\ValidationsValidateResponseBodyRedeemablesItemResultDiscountProduct|null $product product
     *
     * @return $this
     */
    public function setProduct(?\OpenAPI\Client\Model\ValidationsValidateResponseBodyRedeemablesItemResultDiscountProduct $product): static
    {
        if (is_null($product)) {
            array_push($this->openAPINullablesSetToNull, 'product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return \OpenAPI\Client\Model\SimpleSkuDiscountUnit|null
     */
    public function getSku(): ?\OpenAPI\Client\Model\SimpleSkuDiscountUnit
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param \OpenAPI\Client\Model\SimpleSkuDiscountUnit|null $sku sku
     *
     * @return $this
     */
    public function setSku(?\OpenAPI\Client\Model\SimpleSkuDiscountUnit $sku): static
    {
        if (is_null($sku)) {
            array_push($this->openAPINullablesSetToNull, 'sku');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sku', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets units
     *
     * @return \OpenAPI\Client\Model\DiscountUnitMultipleOneUnit[]|null
     */
    public function getUnits(): ?array
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param \OpenAPI\Client\Model\DiscountUnitMultipleOneUnit[]|null $units units
     *
     * @return $this
     */
    public function setUnits(?array $units): static
    {
        if (is_null($units)) {
            array_push($this->openAPINullablesSetToNull, 'units');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('units', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets percent_off
     *
     * @return float|null
     */
    public function getPercentOff(): ?float
    {
        return $this->container['percent_off'];
    }

    /**
     * Sets percent_off
     *
     * @param float|null $percent_off The percent discount that the customer will receive.
     *
     * @return $this
     */
    public function setPercentOff(?float $percent_off): static
    {
        if (is_null($percent_off)) {
            array_push($this->openAPINullablesSetToNull, 'percent_off');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percent_off', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percent_off'] = $percent_off;

        return $this;
    }

    /**
     * Gets percent_off_formula
     *
     * @return string|null
     */
    public function getPercentOffFormula(): ?string
    {
        return $this->container['percent_off_formula'];
    }

    /**
     * Sets percent_off_formula
     *
     * @param string|null $percent_off_formula percent_off_formula
     *
     * @return $this
     */
    public function setPercentOffFormula(?string $percent_off_formula): static
    {
        if (is_null($percent_off_formula)) {
            array_push($this->openAPINullablesSetToNull, 'percent_off_formula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('percent_off_formula', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['percent_off_formula'] = $percent_off_formula;

        return $this;
    }

    /**
     * Gets amount_limit
     *
     * @return float|null
     */
    public function getAmountLimit(): ?float
    {
        return $this->container['amount_limit'];
    }

    /**
     * Sets amount_limit
     *
     * @param float|null $amount_limit Upper limit allowed to be applied as a discount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $6 maximum discount is written as 600.
     *
     * @return $this
     */
    public function setAmountLimit(?float $amount_limit): static
    {
        if (is_null($amount_limit)) {
            array_push($this->openAPINullablesSetToNull, 'amount_limit');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount_limit', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount_limit'] = $amount_limit;

        return $this;
    }

    /**
     * Gets fixed_amount
     *
     * @return float|null
     */
    public function getFixedAmount(): ?float
    {
        return $this->container['fixed_amount'];
    }

    /**
     * Sets fixed_amount
     *
     * @param float|null $fixed_amount Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.
     *
     * @return $this
     */
    public function setFixedAmount(?float $fixed_amount): static
    {
        if (is_null($fixed_amount)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_amount'] = $fixed_amount;

        return $this;
    }

    /**
     * Gets fixed_amount_formula
     *
     * @return string|null
     */
    public function getFixedAmountFormula(): ?string
    {
        return $this->container['fixed_amount_formula'];
    }

    /**
     * Sets fixed_amount_formula
     *
     * @param string|null $fixed_amount_formula fixed_amount_formula
     *
     * @return $this
     */
    public function setFixedAmountFormula(?string $fixed_amount_formula): static
    {
        if (is_null($fixed_amount_formula)) {
            array_push($this->openAPINullablesSetToNull, 'fixed_amount_formula');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fixed_amount_formula', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fixed_amount_formula'] = $fixed_amount_formula;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


