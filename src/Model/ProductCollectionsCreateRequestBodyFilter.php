<?php
/**
 * ProductCollectionsCreateRequestBodyFilter
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * ProductCollectionsCreateRequestBodyFilter Class Doc Comment
 *
 * @description Defines a set of criteria and boundary conditions for an &#x60;AUTO_UPDATE&#x60; product collection type.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class ProductCollectionsCreateRequestBodyFilter implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ProductCollectionsCreateRequestBody_filter';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'junction' => 'string',
        'id' => '\OpenAPI\Client\Model\FieldConditions',
        'product_id' => '\OpenAPI\Client\Model\FieldConditions',
        'source_id' => '\OpenAPI\Client\Model\FieldConditions',
        'name' => '\OpenAPI\Client\Model\FieldConditions',
        'price' => '\OpenAPI\Client\Model\FieldConditions',
        'object' => '\OpenAPI\Client\Model\FieldConditions',
        'attributes' => '\OpenAPI\Client\Model\FieldConditions',
        'metadata' => '\OpenAPI\Client\Model\FieldConditions',
        'image_url' => '\OpenAPI\Client\Model\FieldConditions',
        'skus' => '\OpenAPI\Client\Model\FieldConditions',
        'created_at' => '\OpenAPI\Client\Model\FieldConditions',
        'updated_at' => '\OpenAPI\Client\Model\FieldConditions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'junction' => null,
        'id' => null,
        'product_id' => null,
        'source_id' => null,
        'name' => null,
        'price' => null,
        'object' => null,
        'attributes' => null,
        'metadata' => null,
        'image_url' => null,
        'skus' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'junction' => true,
        'id' => true,
        'product_id' => true,
        'source_id' => true,
        'name' => true,
        'price' => true,
        'object' => true,
        'attributes' => true,
        'metadata' => true,
        'image_url' => true,
        'skus' => true,
        'created_at' => true,
        'updated_at' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'junction' => 'junction',
        'id' => 'id',
        'product_id' => 'product_id',
        'source_id' => 'source_id',
        'name' => 'name',
        'price' => 'price',
        'object' => 'object',
        'attributes' => 'attributes',
        'metadata' => 'metadata',
        'image_url' => 'image_url',
        'skus' => 'skus',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'junction' => 'setJunction',
        'id' => 'setId',
        'product_id' => 'setProductId',
        'source_id' => 'setSourceId',
        'name' => 'setName',
        'price' => 'setPrice',
        'object' => 'setObject',
        'attributes' => 'setAttributes',
        'metadata' => 'setMetadata',
        'image_url' => 'setImageUrl',
        'skus' => 'setSkus',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'junction' => 'getJunction',
        'id' => 'getId',
        'product_id' => 'getProductId',
        'source_id' => 'getSourceId',
        'name' => 'getName',
        'price' => 'getPrice',
        'object' => 'getObject',
        'attributes' => 'getAttributes',
        'metadata' => 'getMetadata',
        'image_url' => 'getImageUrl',
        'skus' => 'getSkus',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const JUNCTION__AND = 'and';
    public const JUNCTION__OR = 'or';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJunctionAllowableValues()
    {
        return [
            self::JUNCTION__AND,
            self::JUNCTION__OR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('junction', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('image_url', $data ?? [], null);
        $this->setIfExists('skus', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($this->container['junction']) && !in_array($this->container['junction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'junction', must be one of '%s'",
                $this->container['junction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets junction
     *
     * @return string|null
     */
    public function getJunction(): ?string
    {
        return $this->container['junction'];
    }

    /**
     * Sets junction
     *
     * @param string|null $junction Logical Operator Between Filters. Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `AND` is an all-inclusive logical operator, meaning the `AND` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `OR` operator displays a record if **ANY** of the conditions separated by OR is TRUE.
     *
     * @return $this
     */
    public function setJunction(?string $junction): static
    {
        if (is_null($junction)) {
            array_push($this->openAPINullablesSetToNull, 'junction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('junction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($junction) && !in_array($junction, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'junction', must be one of '%s'",
                    $junction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['junction'] = $junction;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getId(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $id id
     *
     * @return $this
     */
    public function setId(?\OpenAPI\Client\Model\FieldConditions $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getProductId(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $product_id product_id
     *
     * @return $this
     */
    public function setProductId(?\OpenAPI\Client\Model\FieldConditions $product_id): static
    {
        if (is_null($product_id)) {
            array_push($this->openAPINullablesSetToNull, 'product_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getSourceId(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $source_id source_id
     *
     * @return $this
     */
    public function setSourceId(?\OpenAPI\Client\Model\FieldConditions $source_id): static
    {
        if (is_null($source_id)) {
            array_push($this->openAPINullablesSetToNull, 'source_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getName(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $name name
     *
     * @return $this
     */
    public function setName(?\OpenAPI\Client\Model\FieldConditions $name): static
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getPrice(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $price price
     *
     * @return $this
     */
    public function setPrice(?\OpenAPI\Client\Model\FieldConditions $price): static
    {
        if (is_null($price)) {
            array_push($this->openAPINullablesSetToNull, 'price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('price', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets object
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getObject(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $object object
     *
     * @return $this
     */
    public function setObject(?\OpenAPI\Client\Model\FieldConditions $object): static
    {
        if (is_null($object)) {
            array_push($this->openAPINullablesSetToNull, 'object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAttributes(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $attributes attributes
     *
     * @return $this
     */
    public function setAttributes(?\OpenAPI\Client\Model\FieldConditions $attributes): static
    {
        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getMetadata(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $metadata metadata
     *
     * @return $this
     */
    public function setMetadata(?\OpenAPI\Client\Model\FieldConditions $metadata): static
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getImageUrl(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl(?\OpenAPI\Client\Model\FieldConditions $image_url): static
    {
        if (is_null($image_url)) {
            array_push($this->openAPINullablesSetToNull, 'image_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets skus
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getSkus(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['skus'];
    }

    /**
     * Sets skus
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $skus skus
     *
     * @return $this
     */
    public function setSkus(?\OpenAPI\Client\Model\FieldConditions $skus): static
    {
        if (is_null($skus)) {
            array_push($this->openAPINullablesSetToNull, 'skus');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('skus', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['skus'] = $skus;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCreatedAt(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt(?\OpenAPI\Client\Model\FieldConditions $created_at): static
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getUpdatedAt(): ?\OpenAPI\Client\Model\FieldConditions
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt(?\OpenAPI\Client\Model\FieldConditions $updated_at): static
    {
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


