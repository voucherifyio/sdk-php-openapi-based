<?php
/**
 * CodeConfigRequiredLengthCharsetPattern
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CodeConfigRequiredLengthCharsetPattern Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CodeConfigRequiredLengthCharsetPattern implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CodeConfigRequiredLengthCharsetPattern';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        'length' => 'float',
        'charset' => 'string',
        'prefix' => 'string',
        'postfix' => 'string',
        'pattern' => 'string',
        'initial_count' => 'int'
=======
        'name' => 'string',
        'parameters' => '\OpenAPI\Client\Model\RewardsCreateRequestBodyParameters',
        'metadata' => 'object',
        'stock' => 'int',
        'attributes' => '\OpenAPI\Client\Model\RewardsCreateRequestBodyAttributes'
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        'length' => null,
        'charset' => null,
        'prefix' => null,
        'postfix' => null,
        'pattern' => null,
        'initial_count' => null
=======
        'name' => null,
        'parameters' => null,
        'metadata' => null,
        'stock' => null,
        'attributes' => null
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        'length' => false,
		'charset' => false,
		'prefix' => false,
		'postfix' => false,
		'pattern' => false,
		'initial_count' => false
=======
        'name' => true,
		'parameters' => true,
		'metadata' => true,
		'stock' => true,
		'attributes' => true
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        'length' => 'length',
        'charset' => 'charset',
        'prefix' => 'prefix',
        'postfix' => 'postfix',
        'pattern' => 'pattern',
        'initial_count' => 'initial_count'
=======
        'name' => 'name',
        'parameters' => 'parameters',
        'metadata' => 'metadata',
        'stock' => 'stock',
        'attributes' => 'attributes'
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        'length' => 'setLength',
        'charset' => 'setCharset',
        'prefix' => 'setPrefix',
        'postfix' => 'setPostfix',
        'pattern' => 'setPattern',
        'initial_count' => 'setInitialCount'
=======
        'name' => 'setName',
        'parameters' => 'setParameters',
        'metadata' => 'setMetadata',
        'stock' => 'setStock',
        'attributes' => 'setAttributes'
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        'length' => 'getLength',
        'charset' => 'getCharset',
        'prefix' => 'getPrefix',
        'postfix' => 'getPostfix',
        'pattern' => 'getPattern',
        'initial_count' => 'getInitialCount'
=======
        'name' => 'getName',
        'parameters' => 'getParameters',
        'metadata' => 'getMetadata',
        'stock' => 'getStock',
        'attributes' => 'getAttributes'
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
        $this->setIfExists('length', $data ?? [], null);
        $this->setIfExists('charset', $data ?? [], null);
        $this->setIfExists('prefix', $data ?? [], null);
        $this->setIfExists('postfix', $data ?? [], null);
        $this->setIfExists('pattern', $data ?? [], null);
        $this->setIfExists('initial_count', $data ?? [], null);
=======
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('parameters', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('stock', $data ?? [], null);
        $this->setIfExists('attributes', $data ?? [], null);
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['length'] === null) {
            $invalidProperties[] = "'length' can't be null";
        }
        if ($this->container['charset'] === null) {
            $invalidProperties[] = "'charset' can't be null";
        }
        if ($this->container['pattern'] === null) {
            $invalidProperties[] = "'pattern' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets length
     *
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float $length Number of characters in a generated code (excluding prefix and postfix).
     *
     * @return self
     */
    public function setLength($length)
    {
        if (is_null($length)) {
            throw new \InvalidArgumentException('non-nullable length cannot be null');
        }
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets charset
     *
     * @return string
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     *
     * @param string $charset Characters that can appear in the code.    Examples:  - Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz`  - Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Numbers: `0123456789`   - Custom: a custom character set
     *
     * @return self
     */
    public function setCharset($charset)
    {
        if (is_null($charset)) {
            throw new \InvalidArgumentException('non-nullable charset cannot be null');
        }
        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return string|null
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param string|null $prefix A text appended before the code.
     *
     * @return self
     */
    public function setPrefix($prefix)
    {
        if (is_null($prefix)) {
            throw new \InvalidArgumentException('non-nullable prefix cannot be null');
        }
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets postfix
     *
     * @return string|null
     */
    public function getPostfix()
    {
        return $this->container['postfix'];
    }

    /**
     * Sets postfix
     *
     * @param string|null $postfix A text appended after the code.
     *
     * @return self
     */
    public function setPostfix($postfix)
    {
        if (is_null($postfix)) {
            throw new \InvalidArgumentException('non-nullable postfix cannot be null');
        }
        $this->container['postfix'] = $postfix;

        return $this;
    }

    /**
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
     * Gets pattern
     *
     * @return string
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string $pattern A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`.
     *
     * @return self
     */
    public function setPattern($pattern)
    {
        if (is_null($pattern)) {
            throw new \InvalidArgumentException('non-nullable pattern cannot be null');
        }
        $this->container['pattern'] = $pattern;
=======
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php

        return $this;
    }

    /**
<<<<<<< Updated upstream:src/Model/CodeConfigRequiredLengthCharsetPattern.php
     * Gets initial_count
=======
     * Gets stock
>>>>>>> Stashed changes:src/Model/RewardsCreateRequestBody.php
     *
     * @return int|null
     */
    public function getInitialCount()
    {
        return $this->container['initial_count'];
    }

    /**
     * Sets initial_count
     *
     * @param int|null $initial_count The initial count
     *
     * @return self
     */
    public function setInitialCount($initial_count)
    {
        if (is_null($initial_count)) {
            throw new \InvalidArgumentException('non-nullable initial_count cannot be null');
        }
        $this->container['initial_count'] = $initial_count;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \OpenAPI\Client\Model\RewardsCreateRequestBodyAttributes|null
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \OpenAPI\Client\Model\RewardsCreateRequestBodyAttributes|null $attributes attributes
     *
     * @return self
     */
    public function setAttributes($attributes)
    {
        if (is_null($attributes)) {
            array_push($this->openAPINullablesSetToNull, 'attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attributes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attributes'] = $attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


