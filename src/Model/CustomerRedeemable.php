<?php
/**
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
 * OrderCalculatedReferrer
========
 * CustomerRedeemable
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
 * OrderCalculatedReferrer Class Doc Comment
========
 * CustomerRedeemable Class Doc Comment
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
 *
 * @category Class
 * @description Single customer&#39;s redeemable
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
class OrderCalculatedReferrer implements ModelInterface, ArrayAccess, \JsonSerializable
========
class CustomerRedeemable implements ModelInterface, ArrayAccess, \JsonSerializable
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
    protected static $openAPIModelName = 'Order_Calculated_Referrer';
========
    protected static $openAPIModelName = 'CustomerRedeemable';
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        'source_id' => 'string',
        'summary' => '\OpenAPI\Client\Model\CustomerSummary',
        'loyalty' => '\OpenAPI\Client\Model\CustomerLoyalty',
        'referrals' => '\OpenAPI\Client\Model\CustomerReferrals',
        'system_metadata' => 'object',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'assets' => '\OpenAPI\Client\Model\CustomerResponseDataAssets',
        'object' => 'string',
        'name' => 'string',
        'description' => 'string',
        'email' => 'string',
        'phone' => 'string',
        'birthday' => '\DateTime',
        'birthdate' => '\DateTime',
        'address' => '\OpenAPI\Client\Model\OrderCalculatedCustomerAddress',
        'metadata' => 'object'
========
        'created_at' => '\DateTime',
        'redeemable_id' => 'string',
        'redeemable_object' => 'string',
        'customer_id' => 'string',
        'holder_role' => 'string',
        'campaign_id' => 'string',
        'campaign_type' => 'string',
        'voucher_type' => 'string',
        'redeemable' => '\OpenAPI\Client\Model\CustomerRedeemableRedeemable'
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        'source_id' => null,
        'summary' => null,
        'loyalty' => null,
        'referrals' => null,
        'system_metadata' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'assets' => null,
        'object' => null,
        'name' => null,
        'description' => null,
        'email' => null,
        'phone' => null,
        'birthday' => 'date',
        'birthdate' => 'date',
        'address' => null,
        'metadata' => null
========
        'created_at' => 'date-time',
        'redeemable_id' => null,
        'redeemable_object' => null,
        'customer_id' => null,
        'holder_role' => null,
        'campaign_id' => null,
        'campaign_type' => null,
        'voucher_type' => null,
        'redeemable' => null
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        'id' => false,
		'source_id' => false,
		'summary' => true,
		'loyalty' => true,
		'referrals' => true,
		'system_metadata' => false,
		'created_at' => false,
		'updated_at' => false,
		'assets' => false,
		'object' => false,
		'name' => false,
		'description' => false,
		'email' => false,
		'phone' => false,
		'birthday' => false,
		'birthdate' => false,
		'address' => true,
		'metadata' => false
========
        'id' => true,
		'created_at' => true,
		'redeemable_id' => true,
		'redeemable_object' => true,
		'customer_id' => true,
		'holder_role' => true,
		'campaign_id' => true,
		'campaign_type' => true,
		'voucher_type' => true,
		'redeemable' => true
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        'source_id' => 'source_id',
        'summary' => 'summary',
        'loyalty' => 'loyalty',
        'referrals' => 'referrals',
        'system_metadata' => 'system_metadata',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'assets' => 'assets',
        'object' => 'object',
        'name' => 'name',
        'description' => 'description',
        'email' => 'email',
        'phone' => 'phone',
        'birthday' => 'birthday',
        'birthdate' => 'birthdate',
        'address' => 'address',
        'metadata' => 'metadata'
========
        'created_at' => 'created_at',
        'redeemable_id' => 'redeemable_id',
        'redeemable_object' => 'redeemable_object',
        'customer_id' => 'customer_id',
        'holder_role' => 'holder_role',
        'campaign_id' => 'campaign_id',
        'campaign_type' => 'campaign_type',
        'voucher_type' => 'voucher_type',
        'redeemable' => 'redeemable'
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        'source_id' => 'setSourceId',
        'summary' => 'setSummary',
        'loyalty' => 'setLoyalty',
        'referrals' => 'setReferrals',
        'system_metadata' => 'setSystemMetadata',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'assets' => 'setAssets',
        'object' => 'setObject',
        'name' => 'setName',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'birthday' => 'setBirthday',
        'birthdate' => 'setBirthdate',
        'address' => 'setAddress',
        'metadata' => 'setMetadata'
========
        'created_at' => 'setCreatedAt',
        'redeemable_id' => 'setRedeemableId',
        'redeemable_object' => 'setRedeemableObject',
        'customer_id' => 'setCustomerId',
        'holder_role' => 'setHolderRole',
        'campaign_id' => 'setCampaignId',
        'campaign_type' => 'setCampaignType',
        'voucher_type' => 'setVoucherType',
        'redeemable' => 'setRedeemable'
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        'source_id' => 'getSourceId',
        'summary' => 'getSummary',
        'loyalty' => 'getLoyalty',
        'referrals' => 'getReferrals',
        'system_metadata' => 'getSystemMetadata',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'assets' => 'getAssets',
        'object' => 'getObject',
        'name' => 'getName',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'birthday' => 'getBirthday',
        'birthdate' => 'getBirthdate',
        'address' => 'getAddress',
        'metadata' => 'getMetadata'
========
        'created_at' => 'getCreatedAt',
        'redeemable_id' => 'getRedeemableId',
        'redeemable_object' => 'getRedeemableObject',
        'customer_id' => 'getCustomerId',
        'holder_role' => 'getHolderRole',
        'campaign_id' => 'getCampaignId',
        'campaign_type' => 'getCampaignType',
        'voucher_type' => 'getVoucherType',
        'redeemable' => 'getRedeemable'
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
    public const OBJECT_CUSTOMER = 'customer';
========
    public const HOLDER_ROLE_OWNER = 'OWNER';
    public const HOLDER_ROLE_REFERRER = 'REFERRER';
    public const HOLDER_ROLE_REFEREE = 'REFEREE';
    public const CAMPAIGN_TYPE_LOYALTY_PROGRAM = 'LOYALTY_PROGRAM';
    public const CAMPAIGN_TYPE_GIFT_VOUCHERS = 'GIFT_VOUCHERS';
    public const CAMPAIGN_TYPE_DISCOUNT_COUPONS = 'DISCOUNT_COUPONS';
    public const CAMPAIGN_TYPE_PROMOTION = 'PROMOTION';
    public const CAMPAIGN_TYPE_REFERRAL_PROGRAM = 'REFERRAL_PROGRAM';
    public const CAMPAIGN_TYPE_LUCKY_DRAW = 'LUCKY_DRAW';
    public const VOUCHER_TYPE_GIFT_VOUCHER = 'GIFT_VOUCHER';
    public const VOUCHER_TYPE_DISCOUNT_VOUCHER = 'DISCOUNT_VOUCHER';
    public const VOUCHER_TYPE_LOYALTY_CARD = 'LOYALTY_CARD';
    public const VOUCHER_TYPE_LUCKY_DRAW_CODE = 'LUCKY_DRAW_CODE';
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHolderRoleAllowableValues()
    {
        return [
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
            self::OBJECT_CUSTOMER,
========
            self::HOLDER_ROLE_OWNER,
            self::HOLDER_ROLE_REFERRER,
            self::HOLDER_ROLE_REFEREE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCampaignTypeAllowableValues()
    {
        return [
            self::CAMPAIGN_TYPE_LOYALTY_PROGRAM,
            self::CAMPAIGN_TYPE_GIFT_VOUCHERS,
            self::CAMPAIGN_TYPE_DISCOUNT_COUPONS,
            self::CAMPAIGN_TYPE_PROMOTION,
            self::CAMPAIGN_TYPE_REFERRAL_PROGRAM,
            self::CAMPAIGN_TYPE_LUCKY_DRAW,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVoucherTypeAllowableValues()
    {
        return [
            self::VOUCHER_TYPE_GIFT_VOUCHER,
            self::VOUCHER_TYPE_DISCOUNT_VOUCHER,
            self::VOUCHER_TYPE_LOYALTY_CARD,
            self::VOUCHER_TYPE_LUCKY_DRAW_CODE,
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('loyalty', $data ?? [], null);
        $this->setIfExists('referrals', $data ?? [], null);
        $this->setIfExists('system_metadata', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'customer');
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
========
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('redeemable_id', $data ?? [], null);
        $this->setIfExists('redeemable_object', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('holder_role', $data ?? [], 'OWNER');
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('campaign_type', $data ?? [], 'DISCOUNT_COUPONS');
        $this->setIfExists('voucher_type', $data ?? [], 'DISCOUNT_VOUCHER');
        $this->setIfExists('redeemable', $data ?? [], null);
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getHolderRoleAllowableValues();
        if (!is_null($this->container['holder_role']) && !in_array($this->container['holder_role'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'holder_role', must be one of '%s'",
                $this->container['holder_role'],
                implode("', '", $allowedValues)
            );
        }

<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
========
        $allowedValues = $this->getCampaignTypeAllowableValues();
        if (!is_null($this->container['campaign_type']) && !in_array($this->container['campaign_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'campaign_type', must be one of '%s'",
                $this->container['campaign_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($this->container['voucher_type']) && !in_array($this->container['voucher_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'voucher_type', must be one of '%s'",
                $this->container['voucher_type'],
                implode("', '", $allowedValues)
            );
        }

>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
     * @param string|null $id id
========
     * @param string|null $id Unique redeemable holder identifier.
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
     * Gets source_id
========
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets redeemable_id
     *
     * @return string|null
     */
    public function getRedeemableId()
    {
        return $this->container['redeemable_id'];
    }

    /**
     * Sets redeemable_id
     *
     * @param string|null $redeemable_id Identifier of the redeemable item.
     *
     * @return self
     */
    public function setRedeemableId($redeemable_id)
    {
        if (is_null($redeemable_id)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redeemable_id'] = $redeemable_id;

        return $this;
    }

    /**
     * Gets redeemable_object
     *
     * @return string|null
     */
    public function getRedeemableObject()
    {
        return $this->container['redeemable_object'];
    }

    /**
     * Sets redeemable_object
     *
     * @param string|null $redeemable_object Type of the redeemable.
     *
     * @return self
     */
    public function setRedeemableObject($redeemable_object)
    {
        if (is_null($redeemable_object)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable_object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable_object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redeemable_object'] = $redeemable_object;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Identifier of the customer.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets holder_role
     *
     * @return string|null
     */
    public function getHolderRole()
    {
        return $this->container['holder_role'];
    }

    /**
     * Sets holder_role
     *
     * @param string|null $holder_role Role of the holder.
     *
     * @return self
     */
    public function setHolderRole($holder_role)
    {
        if (is_null($holder_role)) {
            array_push($this->openAPINullablesSetToNull, 'holder_role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holder_role', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getHolderRoleAllowableValues();
        if (!is_null($holder_role) && !in_array($holder_role, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'holder_role', must be one of '%s'",
                    $holder_role,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['holder_role'] = $holder_role;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Unique campaign identifier, assigned by Voucherify.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets campaign_type
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
     *
     * @return string|null
     */
    public function getCampaignType()
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
     * @param string|null $source_id A unique identifier of the customer who validates a voucher. It can be a customer ID or email from a CRM system, database, or a third-party service. If you also pass a customer ID (unique ID assigned by Voucherify), the source ID will be ignored.
========
     * @param string|null $campaign_type Defines the type of the campaign.
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
     *
     * @return self
     */
    public function setCampaignType($campaign_type)
    {
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;
========
        if (is_null($campaign_type)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getCampaignTypeAllowableValues();
        if (!is_null($campaign_type) && !in_array($campaign_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'campaign_type', must be one of '%s'",
                    $campaign_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['campaign_type'] = $campaign_type;
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php

        return $this;
    }

    /**
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
     * Gets summary
     *
     * @return \OpenAPI\Client\Model\CustomerSummary|null
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \OpenAPI\Client\Model\CustomerSummary|null $summary summary
     *
     * @return self
     */
    public function setSummary($summary)
    {
        if (is_null($summary)) {
            array_push($this->openAPINullablesSetToNull, 'summary');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('summary', $nullablesSetToNull);
========
     * Gets voucher_type
     *
     * @return string|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string|null $voucher_type Defines the type of the voucher.
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_type', $nullablesSetToNull);
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        $this->container['summary'] = $summary;
========
        $allowedValues = $this->getVoucherTypeAllowableValues();
        if (!is_null($voucher_type) && !in_array($voucher_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'voucher_type', must be one of '%s'",
                    $voucher_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['voucher_type'] = $voucher_type;
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php

        return $this;
    }

    /**
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
     * Gets loyalty
     *
     * @return \OpenAPI\Client\Model\CustomerLoyalty|null
     */
    public function getLoyalty()
    {
        return $this->container['loyalty'];
    }

    /**
     * Sets loyalty
     *
     * @param \OpenAPI\Client\Model\CustomerLoyalty|null $loyalty loyalty
     *
     * @return self
     */
    public function setLoyalty($loyalty)
    {
        if (is_null($loyalty)) {
            array_push($this->openAPINullablesSetToNull, 'loyalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loyalty', $nullablesSetToNull);
========
     * Gets redeemable
     *
     * @return \OpenAPI\Client\Model\CustomerRedeemableRedeemable|null
     */
    public function getRedeemable()
    {
        return $this->container['redeemable'];
    }

    /**
     * Sets redeemable
     *
     * @param \OpenAPI\Client\Model\CustomerRedeemableRedeemable|null $redeemable redeemable
     *
     * @return self
     */
    public function setRedeemable($redeemable)
    {
        if (is_null($redeemable)) {
            array_push($this->openAPINullablesSetToNull, 'redeemable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redeemable', $nullablesSetToNull);
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
<<<<<<<< Updated upstream:src/Model/OrderCalculatedReferrer.php
        $this->container['loyalty'] = $loyalty;

        return $this;
    }

    /**
     * Gets referrals
     *
     * @return \OpenAPI\Client\Model\CustomerReferrals|null
     */
    public function getReferrals()
    {
        return $this->container['referrals'];
    }

    /**
     * Sets referrals
     *
     * @param \OpenAPI\Client\Model\CustomerReferrals|null $referrals referrals
     *
     * @return self
     */
    public function setReferrals($referrals)
    {
        if (is_null($referrals)) {
            array_push($this->openAPINullablesSetToNull, 'referrals');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('referrals', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['referrals'] = $referrals;

        return $this;
    }

    /**
     * Gets system_metadata
     *
     * @return object|null
     */
    public function getSystemMetadata()
    {
        return $this->container['system_metadata'];
    }

    /**
     * Sets system_metadata
     *
     * @param object|null $system_metadata Object used to store system metadata information.
     *
     * @return self
     */
    public function setSystemMetadata($system_metadata)
    {
        if (is_null($system_metadata)) {
            throw new \InvalidArgumentException('non-nullable system_metadata cannot be null');
        }
        $this->container['system_metadata'] = $system_metadata;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp representing the date and time when the customer was created in ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Timestamp representing the date and time when the customer was updated in ISO 8601 format.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \OpenAPI\Client\Model\CustomerResponseDataAssets|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \OpenAPI\Client\Model\CustomerResponseDataAssets|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object The type of object represented by JSON.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Customer's first and last name.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description An arbitrary string that you can attach to a customer object.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Customer's email address.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Customer's phone number. This parameter is mandatory when you try to send out codes to customers via an SMS channel.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday *Deprecated* Customer's birthdate; format YYYY-MM-DD.
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \DateTime|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \DateTime|null $birthdate Customer's birthdate; format YYYY-MM-DD.
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\OrderCalculatedCustomerAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\OrderCalculatedCustomerAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;
========
        $this->container['redeemable'] = $redeemable;
>>>>>>>> Stashed changes:src/Model/CustomerRedeemable.php

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


