<?php
/**
 * LoyaltiesEarningRulesUpdateResponseBody
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LoyaltiesEarningRulesUpdateResponseBody Class Doc Comment
 *
 * @category Class
 * @description Response body schema for **PUT** &#x60;v1/loyalties/{campaignId}/earning-rules/{earningRuleId}&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class LoyaltiesEarningRulesUpdateResponseBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoyaltiesEarningRulesUpdateResponseBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'created_at' => '\DateTime',
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        'updated_at' => '\DateTime',
        'name' => 'string',
        'banner' => 'string',
        'action' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierAction',
        'metadata' => 'object',
        'hierarchy' => 'int',
        'promotion_id' => 'string',
        'campaign' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierCampaign',
        'campaign_id' => 'string',
        'active' => 'bool',
        'start_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'validity_timeframe' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierValidityTimeframe',
        'validity_day_of_week' => 'int[]',
        'summary' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierSummary',
        'object' => 'string',
        'validation_rule_assignments' => '\OpenAPI\Client\Model\ValidationRuleAssignmentsList',
        'category_id' => 'string',
        'categories' => '\OpenAPI\Client\Model\Category[]'
=======
        'loyalty' => '\OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyLoyalty',
        'event' => 'string',
        'custom_event' => '\OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyCustomEvent',
        'segment' => '\OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodySegment',
        'loyalty_tier' => '\OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyLoyaltyTier',
        'source' => '\OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodySource',
        'object' => 'string',
        'automation_id' => 'string',
        'start_date' => 'string',
        'expiration_date' => 'string',
        'validity_timeframe' => '\OpenAPI\Client\Model\ValidityTimeframe',
        'validity_day_of_week' => 'int[]',
        'validity_hours' => '\OpenAPI\Client\Model\ValidityHours',
        'metadata' => 'object',
        'validation_rule_id' => 'string',
        'updated_at' => '\DateTime',
        'active' => 'bool'
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'created_at' => 'date-time',
        'loyalty' => null,
        'event' => null,
        'custom_event' => null,
        'segment' => null,
        'loyalty_tier' => null,
        'source' => null,
        'object' => null,
        'automation_id' => null,
        'start_date' => null,
        'expiration_date' => null,
        'validity_timeframe' => null,
        'validity_day_of_week' => null,
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        'summary' => null,
        'object' => null,
        'validation_rule_assignments' => null,
        'category_id' => null,
        'categories' => null
=======
        'validity_hours' => null,
        'metadata' => null,
        'validation_rule_id' => null,
        'updated_at' => 'date-time',
        'active' => null
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        'id' => false,
		'created_at' => false,
		'updated_at' => false,
		'name' => false,
		'banner' => false,
		'action' => false,
		'metadata' => false,
		'hierarchy' => false,
		'promotion_id' => false,
		'campaign' => false,
		'campaign_id' => false,
		'active' => false,
		'start_date' => false,
		'expiration_date' => false,
		'validity_timeframe' => false,
		'validity_day_of_week' => false,
		'summary' => false,
		'object' => false,
		'validation_rule_assignments' => false,
		'category_id' => false,
		'categories' => false
=======
        'id' => true,
		'created_at' => true,
		'loyalty' => true,
		'event' => true,
		'custom_event' => true,
		'segment' => true,
		'loyalty_tier' => true,
		'source' => true,
		'object' => true,
		'automation_id' => true,
		'start_date' => true,
		'expiration_date' => true,
		'validity_timeframe' => false,
		'validity_day_of_week' => true,
		'validity_hours' => false,
		'metadata' => true,
		'validation_rule_id' => true,
		'updated_at' => true,
		'active' => true
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'created_at' => 'created_at',
        'loyalty' => 'loyalty',
        'event' => 'event',
        'custom_event' => 'custom_event',
        'segment' => 'segment',
        'loyalty_tier' => 'loyalty_tier',
        'source' => 'source',
        'object' => 'object',
        'automation_id' => 'automation_id',
        'start_date' => 'start_date',
        'expiration_date' => 'expiration_date',
        'validity_timeframe' => 'validity_timeframe',
        'validity_day_of_week' => 'validity_day_of_week',
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        'summary' => 'summary',
        'object' => 'object',
        'validation_rule_assignments' => 'validation_rule_assignments',
        'category_id' => 'category_id',
        'categories' => 'categories'
=======
        'validity_hours' => 'validity_hours',
        'metadata' => 'metadata',
        'validation_rule_id' => 'validation_rule_id',
        'updated_at' => 'updated_at',
        'active' => 'active'
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'created_at' => 'setCreatedAt',
        'loyalty' => 'setLoyalty',
        'event' => 'setEvent',
        'custom_event' => 'setCustomEvent',
        'segment' => 'setSegment',
        'loyalty_tier' => 'setLoyaltyTier',
        'source' => 'setSource',
        'object' => 'setObject',
        'automation_id' => 'setAutomationId',
        'start_date' => 'setStartDate',
        'expiration_date' => 'setExpirationDate',
        'validity_timeframe' => 'setValidityTimeframe',
        'validity_day_of_week' => 'setValidityDayOfWeek',
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        'summary' => 'setSummary',
        'object' => 'setObject',
        'validation_rule_assignments' => 'setValidationRuleAssignments',
        'category_id' => 'setCategoryId',
        'categories' => 'setCategories'
=======
        'validity_hours' => 'setValidityHours',
        'metadata' => 'setMetadata',
        'validation_rule_id' => 'setValidationRuleId',
        'updated_at' => 'setUpdatedAt',
        'active' => 'setActive'
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'created_at' => 'getCreatedAt',
        'loyalty' => 'getLoyalty',
        'event' => 'getEvent',
        'custom_event' => 'getCustomEvent',
        'segment' => 'getSegment',
        'loyalty_tier' => 'getLoyaltyTier',
        'source' => 'getSource',
        'object' => 'getObject',
        'automation_id' => 'getAutomationId',
        'start_date' => 'getStartDate',
        'expiration_date' => 'getExpirationDate',
        'validity_timeframe' => 'getValidityTimeframe',
        'validity_day_of_week' => 'getValidityDayOfWeek',
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        'summary' => 'getSummary',
        'object' => 'getObject',
        'validation_rule_assignments' => 'getValidationRuleAssignments',
        'category_id' => 'getCategoryId',
        'categories' => 'getCategories'
=======
        'validity_hours' => 'getValidityHours',
        'metadata' => 'getMetadata',
        'validation_rule_id' => 'getValidationRuleId',
        'updated_at' => 'getUpdatedAt',
        'active' => 'getActive'
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
=======
    public const OBJECT_EARNING_RULE = 'earning_rule';
    public const VALIDITY_DAY_OF_WEEK_0 = 0;
    public const VALIDITY_DAY_OF_WEEK_1 = 1;
    public const VALIDITY_DAY_OF_WEEK_2 = 2;
    public const VALIDITY_DAY_OF_WEEK_3 = 3;
    public const VALIDITY_DAY_OF_WEEK_4 = 4;
    public const VALIDITY_DAY_OF_WEEK_5 = 5;
    public const VALIDITY_DAY_OF_WEEK_6 = 6;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObjectAllowableValues()
    {
        return [
            self::OBJECT_EARNING_RULE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidityDayOfWeekAllowableValues()
    {
        return [
            self::VALIDITY_DAY_OF_WEEK_0,
            self::VALIDITY_DAY_OF_WEEK_1,
            self::VALIDITY_DAY_OF_WEEK_2,
            self::VALIDITY_DAY_OF_WEEK_3,
            self::VALIDITY_DAY_OF_WEEK_4,
            self::VALIDITY_DAY_OF_WEEK_5,
            self::VALIDITY_DAY_OF_WEEK_6,
        ];
    }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('loyalty', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('custom_event', $data ?? [], null);
        $this->setIfExists('segment', $data ?? [], null);
        $this->setIfExists('loyalty_tier', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'earning_rule');
        $this->setIfExists('automation_id', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('validity_timeframe', $data ?? [], null);
        $this->setIfExists('validity_day_of_week', $data ?? [], null);
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        $this->setIfExists('summary', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'promotion_tier');
        $this->setIfExists('validation_rule_assignments', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
=======
        $this->setIfExists('validity_hours', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('validation_rule_id', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($this->container['object']) && !in_array($this->container['object'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'object', must be one of '%s'",
                $this->container['object'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Assigned by the Voucherify API, identifies the earning rule object.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
     * @param \DateTime|null $created_at Timestamp representing the date and time when the promotion tier was created in ISO 8601 format.
=======
     * @param \DateTime|null $created_at Timestamp representing the date and time when the earning rule was created. The value is shown in the ISO 8601 format.
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets loyalty
     *
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyLoyalty|null
     */
    public function getLoyalty()
    {
        return $this->container['loyalty'];
    }

    /**
     * Sets loyalty
     *
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
     * @param \DateTime|null $updated_at Timestamp representing the date and time when the promotion tier was updated in ISO 8601 format.
=======
     * @param \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyLoyalty|null $loyalty loyalty
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
     *
     * @return self
     */
    public function setLoyalty($loyalty)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
=======
        if (is_null($loyalty)) {
            array_push($this->openAPINullablesSetToNull, 'loyalty');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loyalty', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['loyalty'] = $loyalty;

        return $this;
    }

    /**
     * Gets event
     *
     * @return string|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param string|null $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
=======
        if (is_null($event)) {
            array_push($this->openAPINullablesSetToNull, 'event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets custom_event
     *
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyCustomEvent|null
     */
    public function getCustomEvent()
    {
        return $this->container['custom_event'];
    }

    /**
     * Sets custom_event
     *
     * @param \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyCustomEvent|null $custom_event custom_event
     *
     * @return self
     */
    public function setCustomEvent($custom_event)
    {
        if (is_null($custom_event)) {
            array_push($this->openAPINullablesSetToNull, 'custom_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_event'] = $custom_event;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodySegment|null
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodySegment|null $segment segment
     *
     * @return self
     */
    public function setSegment($segment)
    {
        if (is_null($segment)) {
            array_push($this->openAPINullablesSetToNull, 'segment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets loyalty_tier
     *
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyLoyaltyTier|null
     */
    public function getLoyaltyTier()
    {
        return $this->container['loyalty_tier'];
    }

    /**
     * Sets loyalty_tier
     *
     * @param \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodyLoyaltyTier|null $loyalty_tier loyalty_tier
     *
     * @return self
     */
    public function setLoyaltyTier($loyalty_tier)
    {
        if (is_null($loyalty_tier)) {
            array_push($this->openAPINullablesSetToNull, 'loyalty_tier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loyalty_tier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loyalty_tier'] = $loyalty_tier;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodySource|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \OpenAPI\Client\Model\LoyaltiesEarningRulesUpdateResponseBodySource|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            array_push($this->openAPINullablesSetToNull, 'source');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object The type of the object represented by JSON. Default is earning_rule.
     *
     * @return self
     */
    public function setObject($object)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($banner)) {
            throw new \InvalidArgumentException('non-nullable banner cannot be null');
        }
        $this->container['banner'] = $banner;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierAction|null
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierAction|null $action action
     *
     * @return self
     */
    public function setAction($action)
    {
        if (is_null($action)) {
            throw new \InvalidArgumentException('non-nullable action cannot be null');
=======
        if (is_null($object)) {
            array_push($this->openAPINullablesSetToNull, 'object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getObjectAllowableValues();
        if (!is_null($object) && !in_array($object, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'object', must be one of '%s'",
                    $object,
                    implode("', '", $allowedValues)
                )
            );
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets hierarchy
     *
     * @return int|null
     */
    public function getHierarchy()
    {
        return $this->container['hierarchy'];
    }

    /**
     * Sets hierarchy
     *
     * @param int|null $hierarchy The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy.
     *
     * @return self
     */
    public function setHierarchy($hierarchy)
    {
        if (is_null($hierarchy)) {
            throw new \InvalidArgumentException('non-nullable hierarchy cannot be null');
        }
        $this->container['hierarchy'] = $hierarchy;

        return $this;
    }

    /**
     * Gets promotion_id
=======
     * Gets automation_id
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
     *
     * @return string|null
     */
    public function getAutomationId()
    {
        return $this->container['automation_id'];
    }

    /**
     * Sets automation_id
     *
     * @param string|null $automation_id For internal use by Voucherify.
     *
     * @return self
     */
    public function setAutomationId($automation_id)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($promotion_id)) {
            throw new \InvalidArgumentException('non-nullable promotion_id cannot be null');
        }
        $this->container['promotion_id'] = $promotion_id;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierCampaign|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierCampaign|null $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Promotion tier's parent campaign's unique ID.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the `start_date` and `expiration_date`.    - `true` indicates an *active* promotion tier - `false` indicates an *inactive* promotion tier
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;
=======
        if (is_null($automation_id)) {
            array_push($this->openAPINullablesSetToNull, 'automation_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('automation_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['automation_id'] = $automation_id;
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date Start date defines when the earning rule starts to be active. Activation timestamp is presented in the ISO 8601 format. The earning rule is inactive before this date. If you do not define the start date for an earning rule, it will inherit the campaign start date by default.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string|null $expiration_date Expiration date defines when the earning rule expires. Expiration timestamp is presented in the ISO 8601 format. The earning rule is inactive after this date. If you do not define the expiration date for an earning rule, it will inherit the campaign expiration date by default.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets validity_timeframe
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierValidityTimeframe|null
     */
    public function getValidityTimeframe()
    {
        return $this->container['validity_timeframe'];
    }

    /**
     * Sets validity_timeframe
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTierValidityTimeframe|null $validity_timeframe validity_timeframe
     *
     * @return self
     */
    public function setValidityTimeframe($validity_timeframe)
    {
        if (is_null($validity_timeframe)) {
            throw new \InvalidArgumentException('non-nullable validity_timeframe cannot be null');
        }
        $this->container['validity_timeframe'] = $validity_timeframe;

        return $this;
    }

    /**
     * Gets validity_day_of_week
     *
     * @return int[]|null
     */
    public function getValidityDayOfWeek()
    {
        return $this->container['validity_day_of_week'];
    }

    /**
     * Sets validity_day_of_week
     *
     * @param int[]|null $validity_day_of_week Integer array corresponding to the particular days of the week in which the promotion tier is valid.  - `0`  Sunday   - `1`  Monday   - `2`  Tuesday   - `3`  Wednesday   - `4`  Thursday   - `5`  Friday   - `6`  Saturday
     *
     * @return self
     */
    public function setValidityDayOfWeek($validity_day_of_week)
    {
        if (is_null($validity_day_of_week)) {
            throw new \InvalidArgumentException('non-nullable validity_day_of_week cannot be null');
        }
        $this->container['validity_day_of_week'] = $validity_day_of_week;

        return $this;
    }

    /**
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
     * Gets summary
=======
     * Gets validity_hours
     *
     * @return \OpenAPI\Client\Model\ValidityHours|null
     */
    public function getValidityHours()
    {
        return $this->container['validity_hours'];
    }

    /**
     * Sets validity_hours
     *
     * @param \OpenAPI\Client\Model\ValidityHours|null $validity_hours validity_hours
     *
     * @return self
     */
    public function setValidityHours($validity_hours)
    {
        if (is_null($validity_hours)) {
            throw new \InvalidArgumentException('non-nullable validity_hours cannot be null');
        }
        $this->container['validity_hours'] = $validity_hours;

        return $this;
    }

    /**
     * Gets metadata
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata The metadata object stores all custom attributes assigned to the earning rule. A set of key/value pairs that you can attach to an earning rule object. It can be useful for storing additional information about the earning rule in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($summary)) {
            throw new \InvalidArgumentException('non-nullable summary cannot be null');
=======
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets validation_rule_id
     *
     * @return string|null
     */
    public function getValidationRuleId()
    {
        return $this->container['validation_rule_id'];
    }

    /**
     * Sets validation_rule_id
     *
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
     * @param string|null $object The type of object represented by JSON. This object stores information about the promotion tier.
=======
     * @param string|null $validation_rule_id A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
     *
     * @return self
     */
    public function setValidationRuleId($validation_rule_id)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
=======
        if (is_null($validation_rule_id)) {
            array_push($this->openAPINullablesSetToNull, 'validation_rule_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('validation_rule_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['validation_rule_id'] = $validation_rule_id;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($validation_rule_assignments)) {
            throw new \InvalidArgumentException('non-nullable validation_rule_assignments cannot be null');
        }
        $this->container['validation_rule_assignments'] = $validation_rule_assignments;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id Promotion tier category ID.
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
=======
        if (is_null($updated_at)) {
            array_push($this->openAPINullablesSetToNull, 'updated_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('updated_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the start_date and expiration_date of the campaign or the earning rule's own start_date and expiration_date.  - `true` indicates an active earning rule - `false` indicates an inactive earning rule
     *
     * @return self
     */
    public function setActive($active)
    {
<<<<<<< Updated upstream:src/Model/CustomerActivityDataRedemptionPromotionTier.php
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
=======
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
>>>>>>> Stashed changes:src/Model/LoyaltiesEarningRulesUpdateResponseBody.php
        }
        $this->container['active'] = $active;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


