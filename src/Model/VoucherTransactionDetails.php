<?php
/**
 * VoucherTransactionDetails
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * VoucherTransactionDetails Class Doc Comment
 *
 * @description Contains the detailed information about the transaction.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class VoucherTransactionDetails implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'VoucherTransaction_details';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'balance' => '\OpenAPI\Client\Model\VoucherTransactionDetailsBalance',
        'order' => '\OpenAPI\Client\Model\VoucherTransactionDetailsOrder',
        'event' => '\OpenAPI\Client\Model\VoucherTransactionDetailsEvent',
        'earning_rule' => '\OpenAPI\Client\Model\VoucherTransactionDetailsEarningRule',
        'segment' => '\OpenAPI\Client\Model\VoucherTransactionDetailsSegment',
        'loyalty_tier' => '\OpenAPI\Client\Model\VoucherTransactionDetailsLoyaltyTier',
        'redemption' => '\OpenAPI\Client\Model\VoucherTransactionDetailsRedemption',
        'rollback' => '\OpenAPI\Client\Model\VoucherTransactionDetailsRollback',
        'custom_event' => '\OpenAPI\Client\Model\VoucherTransactionDetailsCustomEvent',
        'event_schema' => '\OpenAPI\Client\Model\VoucherTransactionDetailsEventSchema',
        'reward' => '\OpenAPI\Client\Model\VoucherTransactionDetailsReward',
        'source_voucher' => '\OpenAPI\Client\Model\SimpleVoucher',
        'destination_voucher' => '\OpenAPI\Client\Model\SimpleVoucher'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'balance' => null,
        'order' => null,
        'event' => null,
        'earning_rule' => null,
        'segment' => null,
        'loyalty_tier' => null,
        'redemption' => null,
        'rollback' => null,
        'custom_event' => null,
        'event_schema' => null,
        'reward' => null,
        'source_voucher' => null,
        'destination_voucher' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'balance' => true,
        'order' => true,
        'event' => true,
        'earning_rule' => true,
        'segment' => true,
        'loyalty_tier' => true,
        'redemption' => true,
        'rollback' => true,
        'custom_event' => true,
        'event_schema' => true,
        'reward' => true,
        'source_voucher' => true,
        'destination_voucher' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'balance' => 'balance',
        'order' => 'order',
        'event' => 'event',
        'earning_rule' => 'earning_rule',
        'segment' => 'segment',
        'loyalty_tier' => 'loyalty_tier',
        'redemption' => 'redemption',
        'rollback' => 'rollback',
        'custom_event' => 'custom_event',
        'event_schema' => 'event_schema',
        'reward' => 'reward',
        'source_voucher' => 'source_voucher',
        'destination_voucher' => 'destination_voucher'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'balance' => 'setBalance',
        'order' => 'setOrder',
        'event' => 'setEvent',
        'earning_rule' => 'setEarningRule',
        'segment' => 'setSegment',
        'loyalty_tier' => 'setLoyaltyTier',
        'redemption' => 'setRedemption',
        'rollback' => 'setRollback',
        'custom_event' => 'setCustomEvent',
        'event_schema' => 'setEventSchema',
        'reward' => 'setReward',
        'source_voucher' => 'setSourceVoucher',
        'destination_voucher' => 'setDestinationVoucher'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'balance' => 'getBalance',
        'order' => 'getOrder',
        'event' => 'getEvent',
        'earning_rule' => 'getEarningRule',
        'segment' => 'getSegment',
        'loyalty_tier' => 'getLoyaltyTier',
        'redemption' => 'getRedemption',
        'rollback' => 'getRollback',
        'custom_event' => 'getCustomEvent',
        'event_schema' => 'getEventSchema',
        'reward' => 'getReward',
        'source_voucher' => 'getSourceVoucher',
        'destination_voucher' => 'getDestinationVoucher'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('earning_rule', $data ?? [], null);
        $this->setIfExists('segment', $data ?? [], null);
        $this->setIfExists('loyalty_tier', $data ?? [], null);
        $this->setIfExists('redemption', $data ?? [], null);
        $this->setIfExists('rollback', $data ?? [], null);
        $this->setIfExists('custom_event', $data ?? [], null);
        $this->setIfExists('event_schema', $data ?? [], null);
        $this->setIfExists('reward', $data ?? [], null);
        $this->setIfExists('source_voucher', $data ?? [], null);
        $this->setIfExists('destination_voucher', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsBalance|null
     */
    public function getBalance(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsBalance
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsBalance|null $balance balance
     *
     * @return $this
     */
    public function setBalance(?\OpenAPI\Client\Model\VoucherTransactionDetailsBalance $balance): static
    {
        if (is_null($balance)) {
            array_push($this->openAPINullablesSetToNull, 'balance');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('balance', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsOrder|null
     */
    public function getOrder(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsOrder
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsOrder|null $order order
     *
     * @return $this
     */
    public function setOrder(?\OpenAPI\Client\Model\VoucherTransactionDetailsOrder $order): static
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets event
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsEvent|null
     */
    public function getEvent(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsEvent
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsEvent|null $event event
     *
     * @return $this
     */
    public function setEvent(?\OpenAPI\Client\Model\VoucherTransactionDetailsEvent $event): static
    {
        if (is_null($event)) {
            array_push($this->openAPINullablesSetToNull, 'event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets earning_rule
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsEarningRule|null
     */
    public function getEarningRule(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsEarningRule
    {
        return $this->container['earning_rule'];
    }

    /**
     * Sets earning_rule
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsEarningRule|null $earning_rule earning_rule
     *
     * @return $this
     */
    public function setEarningRule(?\OpenAPI\Client\Model\VoucherTransactionDetailsEarningRule $earning_rule): static
    {
        if (is_null($earning_rule)) {
            array_push($this->openAPINullablesSetToNull, 'earning_rule');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('earning_rule', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['earning_rule'] = $earning_rule;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsSegment|null
     */
    public function getSegment(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsSegment
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsSegment|null $segment segment
     *
     * @return $this
     */
    public function setSegment(?\OpenAPI\Client\Model\VoucherTransactionDetailsSegment $segment): static
    {
        if (is_null($segment)) {
            array_push($this->openAPINullablesSetToNull, 'segment');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('segment', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets loyalty_tier
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsLoyaltyTier|null
     */
    public function getLoyaltyTier(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsLoyaltyTier
    {
        return $this->container['loyalty_tier'];
    }

    /**
     * Sets loyalty_tier
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsLoyaltyTier|null $loyalty_tier loyalty_tier
     *
     * @return $this
     */
    public function setLoyaltyTier(?\OpenAPI\Client\Model\VoucherTransactionDetailsLoyaltyTier $loyalty_tier): static
    {
        if (is_null($loyalty_tier)) {
            array_push($this->openAPINullablesSetToNull, 'loyalty_tier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('loyalty_tier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['loyalty_tier'] = $loyalty_tier;

        return $this;
    }

    /**
     * Gets redemption
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsRedemption|null
     */
    public function getRedemption(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsRedemption
    {
        return $this->container['redemption'];
    }

    /**
     * Sets redemption
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsRedemption|null $redemption redemption
     *
     * @return $this
     */
    public function setRedemption(?\OpenAPI\Client\Model\VoucherTransactionDetailsRedemption $redemption): static
    {
        if (is_null($redemption)) {
            array_push($this->openAPINullablesSetToNull, 'redemption');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redemption', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redemption'] = $redemption;

        return $this;
    }

    /**
     * Gets rollback
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsRollback|null
     */
    public function getRollback(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsRollback
    {
        return $this->container['rollback'];
    }

    /**
     * Sets rollback
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsRollback|null $rollback rollback
     *
     * @return $this
     */
    public function setRollback(?\OpenAPI\Client\Model\VoucherTransactionDetailsRollback $rollback): static
    {
        if (is_null($rollback)) {
            array_push($this->openAPINullablesSetToNull, 'rollback');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('rollback', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['rollback'] = $rollback;

        return $this;
    }

    /**
     * Gets custom_event
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsCustomEvent|null
     */
    public function getCustomEvent(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsCustomEvent
    {
        return $this->container['custom_event'];
    }

    /**
     * Sets custom_event
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsCustomEvent|null $custom_event custom_event
     *
     * @return $this
     */
    public function setCustomEvent(?\OpenAPI\Client\Model\VoucherTransactionDetailsCustomEvent $custom_event): static
    {
        if (is_null($custom_event)) {
            array_push($this->openAPINullablesSetToNull, 'custom_event');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('custom_event', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['custom_event'] = $custom_event;

        return $this;
    }

    /**
     * Gets event_schema
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsEventSchema|null
     */
    public function getEventSchema(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsEventSchema
    {
        return $this->container['event_schema'];
    }

    /**
     * Sets event_schema
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsEventSchema|null $event_schema event_schema
     *
     * @return $this
     */
    public function setEventSchema(?\OpenAPI\Client\Model\VoucherTransactionDetailsEventSchema $event_schema): static
    {
        if (is_null($event_schema)) {
            array_push($this->openAPINullablesSetToNull, 'event_schema');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('event_schema', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['event_schema'] = $event_schema;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return \OpenAPI\Client\Model\VoucherTransactionDetailsReward|null
     */
    public function getReward(): ?\OpenAPI\Client\Model\VoucherTransactionDetailsReward
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param \OpenAPI\Client\Model\VoucherTransactionDetailsReward|null $reward reward
     *
     * @return $this
     */
    public function setReward(?\OpenAPI\Client\Model\VoucherTransactionDetailsReward $reward): static
    {
        if (is_null($reward)) {
            array_push($this->openAPINullablesSetToNull, 'reward');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets source_voucher
     *
     * @return \OpenAPI\Client\Model\SimpleVoucher|null
     */
    public function getSourceVoucher(): ?\OpenAPI\Client\Model\SimpleVoucher
    {
        return $this->container['source_voucher'];
    }

    /**
     * Sets source_voucher
     *
     * @param \OpenAPI\Client\Model\SimpleVoucher|null $source_voucher Contains information on how the balance on the donor loyalty card was affected by the transaction.
     *
     * @return $this
     */
    public function setSourceVoucher(?\OpenAPI\Client\Model\SimpleVoucher $source_voucher): static
    {
        if (is_null($source_voucher)) {
            array_push($this->openAPINullablesSetToNull, 'source_voucher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('source_voucher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['source_voucher'] = $source_voucher;

        return $this;
    }

    /**
     * Gets destination_voucher
     *
     * @return \OpenAPI\Client\Model\SimpleVoucher|null
     */
    public function getDestinationVoucher(): ?\OpenAPI\Client\Model\SimpleVoucher
    {
        return $this->container['destination_voucher'];
    }

    /**
     * Sets destination_voucher
     *
     * @param \OpenAPI\Client\Model\SimpleVoucher|null $destination_voucher Contains information on how the balance on the receiving loyalty card was affected by the transaction.
     *
     * @return $this
     */
    public function setDestinationVoucher(?\OpenAPI\Client\Model\SimpleVoucher $destination_voucher): static
    {
        if (is_null($destination_voucher)) {
            array_push($this->openAPINullablesSetToNull, 'destination_voucher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('destination_voucher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['destination_voucher'] = $destination_voucher;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


