<?php
/**
 * QualificationsOptionFilters
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * QualificationsOptionFilters Class Doc Comment
 *
 * @description A set of filters to return only a specific category or type of redeemable.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class QualificationsOptionFilters implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'QualificationsOption_filters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'junction' => 'string',
        'category_id' => '\OpenAPI\Client\Model\QualificationsFieldConditions',
        'campaign_id' => '\OpenAPI\Client\Model\QualificationsFieldConditions',
        'campaign_type' => '\OpenAPI\Client\Model\QualificationsCampaignTypeConditions',
        'resource_id' => '\OpenAPI\Client\Model\QualificationsFieldConditions',
        'resource_type' => '\OpenAPI\Client\Model\QualificationsOptionFiltersResourceType',
        'voucher_type' => '\OpenAPI\Client\Model\QualificationsFieldConditions',
        'code' => '\OpenAPI\Client\Model\QualificationsFieldConditions',
        'holder_role' => '\OpenAPI\Client\Model\HolderRole'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'junction' => null,
        'category_id' => null,
        'campaign_id' => null,
        'campaign_type' => null,
        'resource_id' => null,
        'resource_type' => null,
        'voucher_type' => null,
        'code' => null,
        'holder_role' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'junction' => true,
        'category_id' => true,
        'campaign_id' => true,
        'campaign_type' => true,
        'resource_id' => true,
        'resource_type' => true,
        'voucher_type' => true,
        'code' => true,
        'holder_role' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'junction' => 'junction',
        'category_id' => 'category_id',
        'campaign_id' => 'campaign_id',
        'campaign_type' => 'campaign_type',
        'resource_id' => 'resource_id',
        'resource_type' => 'resource_type',
        'voucher_type' => 'voucher_type',
        'code' => 'code',
        'holder_role' => 'holder_role'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'junction' => 'setJunction',
        'category_id' => 'setCategoryId',
        'campaign_id' => 'setCampaignId',
        'campaign_type' => 'setCampaignType',
        'resource_id' => 'setResourceId',
        'resource_type' => 'setResourceType',
        'voucher_type' => 'setVoucherType',
        'code' => 'setCode',
        'holder_role' => 'setHolderRole'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'junction' => 'getJunction',
        'category_id' => 'getCategoryId',
        'campaign_id' => 'getCampaignId',
        'campaign_type' => 'getCampaignType',
        'resource_id' => 'getResourceId',
        'resource_type' => 'getResourceType',
        'voucher_type' => 'getVoucherType',
        'code' => 'getCode',
        'holder_role' => 'getHolderRole'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const JUNCTION__AND = 'and';
    public const JUNCTION__OR = 'or';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJunctionAllowableValues()
    {
        return [
            self::JUNCTION__AND,
            self::JUNCTION__OR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('junction', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('campaign_type', $data ?? [], null);
        $this->setIfExists('resource_id', $data ?? [], null);
        $this->setIfExists('resource_type', $data ?? [], null);
        $this->setIfExists('voucher_type', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('holder_role', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($this->container['junction']) && !in_array($this->container['junction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'junction', must be one of '%s'",
                $this->container['junction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets junction
     *
     * @return string|null
     */
    public function getJunction(): ?string
    {
        return $this->container['junction'];
    }

    /**
     * Sets junction
     *
     * @param string|null $junction Logical Operator Between Filters. Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `AND` is an all-inclusive logical operator, meaning the `AND` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `OR` operator displays a record if **ANY** of the conditions separated by OR is TRUE.
     *
     * @return $this
     */
    public function setJunction(?string $junction): static
    {
        if (is_null($junction)) {
            array_push($this->openAPINullablesSetToNull, 'junction');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('junction', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($junction) && !in_array($junction, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'junction', must be one of '%s'",
                    $junction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['junction'] = $junction;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return \OpenAPI\Client\Model\QualificationsFieldConditions|null
     */
    public function getCategoryId(): ?\OpenAPI\Client\Model\QualificationsFieldConditions
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param \OpenAPI\Client\Model\QualificationsFieldConditions|null $category_id category_id
     *
     * @return $this
     */
    public function setCategoryId(?\OpenAPI\Client\Model\QualificationsFieldConditions $category_id): static
    {
        if (is_null($category_id)) {
            array_push($this->openAPINullablesSetToNull, 'category_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('category_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return \OpenAPI\Client\Model\QualificationsFieldConditions|null
     */
    public function getCampaignId(): ?\OpenAPI\Client\Model\QualificationsFieldConditions
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param \OpenAPI\Client\Model\QualificationsFieldConditions|null $campaign_id campaign_id
     *
     * @return $this
     */
    public function setCampaignId(?\OpenAPI\Client\Model\QualificationsFieldConditions $campaign_id): static
    {
        if (is_null($campaign_id)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets campaign_type
     *
     * @return \OpenAPI\Client\Model\QualificationsCampaignTypeConditions|null
     */
    public function getCampaignType(): ?\OpenAPI\Client\Model\QualificationsCampaignTypeConditions
    {
        return $this->container['campaign_type'];
    }

    /**
     * Sets campaign_type
     *
     * @param \OpenAPI\Client\Model\QualificationsCampaignTypeConditions|null $campaign_type campaign_type
     *
     * @return $this
     */
    public function setCampaignType(?\OpenAPI\Client\Model\QualificationsCampaignTypeConditions $campaign_type): static
    {
        if (is_null($campaign_type)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_type'] = $campaign_type;

        return $this;
    }

    /**
     * Gets resource_id
     *
     * @return \OpenAPI\Client\Model\QualificationsFieldConditions|null
     */
    public function getResourceId(): ?\OpenAPI\Client\Model\QualificationsFieldConditions
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param \OpenAPI\Client\Model\QualificationsFieldConditions|null $resource_id resource_id
     *
     * @return $this
     */
    public function setResourceId(?\OpenAPI\Client\Model\QualificationsFieldConditions $resource_id): static
    {
        if (is_null($resource_id)) {
            array_push($this->openAPINullablesSetToNull, 'resource_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resource_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets resource_type
     *
     * @return \OpenAPI\Client\Model\QualificationsOptionFiltersResourceType|null
     */
    public function getResourceType(): ?\OpenAPI\Client\Model\QualificationsOptionFiltersResourceType
    {
        return $this->container['resource_type'];
    }

    /**
     * Sets resource_type
     *
     * @param \OpenAPI\Client\Model\QualificationsOptionFiltersResourceType|null $resource_type resource_type
     *
     * @return $this
     */
    public function setResourceType(?\OpenAPI\Client\Model\QualificationsOptionFiltersResourceType $resource_type): static
    {
        if (is_null($resource_type)) {
            array_push($this->openAPINullablesSetToNull, 'resource_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('resource_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['resource_type'] = $resource_type;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return \OpenAPI\Client\Model\QualificationsFieldConditions|null
     */
    public function getVoucherType(): ?\OpenAPI\Client\Model\QualificationsFieldConditions
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param \OpenAPI\Client\Model\QualificationsFieldConditions|null $voucher_type voucher_type
     *
     * @return $this
     */
    public function setVoucherType(?\OpenAPI\Client\Model\QualificationsFieldConditions $voucher_type): static
    {
        if (is_null($voucher_type)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets code
     *
     * @return \OpenAPI\Client\Model\QualificationsFieldConditions|null
     */
    public function getCode(): ?\OpenAPI\Client\Model\QualificationsFieldConditions
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param \OpenAPI\Client\Model\QualificationsFieldConditions|null $code code
     *
     * @return $this
     */
    public function setCode(?\OpenAPI\Client\Model\QualificationsFieldConditions $code): static
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets holder_role
     *
     * @return \OpenAPI\Client\Model\HolderRole|null
     */
    public function getHolderRole(): ?\OpenAPI\Client\Model\HolderRole
    {
        return $this->container['holder_role'];
    }

    /**
     * Sets holder_role
     *
     * @param \OpenAPI\Client\Model\HolderRole|null $holder_role holder_role
     *
     * @return $this
     */
    public function setHolderRole(?\OpenAPI\Client\Model\HolderRole $holder_role): static
    {
        if (is_null($holder_role)) {
            array_push($this->openAPINullablesSetToNull, 'holder_role');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('holder_role', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['holder_role'] = $holder_role;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


