<?php
/**
 * CustomerActivity
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * CustomerActivity Class Doc Comment
 *
 * @description This is an object representing customer activity.    This is a general object which presents moments from customers&#39; activity. There are all types of different events that customers perform during their journey once they participate in Promotions. Events describe moments when customers redeem coupons and earn points or rewards. The list of all types of activities is listed below.  The details describing the activity are collected in a property named &#x60;data&#x60;. In this object, software integrators will find all further information explaining the event context.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class CustomerActivity implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'CustomerActivity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'type' => 'string',
        'data' => '\OpenAPI\Client\Model\CustomerActivityData',
        'created_at' => '\DateTime',
        'group_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'type' => null,
        'data' => null,
        'created_at' => 'date-time',
        'group_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => true,
        'type' => true,
        'data' => true,
        'created_at' => true,
        'group_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'type' => 'type',
        'data' => 'data',
        'created_at' => 'created_at',
        'group_id' => 'group_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'type' => 'setType',
        'data' => 'setData',
        'created_at' => 'setCreatedAt',
        'group_id' => 'setGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'type' => 'getType',
        'data' => 'getData',
        'created_at' => 'getCreatedAt',
        'group_id' => 'getGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const TYPE_CONFIRMED = 'customer.confirmed';
    public const TYPE_CREATED = 'customer.created';
    public const TYPE_UPDATED = 'customer.updated';
    public const TYPE_DELETED = 'customer.deleted';
    public const TYPE_REFERRED = 'customer.referred';
    public const TYPE_CUSTOM_EVENT = 'customer.custom_event';
    public const TYPE_SEGMENT_ENTERED = 'customer.segment.entered';
    public const TYPE_SEGMENT_LEFT = 'customer.segment.left';
    public const TYPE_SMS_SENT = 'customer.sms.sent';
    public const TYPE_SMS_RECOVERED = 'customer.sms.recovered';
    public const TYPE_SMS_FAILED = 'customer.sms.failed';
    public const TYPE_EMAIL_SENT = 'customer.email.sent';
    public const TYPE_EMAIL_RECOVERED = 'customer.email.recovered';
    public const TYPE_EMAIL_FAILED = 'customer.email.failed';
    public const TYPE_ACTIVECAMPAIGN_SENT = 'customer.activecampaign.sent';
    public const TYPE_ACTIVECAMPAIGN_RECOVERED = 'customer.activecampaign.recovered';
    public const TYPE_ACTIVECAMPAIGN_FAILED = 'customer.activecampaign.failed';
    public const TYPE_BRAZE_SENT = 'customer.braze.sent';
    public const TYPE_BRAZE_RECOVERED = 'customer.braze.recovered';
    public const TYPE_BRAZE_FAILED = 'customer.braze.failed';
    public const TYPE_MAILCHIMP_SENT = 'customer.mailchimp.sent';
    public const TYPE_MAILCHIMP_RECOVERED = 'customer.mailchimp.recovered';
    public const TYPE_MAILCHIMP_FAILED = 'customer.mailchimp.failed';
    public const TYPE_INTERCOM_SENT = 'customer.intercom.sent';
    public const TYPE_INTERCOM_RECOVERED = 'customer.intercom.recovered';
    public const TYPE_INTERCOM_FAILED = 'customer.intercom.failed';
    public const TYPE_SHOPIFY_SENT = 'customer.shopify.sent';
    public const TYPE_SHOPIFY_RECOVERED = 'customer.shopify.recovered';
    public const TYPE_SHOPIFY_FAILED = 'customer.shopify.failed';
    public const TYPE_KLAVIYO_SENT = 'customer.klaviyo.sent';
    public const TYPE_KLAVIYO_RECOVERED = 'customer.klaviyo.recovered';
    public const TYPE_KLAVIYO_FAILED = 'customer.klaviyo.failed';
    public const TYPE_BATCH_SENT = 'customer.batch.sent';
    public const TYPE_BATCH_RECOVERED = 'customer.batch.recovered';
    public const TYPE_BATCH_FAILED = 'customer.batch.failed';
    public const TYPE_REWARDED = 'customer.rewarded';
    public const TYPE_REWARDED_LOYALTY_POINTS = 'customer.rewarded.loyalty_points';
    public const TYPE_VOUCHER_GIFT_BALANCE_ADDED = 'customer.voucher.gift.balance_added';
    public const TYPE_VOUCHER_LOYALTY_CARD_POINTS_ADDED = 'customer.voucher.loyalty_card.points_added';
    public const TYPE_VOUCHER_LOYALTY_CARD_POINTS_TRANSFERRED = 'customer.voucher.loyalty_card.points_transferred';
    public const TYPE_VOUCHER_LOYALTY_CARD_POINTS_EXPIRED = 'customer.voucher.loyalty_card.points_expired';
    public const TYPE_VOUCHER_DELETED = 'customer.voucher.deleted';
    public const TYPE_PUBLICATION_SUCCEEDED = 'customer.publication.succeeded';
    public const TYPE_PUBLICATION_FAILED = 'customer.publication.failed';
    public const TYPE_VALIDATION_SUCCEEDED = 'customer.validation.succeeded';
    public const TYPE_VALIDATION_FAILED = 'customer.validation.failed';
    public const TYPE_REDEMPTION_FAILED = 'customer.redemption.failed';
    public const TYPE_REDEMPTION_SUCCEEDED = 'customer.redemption.succeeded';
    public const TYPE_REDEMPTION_ROLLBACK_FAILED = 'customer.redemption.rollback.failed';
    public const TYPE_REDEMPTION_ROLLBACK_SUCCEEDED = 'customer.redemption.rollback.succeeded';
    public const TYPE_CONSENTS_GIVEN = 'customer.consents.given';
    public const TYPE_CONSENTS_REVOKED = 'customer.consents.revoked';
    public const TYPE_ORDER_CANCELED = 'customer.order.canceled';
    public const TYPE_ORDER_CREATED = 'customer.order.created';
    public const TYPE_ORDER_FULFILLED = 'customer.order.fulfilled';
    public const TYPE_ORDER_PAID = 'customer.order.paid';
    public const TYPE_ORDER_PROCESSING = 'customer.order.processing';
    public const TYPE_ORDER_UPDATED = 'customer.order.updated';
    public const TYPE_REWARD_REDEMPTIONS_CREATED = 'customer.reward_redemptions.created';
    public const TYPE_REWARD_REDEMPTIONS_PENDING = 'customer.reward_redemptions.pending';
    public const TYPE_REWARD_REDEMPTIONS_COMPLETED = 'customer.reward_redemptions.completed';
    public const TYPE_REWARD_REDEMPTIONS_ROLLEDBACK = 'customer.reward_redemptions.rolledback';
    public const TYPE_LOYALTY_UPDATED = 'customer.loyalty.updated';
    public const TYPE_LOYALTY_TIER_UPGRADED = 'customer.loyalty.tier.upgraded';
    public const TYPE_LOYALTY_TIER_DOWNGRADED = 'customer.loyalty.tier.downgraded';
    public const TYPE_LOYALTY_TIER_PROLONGED = 'customer.loyalty.tier.prolonged';
    public const TYPE_LOYALTY_TIER_EXPIRATION_CHANGED = 'customer.loyalty.tier.expiration.changed';
    public const TYPE_LOYALTY_TIER_JOINED = 'customer.loyalty.tier.joined';
    public const TYPE_LOYALTY_TIER_LEFT = 'customer.loyalty.tier.left';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_CONFIRMED,
            self::TYPE_CREATED,
            self::TYPE_UPDATED,
            self::TYPE_DELETED,
            self::TYPE_REFERRED,
            self::TYPE_CUSTOM_EVENT,
            self::TYPE_SEGMENT_ENTERED,
            self::TYPE_SEGMENT_LEFT,
            self::TYPE_SMS_SENT,
            self::TYPE_SMS_RECOVERED,
            self::TYPE_SMS_FAILED,
            self::TYPE_EMAIL_SENT,
            self::TYPE_EMAIL_RECOVERED,
            self::TYPE_EMAIL_FAILED,
            self::TYPE_ACTIVECAMPAIGN_SENT,
            self::TYPE_ACTIVECAMPAIGN_RECOVERED,
            self::TYPE_ACTIVECAMPAIGN_FAILED,
            self::TYPE_BRAZE_SENT,
            self::TYPE_BRAZE_RECOVERED,
            self::TYPE_BRAZE_FAILED,
            self::TYPE_MAILCHIMP_SENT,
            self::TYPE_MAILCHIMP_RECOVERED,
            self::TYPE_MAILCHIMP_FAILED,
            self::TYPE_INTERCOM_SENT,
            self::TYPE_INTERCOM_RECOVERED,
            self::TYPE_INTERCOM_FAILED,
            self::TYPE_SHOPIFY_SENT,
            self::TYPE_SHOPIFY_RECOVERED,
            self::TYPE_SHOPIFY_FAILED,
            self::TYPE_KLAVIYO_SENT,
            self::TYPE_KLAVIYO_RECOVERED,
            self::TYPE_KLAVIYO_FAILED,
            self::TYPE_BATCH_SENT,
            self::TYPE_BATCH_RECOVERED,
            self::TYPE_BATCH_FAILED,
            self::TYPE_REWARDED,
            self::TYPE_REWARDED_LOYALTY_POINTS,
            self::TYPE_VOUCHER_GIFT_BALANCE_ADDED,
            self::TYPE_VOUCHER_LOYALTY_CARD_POINTS_ADDED,
            self::TYPE_VOUCHER_LOYALTY_CARD_POINTS_TRANSFERRED,
            self::TYPE_VOUCHER_LOYALTY_CARD_POINTS_EXPIRED,
            self::TYPE_VOUCHER_DELETED,
            self::TYPE_PUBLICATION_SUCCEEDED,
            self::TYPE_PUBLICATION_FAILED,
            self::TYPE_VALIDATION_SUCCEEDED,
            self::TYPE_VALIDATION_FAILED,
            self::TYPE_REDEMPTION_FAILED,
            self::TYPE_REDEMPTION_SUCCEEDED,
            self::TYPE_REDEMPTION_ROLLBACK_FAILED,
            self::TYPE_REDEMPTION_ROLLBACK_SUCCEEDED,
            self::TYPE_CONSENTS_GIVEN,
            self::TYPE_CONSENTS_REVOKED,
            self::TYPE_ORDER_CANCELED,
            self::TYPE_ORDER_CREATED,
            self::TYPE_ORDER_FULFILLED,
            self::TYPE_ORDER_PAID,
            self::TYPE_ORDER_PROCESSING,
            self::TYPE_ORDER_UPDATED,
            self::TYPE_REWARD_REDEMPTIONS_CREATED,
            self::TYPE_REWARD_REDEMPTIONS_PENDING,
            self::TYPE_REWARD_REDEMPTIONS_COMPLETED,
            self::TYPE_REWARD_REDEMPTIONS_ROLLEDBACK,
            self::TYPE_LOYALTY_UPDATED,
            self::TYPE_LOYALTY_TIER_UPGRADED,
            self::TYPE_LOYALTY_TIER_DOWNGRADED,
            self::TYPE_LOYALTY_TIER_PROLONGED,
            self::TYPE_LOYALTY_TIER_EXPIRATION_CHANGED,
            self::TYPE_LOYALTY_TIER_JOINED,
            self::TYPE_LOYALTY_TIER_LEFT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('group_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId(): ?string
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique event ID, assigned by Voucherify.
     *
     * @return $this
     */
    public function setId(?string $id): static
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType(): ?string
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Event type.
     *
     * @return $this
     */
    public function setType(?string $type): static
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \OpenAPI\Client\Model\CustomerActivityData|null
     */
    public function getData(): ?\OpenAPI\Client\Model\CustomerActivityData
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \OpenAPI\Client\Model\CustomerActivityData|null $data data
     *
     * @return $this
     */
    public function setData(?\OpenAPI\Client\Model\CustomerActivityData $data): static
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp representing the date and time when the customer activity occurred in ISO 8601 format.
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $created_at): static
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return string|null
     */
    public function getGroupId(): ?string
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param string|null $group_id Unique identifier of the request that caused the event.
     *
     * @return $this
     */
    public function setGroupId(?string $group_id): static
    {
        if (is_null($group_id)) {
            array_push($this->openAPINullablesSetToNull, 'group_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['group_id'] = $group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


