<?php
/**
 * ExportsCreateResponseBodyParametersFilters
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExportsCreateResponseBodyParametersFilters Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ExportsCreateResponseBodyParametersFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExportsCreateResponseBodyParametersFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'junction' => 'string',
        'code' => '\OpenAPI\Client\Model\FieldConditions',
        'voucher_type' => '\OpenAPI\Client\Model\FieldConditions',
        'value' => '\OpenAPI\Client\Model\FieldConditions',
        'discount_type' => '\OpenAPI\Client\Model\FieldConditions',
        'campaign' => '\OpenAPI\Client\Model\FieldConditions',
        'category' => '\OpenAPI\Client\Model\FieldConditions',
        'start_date' => '\OpenAPI\Client\Model\FieldConditions',
        'expiration_date' => '\OpenAPI\Client\Model\FieldConditions',
        'gift_balance' => '\OpenAPI\Client\Model\FieldConditions',
        'loyalty_balance' => '\OpenAPI\Client\Model\FieldConditions',
        'redemption_quantity' => '\OpenAPI\Client\Model\FieldConditions',
        'redemption_count' => '\OpenAPI\Client\Model\FieldConditions',
        'active' => '\OpenAPI\Client\Model\FieldConditions',
        'qr_code' => '\OpenAPI\Client\Model\FieldConditions',
        'bar_code' => '\OpenAPI\Client\Model\FieldConditions',
        'metadata' => '\OpenAPI\Client\Model\FieldConditions',
        'id' => '\OpenAPI\Client\Model\FieldConditions',
        'is_referral_code' => '\OpenAPI\Client\Model\FieldConditions',
        'created_at' => '\OpenAPI\Client\Model\FieldConditions',
        'updated_at' => '\OpenAPI\Client\Model\FieldConditions',
        'validity_timeframe_interval' => '\OpenAPI\Client\Model\FieldConditions',
        'validity_timeframe_duration' => '\OpenAPI\Client\Model\FieldConditions',
        'validity_day_of_week' => '\OpenAPI\Client\Model\FieldConditions',
        'discount_amount_limit' => '\OpenAPI\Client\Model\FieldConditions',
        'campaign_id' => '\OpenAPI\Client\Model\FieldConditions',
        'additional_info' => '\OpenAPI\Client\Model\FieldConditions',
        'customer_id' => '\OpenAPI\Client\Model\FieldConditions',
        'discount_unit_type' => '\OpenAPI\Client\Model\FieldConditions',
        'discount_unit_effect' => '\OpenAPI\Client\Model\FieldConditions',
        'customer_source_id' => '\OpenAPI\Client\Model\FieldConditions',
        'object' => '\OpenAPI\Client\Model\FieldConditions',
        'date' => '\OpenAPI\Client\Model\FieldConditions',
        'voucher_code' => '\OpenAPI\Client\Model\FieldConditions',
        'promotion_tier_id' => '\OpenAPI\Client\Model\FieldConditions',
        'customer_name' => '\OpenAPI\Client\Model\FieldConditions',
        'tracking_id' => '\OpenAPI\Client\Model\FieldConditions',
        'order_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'gift_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'loyalty_points' => '\OpenAPI\Client\Model\FieldConditions',
        'result' => '\OpenAPI\Client\Model\FieldConditions',
        'failure_code' => '\OpenAPI\Client\Model\FieldConditions',
        'failure_message' => '\OpenAPI\Client\Model\FieldConditions',
        'name' => '\OpenAPI\Client\Model\FieldConditions',
        'description' => '\OpenAPI\Client\Model\FieldConditions',
        'email' => '\OpenAPI\Client\Model\FieldConditions',
        'source_id' => '\OpenAPI\Client\Model\FieldConditions',
        'address_city' => '\OpenAPI\Client\Model\FieldConditions',
        'address_state' => '\OpenAPI\Client\Model\FieldConditions',
        'address_line_1' => '\OpenAPI\Client\Model\FieldConditions',
        'address_line_2' => '\OpenAPI\Client\Model\FieldConditions',
        'address_country' => '\OpenAPI\Client\Model\FieldConditions',
        'address_postal_code' => '\OpenAPI\Client\Model\FieldConditions',
        'redemptions_total_redeemed' => '\OpenAPI\Client\Model\FieldConditions',
        'redemptions_total_failed' => '\OpenAPI\Client\Model\FieldConditions',
        'redemptions_total_succeeded' => '\OpenAPI\Client\Model\FieldConditions',
        'redemptions_total_rolled_back' => '\OpenAPI\Client\Model\FieldConditions',
        'redemptions_total_rollback_failed' => '\OpenAPI\Client\Model\FieldConditions',
        'redemptions_total_rollback_succeeded' => '\OpenAPI\Client\Model\FieldConditions',
        'orders_total_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'orders_total_count' => '\OpenAPI\Client\Model\FieldConditions',
        'orders_average_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'orders_last_order_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'orders_last_order_date' => '\OpenAPI\Client\Model\FieldConditions',
        'loyalty_referred_customers' => '\OpenAPI\Client\Model\FieldConditions',
        'phone' => '\OpenAPI\Client\Model\FieldConditions',
        'birthday' => '\OpenAPI\Client\Model\FieldConditions',
        'birthdate' => '\OpenAPI\Client\Model\FieldConditions',
        'channel' => '\OpenAPI\Client\Model\FieldConditions',
        'is_winner' => '\OpenAPI\Client\Model\FieldConditions',
        'status' => '\OpenAPI\Client\Model\FieldConditions',
        'amount' => '\OpenAPI\Client\Model\FieldConditions',
        'discount_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'items_discount_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'total_discount_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'total_amount' => '\OpenAPI\Client\Model\FieldConditions',
        'referrer_id' => '\OpenAPI\Client\Model\FieldConditions',
        'voucher_id' => '\OpenAPI\Client\Model\FieldConditions',
        'points' => '\OpenAPI\Client\Model\FieldConditions',
        'expires_at' => '\OpenAPI\Client\Model\FieldConditions',
        'type' => '\OpenAPI\Client\Model\FieldConditions',
        'reason' => '\OpenAPI\Client\Model\FieldConditions',
        'source' => '\OpenAPI\Client\Model\FieldConditions',
        'balance' => '\OpenAPI\Client\Model\FieldConditions',
        'related_transaction_id' => '\OpenAPI\Client\Model\FieldConditions',
        'details' => '\OpenAPI\Client\Model\FieldConditions'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'junction' => null,
        'code' => null,
        'voucher_type' => null,
        'value' => null,
        'discount_type' => null,
        'campaign' => null,
        'category' => null,
        'start_date' => null,
        'expiration_date' => null,
        'gift_balance' => null,
        'loyalty_balance' => null,
        'redemption_quantity' => null,
        'redemption_count' => null,
        'active' => null,
        'qr_code' => null,
        'bar_code' => null,
        'metadata' => null,
        'id' => null,
        'is_referral_code' => null,
        'created_at' => null,
        'updated_at' => null,
        'validity_timeframe_interval' => null,
        'validity_timeframe_duration' => null,
        'validity_day_of_week' => null,
        'discount_amount_limit' => null,
        'campaign_id' => null,
        'additional_info' => null,
        'customer_id' => null,
        'discount_unit_type' => null,
        'discount_unit_effect' => null,
        'customer_source_id' => null,
        'object' => null,
        'date' => null,
        'voucher_code' => null,
        'promotion_tier_id' => null,
        'customer_name' => null,
        'tracking_id' => null,
        'order_amount' => null,
        'gift_amount' => null,
        'loyalty_points' => null,
        'result' => null,
        'failure_code' => null,
        'failure_message' => null,
        'name' => null,
        'description' => null,
        'email' => null,
        'source_id' => null,
        'address_city' => null,
        'address_state' => null,
        'address_line_1' => null,
        'address_line_2' => null,
        'address_country' => null,
        'address_postal_code' => null,
        'redemptions_total_redeemed' => null,
        'redemptions_total_failed' => null,
        'redemptions_total_succeeded' => null,
        'redemptions_total_rolled_back' => null,
        'redemptions_total_rollback_failed' => null,
        'redemptions_total_rollback_succeeded' => null,
        'orders_total_amount' => null,
        'orders_total_count' => null,
        'orders_average_amount' => null,
        'orders_last_order_amount' => null,
        'orders_last_order_date' => null,
        'loyalty_referred_customers' => null,
        'phone' => null,
        'birthday' => null,
        'birthdate' => null,
        'channel' => null,
        'is_winner' => null,
        'status' => null,
        'amount' => null,
        'discount_amount' => null,
        'items_discount_amount' => null,
        'total_discount_amount' => null,
        'total_amount' => null,
        'referrer_id' => null,
        'voucher_id' => null,
        'points' => null,
        'expires_at' => null,
        'type' => null,
        'reason' => null,
        'source' => null,
        'balance' => null,
        'related_transaction_id' => null,
        'details' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'junction' => false,
		'code' => false,
		'voucher_type' => false,
		'value' => false,
		'discount_type' => false,
		'campaign' => false,
		'category' => false,
		'start_date' => false,
		'expiration_date' => false,
		'gift_balance' => false,
		'loyalty_balance' => false,
		'redemption_quantity' => false,
		'redemption_count' => false,
		'active' => false,
		'qr_code' => false,
		'bar_code' => false,
		'metadata' => false,
		'id' => false,
		'is_referral_code' => false,
		'created_at' => false,
		'updated_at' => false,
		'validity_timeframe_interval' => false,
		'validity_timeframe_duration' => false,
		'validity_day_of_week' => false,
		'discount_amount_limit' => false,
		'campaign_id' => false,
		'additional_info' => false,
		'customer_id' => false,
		'discount_unit_type' => false,
		'discount_unit_effect' => false,
		'customer_source_id' => false,
		'object' => false,
		'date' => false,
		'voucher_code' => false,
		'promotion_tier_id' => false,
		'customer_name' => false,
		'tracking_id' => false,
		'order_amount' => false,
		'gift_amount' => false,
		'loyalty_points' => false,
		'result' => false,
		'failure_code' => false,
		'failure_message' => false,
		'name' => false,
		'description' => false,
		'email' => false,
		'source_id' => false,
		'address_city' => false,
		'address_state' => false,
		'address_line_1' => false,
		'address_line_2' => false,
		'address_country' => false,
		'address_postal_code' => false,
		'redemptions_total_redeemed' => false,
		'redemptions_total_failed' => false,
		'redemptions_total_succeeded' => false,
		'redemptions_total_rolled_back' => false,
		'redemptions_total_rollback_failed' => false,
		'redemptions_total_rollback_succeeded' => false,
		'orders_total_amount' => false,
		'orders_total_count' => false,
		'orders_average_amount' => false,
		'orders_last_order_amount' => false,
		'orders_last_order_date' => false,
		'loyalty_referred_customers' => false,
		'phone' => false,
		'birthday' => false,
		'birthdate' => false,
		'channel' => false,
		'is_winner' => false,
		'status' => false,
		'amount' => false,
		'discount_amount' => false,
		'items_discount_amount' => false,
		'total_discount_amount' => false,
		'total_amount' => false,
		'referrer_id' => false,
		'voucher_id' => false,
		'points' => false,
		'expires_at' => false,
		'type' => false,
		'reason' => false,
		'source' => false,
		'balance' => false,
		'related_transaction_id' => false,
		'details' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'junction' => 'junction',
        'code' => 'code',
        'voucher_type' => 'voucher_type',
        'value' => 'value',
        'discount_type' => 'discount_type',
        'campaign' => 'campaign',
        'category' => 'category',
        'start_date' => 'start_date',
        'expiration_date' => 'expiration_date',
        'gift_balance' => 'gift_balance',
        'loyalty_balance' => 'loyalty_balance',
        'redemption_quantity' => 'redemption_quantity',
        'redemption_count' => 'redemption_count',
        'active' => 'active',
        'qr_code' => 'qr_code',
        'bar_code' => 'bar_code',
        'metadata' => 'metadata',
        'id' => 'id',
        'is_referral_code' => 'is_referral_code',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'validity_timeframe_interval' => 'validity_timeframe_interval',
        'validity_timeframe_duration' => 'validity_timeframe_duration',
        'validity_day_of_week' => 'validity_day_of_week',
        'discount_amount_limit' => 'discount_amount_limit',
        'campaign_id' => 'campaign_id',
        'additional_info' => 'additional_info',
        'customer_id' => 'customer_id',
        'discount_unit_type' => 'discount_unit_type',
        'discount_unit_effect' => 'discount_unit_effect',
        'customer_source_id' => 'customer_source_id',
        'object' => 'object',
        'date' => 'date',
        'voucher_code' => 'voucher_code',
        'promotion_tier_id' => 'promotion_tier_id',
        'customer_name' => 'customer_name',
        'tracking_id' => 'tracking_id',
        'order_amount' => 'order_amount',
        'gift_amount' => 'gift_amount',
        'loyalty_points' => 'loyalty_points',
        'result' => 'result',
        'failure_code' => 'failure_code',
        'failure_message' => 'failure_message',
        'name' => 'name',
        'description' => 'description',
        'email' => 'email',
        'source_id' => 'source_id',
        'address_city' => 'address_city',
        'address_state' => 'address_state',
        'address_line_1' => 'address_line_1',
        'address_line_2' => 'address_line_2',
        'address_country' => 'address_country',
        'address_postal_code' => 'address_postal_code',
        'redemptions_total_redeemed' => 'redemptions_total_redeemed',
        'redemptions_total_failed' => 'redemptions_total_failed',
        'redemptions_total_succeeded' => 'redemptions_total_succeeded',
        'redemptions_total_rolled_back' => 'redemptions_total_rolled_back',
        'redemptions_total_rollback_failed' => 'redemptions_total_rollback_failed',
        'redemptions_total_rollback_succeeded' => 'redemptions_total_rollback_succeeded',
        'orders_total_amount' => 'orders_total_amount',
        'orders_total_count' => 'orders_total_count',
        'orders_average_amount' => 'orders_average_amount',
        'orders_last_order_amount' => 'orders_last_order_amount',
        'orders_last_order_date' => 'orders_last_order_date',
        'loyalty_referred_customers' => 'loyalty_referred_customers',
        'phone' => 'phone',
        'birthday' => 'birthday',
        'birthdate' => 'birthdate',
        'channel' => 'channel',
        'is_winner' => 'is_winner',
        'status' => 'status',
        'amount' => 'amount',
        'discount_amount' => 'discount_amount',
        'items_discount_amount' => 'items_discount_amount',
        'total_discount_amount' => 'total_discount_amount',
        'total_amount' => 'total_amount',
        'referrer_id' => 'referrer_id',
        'voucher_id' => 'voucher_id',
        'points' => 'points',
        'expires_at' => 'expires_at',
        'type' => 'type',
        'reason' => 'reason',
        'source' => 'source',
        'balance' => 'balance',
        'related_transaction_id' => 'related_transaction_id',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'junction' => 'setJunction',
        'code' => 'setCode',
        'voucher_type' => 'setVoucherType',
        'value' => 'setValue',
        'discount_type' => 'setDiscountType',
        'campaign' => 'setCampaign',
        'category' => 'setCategory',
        'start_date' => 'setStartDate',
        'expiration_date' => 'setExpirationDate',
        'gift_balance' => 'setGiftBalance',
        'loyalty_balance' => 'setLoyaltyBalance',
        'redemption_quantity' => 'setRedemptionQuantity',
        'redemption_count' => 'setRedemptionCount',
        'active' => 'setActive',
        'qr_code' => 'setQrCode',
        'bar_code' => 'setBarCode',
        'metadata' => 'setMetadata',
        'id' => 'setId',
        'is_referral_code' => 'setIsReferralCode',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'validity_timeframe_interval' => 'setValidityTimeframeInterval',
        'validity_timeframe_duration' => 'setValidityTimeframeDuration',
        'validity_day_of_week' => 'setValidityDayOfWeek',
        'discount_amount_limit' => 'setDiscountAmountLimit',
        'campaign_id' => 'setCampaignId',
        'additional_info' => 'setAdditionalInfo',
        'customer_id' => 'setCustomerId',
        'discount_unit_type' => 'setDiscountUnitType',
        'discount_unit_effect' => 'setDiscountUnitEffect',
        'customer_source_id' => 'setCustomerSourceId',
        'object' => 'setObject',
        'date' => 'setDate',
        'voucher_code' => 'setVoucherCode',
        'promotion_tier_id' => 'setPromotionTierId',
        'customer_name' => 'setCustomerName',
        'tracking_id' => 'setTrackingId',
        'order_amount' => 'setOrderAmount',
        'gift_amount' => 'setGiftAmount',
        'loyalty_points' => 'setLoyaltyPoints',
        'result' => 'setResult',
        'failure_code' => 'setFailureCode',
        'failure_message' => 'setFailureMessage',
        'name' => 'setName',
        'description' => 'setDescription',
        'email' => 'setEmail',
        'source_id' => 'setSourceId',
        'address_city' => 'setAddressCity',
        'address_state' => 'setAddressState',
        'address_line_1' => 'setAddressLine1',
        'address_line_2' => 'setAddressLine2',
        'address_country' => 'setAddressCountry',
        'address_postal_code' => 'setAddressPostalCode',
        'redemptions_total_redeemed' => 'setRedemptionsTotalRedeemed',
        'redemptions_total_failed' => 'setRedemptionsTotalFailed',
        'redemptions_total_succeeded' => 'setRedemptionsTotalSucceeded',
        'redemptions_total_rolled_back' => 'setRedemptionsTotalRolledBack',
        'redemptions_total_rollback_failed' => 'setRedemptionsTotalRollbackFailed',
        'redemptions_total_rollback_succeeded' => 'setRedemptionsTotalRollbackSucceeded',
        'orders_total_amount' => 'setOrdersTotalAmount',
        'orders_total_count' => 'setOrdersTotalCount',
        'orders_average_amount' => 'setOrdersAverageAmount',
        'orders_last_order_amount' => 'setOrdersLastOrderAmount',
        'orders_last_order_date' => 'setOrdersLastOrderDate',
        'loyalty_referred_customers' => 'setLoyaltyReferredCustomers',
        'phone' => 'setPhone',
        'birthday' => 'setBirthday',
        'birthdate' => 'setBirthdate',
        'channel' => 'setChannel',
        'is_winner' => 'setIsWinner',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'discount_amount' => 'setDiscountAmount',
        'items_discount_amount' => 'setItemsDiscountAmount',
        'total_discount_amount' => 'setTotalDiscountAmount',
        'total_amount' => 'setTotalAmount',
        'referrer_id' => 'setReferrerId',
        'voucher_id' => 'setVoucherId',
        'points' => 'setPoints',
        'expires_at' => 'setExpiresAt',
        'type' => 'setType',
        'reason' => 'setReason',
        'source' => 'setSource',
        'balance' => 'setBalance',
        'related_transaction_id' => 'setRelatedTransactionId',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'junction' => 'getJunction',
        'code' => 'getCode',
        'voucher_type' => 'getVoucherType',
        'value' => 'getValue',
        'discount_type' => 'getDiscountType',
        'campaign' => 'getCampaign',
        'category' => 'getCategory',
        'start_date' => 'getStartDate',
        'expiration_date' => 'getExpirationDate',
        'gift_balance' => 'getGiftBalance',
        'loyalty_balance' => 'getLoyaltyBalance',
        'redemption_quantity' => 'getRedemptionQuantity',
        'redemption_count' => 'getRedemptionCount',
        'active' => 'getActive',
        'qr_code' => 'getQrCode',
        'bar_code' => 'getBarCode',
        'metadata' => 'getMetadata',
        'id' => 'getId',
        'is_referral_code' => 'getIsReferralCode',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'validity_timeframe_interval' => 'getValidityTimeframeInterval',
        'validity_timeframe_duration' => 'getValidityTimeframeDuration',
        'validity_day_of_week' => 'getValidityDayOfWeek',
        'discount_amount_limit' => 'getDiscountAmountLimit',
        'campaign_id' => 'getCampaignId',
        'additional_info' => 'getAdditionalInfo',
        'customer_id' => 'getCustomerId',
        'discount_unit_type' => 'getDiscountUnitType',
        'discount_unit_effect' => 'getDiscountUnitEffect',
        'customer_source_id' => 'getCustomerSourceId',
        'object' => 'getObject',
        'date' => 'getDate',
        'voucher_code' => 'getVoucherCode',
        'promotion_tier_id' => 'getPromotionTierId',
        'customer_name' => 'getCustomerName',
        'tracking_id' => 'getTrackingId',
        'order_amount' => 'getOrderAmount',
        'gift_amount' => 'getGiftAmount',
        'loyalty_points' => 'getLoyaltyPoints',
        'result' => 'getResult',
        'failure_code' => 'getFailureCode',
        'failure_message' => 'getFailureMessage',
        'name' => 'getName',
        'description' => 'getDescription',
        'email' => 'getEmail',
        'source_id' => 'getSourceId',
        'address_city' => 'getAddressCity',
        'address_state' => 'getAddressState',
        'address_line_1' => 'getAddressLine1',
        'address_line_2' => 'getAddressLine2',
        'address_country' => 'getAddressCountry',
        'address_postal_code' => 'getAddressPostalCode',
        'redemptions_total_redeemed' => 'getRedemptionsTotalRedeemed',
        'redemptions_total_failed' => 'getRedemptionsTotalFailed',
        'redemptions_total_succeeded' => 'getRedemptionsTotalSucceeded',
        'redemptions_total_rolled_back' => 'getRedemptionsTotalRolledBack',
        'redemptions_total_rollback_failed' => 'getRedemptionsTotalRollbackFailed',
        'redemptions_total_rollback_succeeded' => 'getRedemptionsTotalRollbackSucceeded',
        'orders_total_amount' => 'getOrdersTotalAmount',
        'orders_total_count' => 'getOrdersTotalCount',
        'orders_average_amount' => 'getOrdersAverageAmount',
        'orders_last_order_amount' => 'getOrdersLastOrderAmount',
        'orders_last_order_date' => 'getOrdersLastOrderDate',
        'loyalty_referred_customers' => 'getLoyaltyReferredCustomers',
        'phone' => 'getPhone',
        'birthday' => 'getBirthday',
        'birthdate' => 'getBirthdate',
        'channel' => 'getChannel',
        'is_winner' => 'getIsWinner',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'discount_amount' => 'getDiscountAmount',
        'items_discount_amount' => 'getItemsDiscountAmount',
        'total_discount_amount' => 'getTotalDiscountAmount',
        'total_amount' => 'getTotalAmount',
        'referrer_id' => 'getReferrerId',
        'voucher_id' => 'getVoucherId',
        'points' => 'getPoints',
        'expires_at' => 'getExpiresAt',
        'type' => 'getType',
        'reason' => 'getReason',
        'source' => 'getSource',
        'balance' => 'getBalance',
        'related_transaction_id' => 'getRelatedTransactionId',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const JUNCTION__AND = 'and';
    public const JUNCTION__OR = 'or';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getJunctionAllowableValues()
    {
        return [
            self::JUNCTION__AND,
            self::JUNCTION__OR,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('junction', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('voucher_type', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('discount_type', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('gift_balance', $data ?? [], null);
        $this->setIfExists('loyalty_balance', $data ?? [], null);
        $this->setIfExists('redemption_quantity', $data ?? [], null);
        $this->setIfExists('redemption_count', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('qr_code', $data ?? [], null);
        $this->setIfExists('bar_code', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_referral_code', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('validity_timeframe_interval', $data ?? [], null);
        $this->setIfExists('validity_timeframe_duration', $data ?? [], null);
        $this->setIfExists('validity_day_of_week', $data ?? [], null);
        $this->setIfExists('discount_amount_limit', $data ?? [], null);
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('discount_unit_type', $data ?? [], null);
        $this->setIfExists('discount_unit_effect', $data ?? [], null);
        $this->setIfExists('customer_source_id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('voucher_code', $data ?? [], null);
        $this->setIfExists('promotion_tier_id', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('tracking_id', $data ?? [], null);
        $this->setIfExists('order_amount', $data ?? [], null);
        $this->setIfExists('gift_amount', $data ?? [], null);
        $this->setIfExists('loyalty_points', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('failure_code', $data ?? [], null);
        $this->setIfExists('failure_message', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('source_id', $data ?? [], null);
        $this->setIfExists('address_city', $data ?? [], null);
        $this->setIfExists('address_state', $data ?? [], null);
        $this->setIfExists('address_line_1', $data ?? [], null);
        $this->setIfExists('address_line_2', $data ?? [], null);
        $this->setIfExists('address_country', $data ?? [], null);
        $this->setIfExists('address_postal_code', $data ?? [], null);
        $this->setIfExists('redemptions_total_redeemed', $data ?? [], null);
        $this->setIfExists('redemptions_total_failed', $data ?? [], null);
        $this->setIfExists('redemptions_total_succeeded', $data ?? [], null);
        $this->setIfExists('redemptions_total_rolled_back', $data ?? [], null);
        $this->setIfExists('redemptions_total_rollback_failed', $data ?? [], null);
        $this->setIfExists('redemptions_total_rollback_succeeded', $data ?? [], null);
        $this->setIfExists('orders_total_amount', $data ?? [], null);
        $this->setIfExists('orders_total_count', $data ?? [], null);
        $this->setIfExists('orders_average_amount', $data ?? [], null);
        $this->setIfExists('orders_last_order_amount', $data ?? [], null);
        $this->setIfExists('orders_last_order_date', $data ?? [], null);
        $this->setIfExists('loyalty_referred_customers', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('birthdate', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('is_winner', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('items_discount_amount', $data ?? [], null);
        $this->setIfExists('total_discount_amount', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('referrer_id', $data ?? [], null);
        $this->setIfExists('voucher_id', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('related_transaction_id', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getJunctionAllowableValues();
        if (!is_null($this->container['junction']) && !in_array($this->container['junction'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'junction', must be one of '%s'",
                $this->container['junction'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets junction
     *
     * @return string|null
     */
    public function getJunction()
    {
        return $this->container['junction'];
    }

    /**
     * Sets junction
     *
     * @param string|null $junction Logical Operator Between Filters. Filter by conditions set on the `junction` parameter indicating how the `conditions` should be accounted for in the query. An `AND` is an all-inclusive logical operator, meaning the `AND` operator displays a record if **ALL** the conditions separated by AND are TRUE, while  an `OR` operator displays a record if **ANY** of the conditions separated by OR is TRUE.
     *
     * @return self
     */
    public function setJunction($junction)
    {
        if (is_null($junction)) {
            throw new \InvalidArgumentException('non-nullable junction cannot be null');
        }
        $allowedValues = $this->getJunctionAllowableValues();
        if (!in_array($junction, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'junction', must be one of '%s'",
                    $junction,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['junction'] = $junction;

        return $this;
    }

    /**
     * Gets code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $voucher_type voucher_type
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            throw new \InvalidArgumentException('non-nullable voucher_type cannot be null');
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $discount_type discount_type
     *
     * @return self
     */
    public function setDiscountType($discount_type)
    {
        if (is_null($discount_type)) {
            throw new \InvalidArgumentException('non-nullable discount_type cannot be null');
        }
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets gift_balance
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getGiftBalance()
    {
        return $this->container['gift_balance'];
    }

    /**
     * Sets gift_balance
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $gift_balance gift_balance
     *
     * @return self
     */
    public function setGiftBalance($gift_balance)
    {
        if (is_null($gift_balance)) {
            throw new \InvalidArgumentException('non-nullable gift_balance cannot be null');
        }
        $this->container['gift_balance'] = $gift_balance;

        return $this;
    }

    /**
     * Gets loyalty_balance
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getLoyaltyBalance()
    {
        return $this->container['loyalty_balance'];
    }

    /**
     * Sets loyalty_balance
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $loyalty_balance loyalty_balance
     *
     * @return self
     */
    public function setLoyaltyBalance($loyalty_balance)
    {
        if (is_null($loyalty_balance)) {
            throw new \InvalidArgumentException('non-nullable loyalty_balance cannot be null');
        }
        $this->container['loyalty_balance'] = $loyalty_balance;

        return $this;
    }

    /**
     * Gets redemption_quantity
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionQuantity()
    {
        return $this->container['redemption_quantity'];
    }

    /**
     * Sets redemption_quantity
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemption_quantity redemption_quantity
     *
     * @return self
     */
    public function setRedemptionQuantity($redemption_quantity)
    {
        if (is_null($redemption_quantity)) {
            throw new \InvalidArgumentException('non-nullable redemption_quantity cannot be null');
        }
        $this->container['redemption_quantity'] = $redemption_quantity;

        return $this;
    }

    /**
     * Gets redemption_count
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionCount()
    {
        return $this->container['redemption_count'];
    }

    /**
     * Sets redemption_count
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemption_count redemption_count
     *
     * @return self
     */
    public function setRedemptionCount($redemption_count)
    {
        if (is_null($redemption_count)) {
            throw new \InvalidArgumentException('non-nullable redemption_count cannot be null');
        }
        $this->container['redemption_count'] = $redemption_count;

        return $this;
    }

    /**
     * Gets active
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets qr_code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getQrCode()
    {
        return $this->container['qr_code'];
    }

    /**
     * Sets qr_code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $qr_code qr_code
     *
     * @return self
     */
    public function setQrCode($qr_code)
    {
        if (is_null($qr_code)) {
            throw new \InvalidArgumentException('non-nullable qr_code cannot be null');
        }
        $this->container['qr_code'] = $qr_code;

        return $this;
    }

    /**
     * Gets bar_code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getBarCode()
    {
        return $this->container['bar_code'];
    }

    /**
     * Sets bar_code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $bar_code bar_code
     *
     * @return self
     */
    public function setBarCode($bar_code)
    {
        if (is_null($bar_code)) {
            throw new \InvalidArgumentException('non-nullable bar_code cannot be null');
        }
        $this->container['bar_code'] = $bar_code;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_referral_code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getIsReferralCode()
    {
        return $this->container['is_referral_code'];
    }

    /**
     * Sets is_referral_code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $is_referral_code is_referral_code
     *
     * @return self
     */
    public function setIsReferralCode($is_referral_code)
    {
        if (is_null($is_referral_code)) {
            throw new \InvalidArgumentException('non-nullable is_referral_code cannot be null');
        }
        $this->container['is_referral_code'] = $is_referral_code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets validity_timeframe_interval
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getValidityTimeframeInterval()
    {
        return $this->container['validity_timeframe_interval'];
    }

    /**
     * Sets validity_timeframe_interval
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $validity_timeframe_interval validity_timeframe_interval
     *
     * @return self
     */
    public function setValidityTimeframeInterval($validity_timeframe_interval)
    {
        if (is_null($validity_timeframe_interval)) {
            throw new \InvalidArgumentException('non-nullable validity_timeframe_interval cannot be null');
        }
        $this->container['validity_timeframe_interval'] = $validity_timeframe_interval;

        return $this;
    }

    /**
     * Gets validity_timeframe_duration
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getValidityTimeframeDuration()
    {
        return $this->container['validity_timeframe_duration'];
    }

    /**
     * Sets validity_timeframe_duration
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $validity_timeframe_duration validity_timeframe_duration
     *
     * @return self
     */
    public function setValidityTimeframeDuration($validity_timeframe_duration)
    {
        if (is_null($validity_timeframe_duration)) {
            throw new \InvalidArgumentException('non-nullable validity_timeframe_duration cannot be null');
        }
        $this->container['validity_timeframe_duration'] = $validity_timeframe_duration;

        return $this;
    }

    /**
     * Gets validity_day_of_week
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getValidityDayOfWeek()
    {
        return $this->container['validity_day_of_week'];
    }

    /**
     * Sets validity_day_of_week
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $validity_day_of_week validity_day_of_week
     *
     * @return self
     */
    public function setValidityDayOfWeek($validity_day_of_week)
    {
        if (is_null($validity_day_of_week)) {
            throw new \InvalidArgumentException('non-nullable validity_day_of_week cannot be null');
        }
        $this->container['validity_day_of_week'] = $validity_day_of_week;

        return $this;
    }

    /**
     * Gets discount_amount_limit
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDiscountAmountLimit()
    {
        return $this->container['discount_amount_limit'];
    }

    /**
     * Sets discount_amount_limit
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $discount_amount_limit discount_amount_limit
     *
     * @return self
     */
    public function setDiscountAmountLimit($discount_amount_limit)
    {
        if (is_null($discount_amount_limit)) {
            throw new \InvalidArgumentException('non-nullable discount_amount_limit cannot be null');
        }
        $this->container['discount_amount_limit'] = $discount_amount_limit;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $campaign_id campaign_id
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $additional_info additional_info
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            throw new \InvalidArgumentException('non-nullable customer_id cannot be null');
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets discount_unit_type
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDiscountUnitType()
    {
        return $this->container['discount_unit_type'];
    }

    /**
     * Sets discount_unit_type
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $discount_unit_type discount_unit_type
     *
     * @return self
     */
    public function setDiscountUnitType($discount_unit_type)
    {
        if (is_null($discount_unit_type)) {
            throw new \InvalidArgumentException('non-nullable discount_unit_type cannot be null');
        }
        $this->container['discount_unit_type'] = $discount_unit_type;

        return $this;
    }

    /**
     * Gets discount_unit_effect
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDiscountUnitEffect()
    {
        return $this->container['discount_unit_effect'];
    }

    /**
     * Sets discount_unit_effect
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $discount_unit_effect discount_unit_effect
     *
     * @return self
     */
    public function setDiscountUnitEffect($discount_unit_effect)
    {
        if (is_null($discount_unit_effect)) {
            throw new \InvalidArgumentException('non-nullable discount_unit_effect cannot be null');
        }
        $this->container['discount_unit_effect'] = $discount_unit_effect;

        return $this;
    }

    /**
     * Gets customer_source_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCustomerSourceId()
    {
        return $this->container['customer_source_id'];
    }

    /**
     * Sets customer_source_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $customer_source_id customer_source_id
     *
     * @return self
     */
    public function setCustomerSourceId($customer_source_id)
    {
        if (is_null($customer_source_id)) {
            throw new \InvalidArgumentException('non-nullable customer_source_id cannot be null');
        }
        $this->container['customer_source_id'] = $customer_source_id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $object object
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets voucher_code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getVoucherCode()
    {
        return $this->container['voucher_code'];
    }

    /**
     * Sets voucher_code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $voucher_code voucher_code
     *
     * @return self
     */
    public function setVoucherCode($voucher_code)
    {
        if (is_null($voucher_code)) {
            throw new \InvalidArgumentException('non-nullable voucher_code cannot be null');
        }
        $this->container['voucher_code'] = $voucher_code;

        return $this;
    }

    /**
     * Gets promotion_tier_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getPromotionTierId()
    {
        return $this->container['promotion_tier_id'];
    }

    /**
     * Sets promotion_tier_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $promotion_tier_id promotion_tier_id
     *
     * @return self
     */
    public function setPromotionTierId($promotion_tier_id)
    {
        if (is_null($promotion_tier_id)) {
            throw new \InvalidArgumentException('non-nullable promotion_tier_id cannot be null');
        }
        $this->container['promotion_tier_id'] = $promotion_tier_id;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $tracking_id tracking_id
     *
     * @return self
     */
    public function setTrackingId($tracking_id)
    {
        if (is_null($tracking_id)) {
            throw new \InvalidArgumentException('non-nullable tracking_id cannot be null');
        }
        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets order_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getOrderAmount()
    {
        return $this->container['order_amount'];
    }

    /**
     * Sets order_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $order_amount order_amount
     *
     * @return self
     */
    public function setOrderAmount($order_amount)
    {
        if (is_null($order_amount)) {
            throw new \InvalidArgumentException('non-nullable order_amount cannot be null');
        }
        $this->container['order_amount'] = $order_amount;

        return $this;
    }

    /**
     * Gets gift_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getGiftAmount()
    {
        return $this->container['gift_amount'];
    }

    /**
     * Sets gift_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $gift_amount gift_amount
     *
     * @return self
     */
    public function setGiftAmount($gift_amount)
    {
        if (is_null($gift_amount)) {
            throw new \InvalidArgumentException('non-nullable gift_amount cannot be null');
        }
        $this->container['gift_amount'] = $gift_amount;

        return $this;
    }

    /**
     * Gets loyalty_points
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getLoyaltyPoints()
    {
        return $this->container['loyalty_points'];
    }

    /**
     * Sets loyalty_points
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $loyalty_points loyalty_points
     *
     * @return self
     */
    public function setLoyaltyPoints($loyalty_points)
    {
        if (is_null($loyalty_points)) {
            throw new \InvalidArgumentException('non-nullable loyalty_points cannot be null');
        }
        $this->container['loyalty_points'] = $loyalty_points;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets failure_code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getFailureCode()
    {
        return $this->container['failure_code'];
    }

    /**
     * Sets failure_code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $failure_code failure_code
     *
     * @return self
     */
    public function setFailureCode($failure_code)
    {
        if (is_null($failure_code)) {
            throw new \InvalidArgumentException('non-nullable failure_code cannot be null');
        }
        $this->container['failure_code'] = $failure_code;

        return $this;
    }

    /**
     * Gets failure_message
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getFailureMessage()
    {
        return $this->container['failure_message'];
    }

    /**
     * Sets failure_message
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $failure_message failure_message
     *
     * @return self
     */
    public function setFailureMessage($failure_message)
    {
        if (is_null($failure_message)) {
            throw new \InvalidArgumentException('non-nullable failure_message cannot be null');
        }
        $this->container['failure_message'] = $failure_message;

        return $this;
    }

    /**
     * Gets name
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets email
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $source_id source_id
     *
     * @return self
     */
    public function setSourceId($source_id)
    {
        if (is_null($source_id)) {
            throw new \InvalidArgumentException('non-nullable source_id cannot be null');
        }
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets address_city
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAddressCity()
    {
        return $this->container['address_city'];
    }

    /**
     * Sets address_city
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $address_city address_city
     *
     * @return self
     */
    public function setAddressCity($address_city)
    {
        if (is_null($address_city)) {
            throw new \InvalidArgumentException('non-nullable address_city cannot be null');
        }
        $this->container['address_city'] = $address_city;

        return $this;
    }

    /**
     * Gets address_state
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAddressState()
    {
        return $this->container['address_state'];
    }

    /**
     * Sets address_state
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $address_state address_state
     *
     * @return self
     */
    public function setAddressState($address_state)
    {
        if (is_null($address_state)) {
            throw new \InvalidArgumentException('non-nullable address_state cannot be null');
        }
        $this->container['address_state'] = $address_state;

        return $this;
    }

    /**
     * Gets address_line_1
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAddressLine1()
    {
        return $this->container['address_line_1'];
    }

    /**
     * Sets address_line_1
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $address_line_1 address_line_1
     *
     * @return self
     */
    public function setAddressLine1($address_line_1)
    {
        if (is_null($address_line_1)) {
            throw new \InvalidArgumentException('non-nullable address_line_1 cannot be null');
        }
        $this->container['address_line_1'] = $address_line_1;

        return $this;
    }

    /**
     * Gets address_line_2
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAddressLine2()
    {
        return $this->container['address_line_2'];
    }

    /**
     * Sets address_line_2
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $address_line_2 address_line_2
     *
     * @return self
     */
    public function setAddressLine2($address_line_2)
    {
        if (is_null($address_line_2)) {
            throw new \InvalidArgumentException('non-nullable address_line_2 cannot be null');
        }
        $this->container['address_line_2'] = $address_line_2;

        return $this;
    }

    /**
     * Gets address_country
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAddressCountry()
    {
        return $this->container['address_country'];
    }

    /**
     * Sets address_country
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $address_country address_country
     *
     * @return self
     */
    public function setAddressCountry($address_country)
    {
        if (is_null($address_country)) {
            throw new \InvalidArgumentException('non-nullable address_country cannot be null');
        }
        $this->container['address_country'] = $address_country;

        return $this;
    }

    /**
     * Gets address_postal_code
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAddressPostalCode()
    {
        return $this->container['address_postal_code'];
    }

    /**
     * Sets address_postal_code
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $address_postal_code address_postal_code
     *
     * @return self
     */
    public function setAddressPostalCode($address_postal_code)
    {
        if (is_null($address_postal_code)) {
            throw new \InvalidArgumentException('non-nullable address_postal_code cannot be null');
        }
        $this->container['address_postal_code'] = $address_postal_code;

        return $this;
    }

    /**
     * Gets redemptions_total_redeemed
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionsTotalRedeemed()
    {
        return $this->container['redemptions_total_redeemed'];
    }

    /**
     * Sets redemptions_total_redeemed
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemptions_total_redeemed redemptions_total_redeemed
     *
     * @return self
     */
    public function setRedemptionsTotalRedeemed($redemptions_total_redeemed)
    {
        if (is_null($redemptions_total_redeemed)) {
            throw new \InvalidArgumentException('non-nullable redemptions_total_redeemed cannot be null');
        }
        $this->container['redemptions_total_redeemed'] = $redemptions_total_redeemed;

        return $this;
    }

    /**
     * Gets redemptions_total_failed
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionsTotalFailed()
    {
        return $this->container['redemptions_total_failed'];
    }

    /**
     * Sets redemptions_total_failed
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemptions_total_failed redemptions_total_failed
     *
     * @return self
     */
    public function setRedemptionsTotalFailed($redemptions_total_failed)
    {
        if (is_null($redemptions_total_failed)) {
            throw new \InvalidArgumentException('non-nullable redemptions_total_failed cannot be null');
        }
        $this->container['redemptions_total_failed'] = $redemptions_total_failed;

        return $this;
    }

    /**
     * Gets redemptions_total_succeeded
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionsTotalSucceeded()
    {
        return $this->container['redemptions_total_succeeded'];
    }

    /**
     * Sets redemptions_total_succeeded
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemptions_total_succeeded redemptions_total_succeeded
     *
     * @return self
     */
    public function setRedemptionsTotalSucceeded($redemptions_total_succeeded)
    {
        if (is_null($redemptions_total_succeeded)) {
            throw new \InvalidArgumentException('non-nullable redemptions_total_succeeded cannot be null');
        }
        $this->container['redemptions_total_succeeded'] = $redemptions_total_succeeded;

        return $this;
    }

    /**
     * Gets redemptions_total_rolled_back
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionsTotalRolledBack()
    {
        return $this->container['redemptions_total_rolled_back'];
    }

    /**
     * Sets redemptions_total_rolled_back
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemptions_total_rolled_back redemptions_total_rolled_back
     *
     * @return self
     */
    public function setRedemptionsTotalRolledBack($redemptions_total_rolled_back)
    {
        if (is_null($redemptions_total_rolled_back)) {
            throw new \InvalidArgumentException('non-nullable redemptions_total_rolled_back cannot be null');
        }
        $this->container['redemptions_total_rolled_back'] = $redemptions_total_rolled_back;

        return $this;
    }

    /**
     * Gets redemptions_total_rollback_failed
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionsTotalRollbackFailed()
    {
        return $this->container['redemptions_total_rollback_failed'];
    }

    /**
     * Sets redemptions_total_rollback_failed
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemptions_total_rollback_failed redemptions_total_rollback_failed
     *
     * @return self
     */
    public function setRedemptionsTotalRollbackFailed($redemptions_total_rollback_failed)
    {
        if (is_null($redemptions_total_rollback_failed)) {
            throw new \InvalidArgumentException('non-nullable redemptions_total_rollback_failed cannot be null');
        }
        $this->container['redemptions_total_rollback_failed'] = $redemptions_total_rollback_failed;

        return $this;
    }

    /**
     * Gets redemptions_total_rollback_succeeded
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRedemptionsTotalRollbackSucceeded()
    {
        return $this->container['redemptions_total_rollback_succeeded'];
    }

    /**
     * Sets redemptions_total_rollback_succeeded
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $redemptions_total_rollback_succeeded redemptions_total_rollback_succeeded
     *
     * @return self
     */
    public function setRedemptionsTotalRollbackSucceeded($redemptions_total_rollback_succeeded)
    {
        if (is_null($redemptions_total_rollback_succeeded)) {
            throw new \InvalidArgumentException('non-nullable redemptions_total_rollback_succeeded cannot be null');
        }
        $this->container['redemptions_total_rollback_succeeded'] = $redemptions_total_rollback_succeeded;

        return $this;
    }

    /**
     * Gets orders_total_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getOrdersTotalAmount()
    {
        return $this->container['orders_total_amount'];
    }

    /**
     * Sets orders_total_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $orders_total_amount orders_total_amount
     *
     * @return self
     */
    public function setOrdersTotalAmount($orders_total_amount)
    {
        if (is_null($orders_total_amount)) {
            throw new \InvalidArgumentException('non-nullable orders_total_amount cannot be null');
        }
        $this->container['orders_total_amount'] = $orders_total_amount;

        return $this;
    }

    /**
     * Gets orders_total_count
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getOrdersTotalCount()
    {
        return $this->container['orders_total_count'];
    }

    /**
     * Sets orders_total_count
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $orders_total_count orders_total_count
     *
     * @return self
     */
    public function setOrdersTotalCount($orders_total_count)
    {
        if (is_null($orders_total_count)) {
            throw new \InvalidArgumentException('non-nullable orders_total_count cannot be null');
        }
        $this->container['orders_total_count'] = $orders_total_count;

        return $this;
    }

    /**
     * Gets orders_average_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getOrdersAverageAmount()
    {
        return $this->container['orders_average_amount'];
    }

    /**
     * Sets orders_average_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $orders_average_amount orders_average_amount
     *
     * @return self
     */
    public function setOrdersAverageAmount($orders_average_amount)
    {
        if (is_null($orders_average_amount)) {
            throw new \InvalidArgumentException('non-nullable orders_average_amount cannot be null');
        }
        $this->container['orders_average_amount'] = $orders_average_amount;

        return $this;
    }

    /**
     * Gets orders_last_order_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getOrdersLastOrderAmount()
    {
        return $this->container['orders_last_order_amount'];
    }

    /**
     * Sets orders_last_order_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $orders_last_order_amount orders_last_order_amount
     *
     * @return self
     */
    public function setOrdersLastOrderAmount($orders_last_order_amount)
    {
        if (is_null($orders_last_order_amount)) {
            throw new \InvalidArgumentException('non-nullable orders_last_order_amount cannot be null');
        }
        $this->container['orders_last_order_amount'] = $orders_last_order_amount;

        return $this;
    }

    /**
     * Gets orders_last_order_date
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getOrdersLastOrderDate()
    {
        return $this->container['orders_last_order_date'];
    }

    /**
     * Sets orders_last_order_date
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $orders_last_order_date orders_last_order_date
     *
     * @return self
     */
    public function setOrdersLastOrderDate($orders_last_order_date)
    {
        if (is_null($orders_last_order_date)) {
            throw new \InvalidArgumentException('non-nullable orders_last_order_date cannot be null');
        }
        $this->container['orders_last_order_date'] = $orders_last_order_date;

        return $this;
    }

    /**
     * Gets loyalty_referred_customers
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getLoyaltyReferredCustomers()
    {
        return $this->container['loyalty_referred_customers'];
    }

    /**
     * Sets loyalty_referred_customers
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $loyalty_referred_customers loyalty_referred_customers
     *
     * @return self
     */
    public function setLoyaltyReferredCustomers($loyalty_referred_customers)
    {
        if (is_null($loyalty_referred_customers)) {
            throw new \InvalidArgumentException('non-nullable loyalty_referred_customers cannot be null');
        }
        $this->container['loyalty_referred_customers'] = $loyalty_referred_customers;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            throw new \InvalidArgumentException('non-nullable birthday cannot be null');
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets birthdate
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getBirthdate()
    {
        return $this->container['birthdate'];
    }

    /**
     * Sets birthdate
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $birthdate birthdate
     *
     * @return self
     */
    public function setBirthdate($birthdate)
    {
        if (is_null($birthdate)) {
            throw new \InvalidArgumentException('non-nullable birthdate cannot be null');
        }
        $this->container['birthdate'] = $birthdate;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets is_winner
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getIsWinner()
    {
        return $this->container['is_winner'];
    }

    /**
     * Sets is_winner
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $is_winner is_winner
     *
     * @return self
     */
    public function setIsWinner($is_winner)
    {
        if (is_null($is_winner)) {
            throw new \InvalidArgumentException('non-nullable is_winner cannot be null');
        }
        $this->container['is_winner'] = $is_winner;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            throw new \InvalidArgumentException('non-nullable discount_amount cannot be null');
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets items_discount_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getItemsDiscountAmount()
    {
        return $this->container['items_discount_amount'];
    }

    /**
     * Sets items_discount_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $items_discount_amount items_discount_amount
     *
     * @return self
     */
    public function setItemsDiscountAmount($items_discount_amount)
    {
        if (is_null($items_discount_amount)) {
            throw new \InvalidArgumentException('non-nullable items_discount_amount cannot be null');
        }
        $this->container['items_discount_amount'] = $items_discount_amount;

        return $this;
    }

    /**
     * Gets total_discount_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getTotalDiscountAmount()
    {
        return $this->container['total_discount_amount'];
    }

    /**
     * Sets total_discount_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $total_discount_amount total_discount_amount
     *
     * @return self
     */
    public function setTotalDiscountAmount($total_discount_amount)
    {
        if (is_null($total_discount_amount)) {
            throw new \InvalidArgumentException('non-nullable total_discount_amount cannot be null');
        }
        $this->container['total_discount_amount'] = $total_discount_amount;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets referrer_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getReferrerId()
    {
        return $this->container['referrer_id'];
    }

    /**
     * Sets referrer_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $referrer_id referrer_id
     *
     * @return self
     */
    public function setReferrerId($referrer_id)
    {
        if (is_null($referrer_id)) {
            throw new \InvalidArgumentException('non-nullable referrer_id cannot be null');
        }
        $this->container['referrer_id'] = $referrer_id;

        return $this;
    }

    /**
     * Gets voucher_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getVoucherId()
    {
        return $this->container['voucher_id'];
    }

    /**
     * Sets voucher_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $voucher_id voucher_id
     *
     * @return self
     */
    public function setVoucherId($voucher_id)
    {
        if (is_null($voucher_id)) {
            throw new \InvalidArgumentException('non-nullable voucher_id cannot be null');
        }
        $this->container['voucher_id'] = $voucher_id;

        return $this;
    }

    /**
     * Gets points
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $points points
     *
     * @return self
     */
    public function setPoints($points)
    {
        if (is_null($points)) {
            throw new \InvalidArgumentException('non-nullable points cannot be null');
        }
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $expires_at expires_at
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {
        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $reason reason
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets source
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets related_transaction_id
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getRelatedTransactionId()
    {
        return $this->container['related_transaction_id'];
    }

    /**
     * Sets related_transaction_id
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $related_transaction_id related_transaction_id
     *
     * @return self
     */
    public function setRelatedTransactionId($related_transaction_id)
    {
        if (is_null($related_transaction_id)) {
            throw new \InvalidArgumentException('non-nullable related_transaction_id cannot be null');
        }
        $this->container['related_transaction_id'] = $related_transaction_id;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\FieldConditions|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\FieldConditions|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


