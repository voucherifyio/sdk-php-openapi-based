<?php
/**
 * CampaignsVouchersCreateResponseBody
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CampaignsVouchersCreateResponseBody Class Doc Comment
 *
 * @category Class
 * @description Response body schema for **POST** &#x60;v1/campaigns/{campaignId}/vouchers/{code}&#x60; and **POST** &#x60;v1/campaigns/{campaignId}/vouchers&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CampaignsVouchersCreateResponseBody implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CampaignsVouchersCreateResponseBody';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'code' => 'string',
        'campaign' => 'string',
        'campaign_id' => 'string',
        'category' => 'string',
        'category_id' => 'string',
        'type' => 'string',
        'discount' => '\OpenAPI\Client\Model\Discount',
<<<<<<< Updated upstream
        'gift' => '\OpenAPI\Client\Model\VoucherGift',
        'loyalty_card' => '\OpenAPI\Client\Model\VoucherLoyaltyCard',
=======
        'gift' => '\OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyGift',
        'loyalty_card' => '\OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyLoyaltyCard',
>>>>>>> Stashed changes
        'start_date' => '\DateTime',
        'expiration_date' => '\DateTime',
        'validity_timeframe' => '\OpenAPI\Client\Model\VoucherValidityTimeframe',
        'validity_day_of_week' => 'int[]',
        'active' => 'bool',
        'additional_info' => 'string',
        'metadata' => 'object',
        'assets' => '\OpenAPI\Client\Model\VoucherAssets',
        'is_referral_code' => 'bool',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'holder_id' => 'string',
        'holder' => '\OpenAPI\Client\Model\SimpleCustomer',
        'object' => 'string',
<<<<<<< Updated upstream
        'distributions' => 'object[]',
        'deleted' => 'bool',
        'validation_rules_assignments' => '\OpenAPI\Client\Model\ValidationRulesAssignmentsList',
        'publish' => '\OpenAPI\Client\Model\VoucherPublish',
        'redemption' => '\OpenAPI\Client\Model\VoucherRedemption'
=======
        'publish' => '\OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyPublish',
        'redemption' => '\OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyRedemption',
        'categories' => '\OpenAPI\Client\Model\Category[]',
        'validation_rules_assignments' => '\OpenAPI\Client\Model\ValidationRulesAssignmentsList'
>>>>>>> Stashed changes
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'code' => null,
        'campaign' => null,
        'campaign_id' => null,
        'category' => null,
        'category_id' => null,
        'type' => null,
        'discount' => null,
        'gift' => null,
        'loyalty_card' => null,
        'start_date' => 'date-time',
        'expiration_date' => 'date-time',
        'validity_timeframe' => null,
        'validity_day_of_week' => null,
        'active' => null,
        'additional_info' => null,
        'metadata' => null,
        'assets' => null,
        'is_referral_code' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'holder_id' => null,
        'holder' => null,
        'object' => null,
<<<<<<< Updated upstream
        'distributions' => null,
        'deleted' => null,
        'validation_rules_assignments' => null,
=======
>>>>>>> Stashed changes
        'publish' => null,
        'redemption' => null,
        'categories' => null,
        'validation_rules_assignments' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
<<<<<<< Updated upstream
        'id' => false,
		'code' => false,
		'campaign' => false,
		'campaign_id' => false,
		'category' => false,
		'category_id' => false,
		'categories' => false,
		'type' => false,
=======
        'id' => true,
		'code' => true,
		'campaign' => true,
		'campaign_id' => true,
		'category' => true,
		'category_id' => true,
		'type' => true,
>>>>>>> Stashed changes
		'discount' => false,
		'gift' => false,
		'loyalty_card' => false,
		'start_date' => false,
		'expiration_date' => false,
		'validity_timeframe' => false,
		'validity_day_of_week' => false,
		'active' => true,
		'additional_info' => false,
		'metadata' => false,
		'assets' => false,
		'is_referral_code' => true,
<<<<<<< Updated upstream
		'created_at' => false,
		'updated_at' => false,
		'holder_id' => false,
		'holder' => false,
		'object' => false,
		'distributions' => false,
		'deleted' => false,
		'validation_rules_assignments' => false,
		'publish' => false,
		'redemption' => false
=======
		'created_at' => true,
		'updated_at' => true,
		'holder_id' => true,
		'referrer_id' => true,
		'object' => true,
		'publish' => true,
		'redemption' => true,
		'categories' => true,
		'validation_rules_assignments' => false
>>>>>>> Stashed changes
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'campaign' => 'campaign',
        'campaign_id' => 'campaign_id',
        'category' => 'category',
        'category_id' => 'category_id',
        'type' => 'type',
        'discount' => 'discount',
        'gift' => 'gift',
        'loyalty_card' => 'loyalty_card',
        'start_date' => 'start_date',
        'expiration_date' => 'expiration_date',
        'validity_timeframe' => 'validity_timeframe',
        'validity_day_of_week' => 'validity_day_of_week',
        'active' => 'active',
        'additional_info' => 'additional_info',
        'metadata' => 'metadata',
        'assets' => 'assets',
        'is_referral_code' => 'is_referral_code',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at',
        'holder_id' => 'holder_id',
        'holder' => 'holder',
        'object' => 'object',
<<<<<<< Updated upstream
        'distributions' => 'distributions',
        'deleted' => 'deleted',
        'validation_rules_assignments' => 'validation_rules_assignments',
=======
>>>>>>> Stashed changes
        'publish' => 'publish',
        'redemption' => 'redemption',
        'categories' => 'categories',
        'validation_rules_assignments' => 'validation_rules_assignments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'campaign' => 'setCampaign',
        'campaign_id' => 'setCampaignId',
        'category' => 'setCategory',
        'category_id' => 'setCategoryId',
        'type' => 'setType',
        'discount' => 'setDiscount',
        'gift' => 'setGift',
        'loyalty_card' => 'setLoyaltyCard',
        'start_date' => 'setStartDate',
        'expiration_date' => 'setExpirationDate',
        'validity_timeframe' => 'setValidityTimeframe',
        'validity_day_of_week' => 'setValidityDayOfWeek',
        'active' => 'setActive',
        'additional_info' => 'setAdditionalInfo',
        'metadata' => 'setMetadata',
        'assets' => 'setAssets',
        'is_referral_code' => 'setIsReferralCode',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'holder_id' => 'setHolderId',
        'holder' => 'setHolder',
        'object' => 'setObject',
<<<<<<< Updated upstream
        'distributions' => 'setDistributions',
        'deleted' => 'setDeleted',
        'validation_rules_assignments' => 'setValidationRulesAssignments',
=======
>>>>>>> Stashed changes
        'publish' => 'setPublish',
        'redemption' => 'setRedemption',
        'categories' => 'setCategories',
        'validation_rules_assignments' => 'setValidationRulesAssignments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'campaign' => 'getCampaign',
        'campaign_id' => 'getCampaignId',
        'category' => 'getCategory',
        'category_id' => 'getCategoryId',
        'type' => 'getType',
        'discount' => 'getDiscount',
        'gift' => 'getGift',
        'loyalty_card' => 'getLoyaltyCard',
        'start_date' => 'getStartDate',
        'expiration_date' => 'getExpirationDate',
        'validity_timeframe' => 'getValidityTimeframe',
        'validity_day_of_week' => 'getValidityDayOfWeek',
        'active' => 'getActive',
        'additional_info' => 'getAdditionalInfo',
        'metadata' => 'getMetadata',
        'assets' => 'getAssets',
        'is_referral_code' => 'getIsReferralCode',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'holder_id' => 'getHolderId',
        'holder' => 'getHolder',
        'object' => 'getObject',
<<<<<<< Updated upstream
        'distributions' => 'getDistributions',
        'deleted' => 'getDeleted',
        'validation_rules_assignments' => 'getValidationRulesAssignments',
=======
>>>>>>> Stashed changes
        'publish' => 'getPublish',
        'redemption' => 'getRedemption',
        'categories' => 'getCategories',
        'validation_rules_assignments' => 'getValidationRulesAssignments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const TYPE_GIFT_VOUCHER = 'GIFT_VOUCHER';
    public const TYPE_DISCOUNT_VOUCHER = 'DISCOUNT_VOUCHER';
    public const TYPE_LOYALTY_CARD = 'LOYALTY_CARD';
    public const VALIDITY_DAY_OF_WEEK_0 = 0;
    public const VALIDITY_DAY_OF_WEEK_1 = 1;
    public const VALIDITY_DAY_OF_WEEK_2 = 2;
    public const VALIDITY_DAY_OF_WEEK_3 = 3;
    public const VALIDITY_DAY_OF_WEEK_4 = 4;
    public const VALIDITY_DAY_OF_WEEK_5 = 5;
    public const VALIDITY_DAY_OF_WEEK_6 = 6;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_GIFT_VOUCHER,
            self::TYPE_DISCOUNT_VOUCHER,
            self::TYPE_LOYALTY_CARD,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getValidityDayOfWeekAllowableValues()
    {
        return [
            self::VALIDITY_DAY_OF_WEEK_0,
            self::VALIDITY_DAY_OF_WEEK_1,
            self::VALIDITY_DAY_OF_WEEK_2,
            self::VALIDITY_DAY_OF_WEEK_3,
            self::VALIDITY_DAY_OF_WEEK_4,
            self::VALIDITY_DAY_OF_WEEK_5,
            self::VALIDITY_DAY_OF_WEEK_6,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
        $this->setIfExists('campaign_id', $data ?? [], null);
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('category_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('discount', $data ?? [], null);
        $this->setIfExists('gift', $data ?? [], null);
        $this->setIfExists('loyalty_card', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('validity_timeframe', $data ?? [], null);
        $this->setIfExists('validity_day_of_week', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('additional_info', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('assets', $data ?? [], null);
        $this->setIfExists('is_referral_code', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('updated_at', $data ?? [], null);
        $this->setIfExists('holder_id', $data ?? [], null);
        $this->setIfExists('holder', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'voucher');
<<<<<<< Updated upstream
        $this->setIfExists('distributions', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('validation_rules_assignments', $data ?? [], null);
=======
>>>>>>> Stashed changes
        $this->setIfExists('publish', $data ?? [], null);
        $this->setIfExists('redemption', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('validation_rules_assignments', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Assigned by the Voucherify API, identifies the voucher.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters.
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return string|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param string|null $campaign A unique campaign name, identifies the voucher's parent campaign.
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets campaign_id
     *
     * @return string|null
     */
    public function getCampaignId()
    {
        return $this->container['campaign_id'];
    }

    /**
     * Sets campaign_id
     *
     * @param string|null $campaign_id Assigned by the Voucherify API, identifies the voucher's parent campaign.
     *
     * @return self
     */
    public function setCampaignId($campaign_id)
    {
        if (is_null($campaign_id)) {
            throw new \InvalidArgumentException('non-nullable campaign_id cannot be null');
        }
        $this->container['campaign_id'] = $campaign_id;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string|null $category Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint.
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id Unique category ID assigned by Voucherify.
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        if (is_null($category_id)) {
            throw new \InvalidArgumentException('non-nullable category_id cannot be null');
        }
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
<<<<<<< Updated upstream
     * Gets categories
     *
     * @return \OpenAPI\Client\Model\Category[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \OpenAPI\Client\Model\Category[]|null $categories Contains details about the category.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
=======
>>>>>>> Stashed changes
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type Defines the type of the voucher.
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return \OpenAPI\Client\Model\Discount|null
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param \OpenAPI\Client\Model\Discount|null $discount discount
     *
     * @return self
     */
    public function setDiscount($discount)
    {
        if (is_null($discount)) {
            throw new \InvalidArgumentException('non-nullable discount cannot be null');
        }
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets gift
     *
<<<<<<< Updated upstream
     * @return \OpenAPI\Client\Model\VoucherGift|null
=======
     * @return \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyGift|null
>>>>>>> Stashed changes
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
<<<<<<< Updated upstream
     * @param \OpenAPI\Client\Model\VoucherGift|null $gift gift
=======
     * @param \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyGift|null $gift gift
>>>>>>> Stashed changes
     *
     * @return self
     */
    public function setGift($gift)
    {
        if (is_null($gift)) {
            throw new \InvalidArgumentException('non-nullable gift cannot be null');
        }
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets loyalty_card
     *
<<<<<<< Updated upstream
     * @return \OpenAPI\Client\Model\VoucherLoyaltyCard|null
=======
     * @return \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyLoyaltyCard|null
>>>>>>> Stashed changes
     */
    public function getLoyaltyCard()
    {
        return $this->container['loyalty_card'];
    }

    /**
     * Sets loyalty_card
     *
<<<<<<< Updated upstream
     * @param \OpenAPI\Client\Model\VoucherLoyaltyCard|null $loyalty_card loyalty_card
=======
     * @param \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyLoyaltyCard|null $loyalty_card loyalty_card
>>>>>>> Stashed changes
     *
     * @return self
     */
    public function setLoyaltyCard($loyalty_card)
    {
        if (is_null($loyalty_card)) {
            throw new \InvalidArgumentException('non-nullable loyalty_card cannot be null');
        }
        $this->container['loyalty_card'] = $loyalty_card;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Activation timestamp defines when the code starts to be active in ISO 8601 format. Voucher is *inactive before* this date.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Expiration timestamp defines when the code expires in ISO 8601 format.  Voucher is *inactive after* this date.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets validity_timeframe
     *
     * @return \OpenAPI\Client\Model\VoucherValidityTimeframe|null
     */
    public function getValidityTimeframe()
    {
        return $this->container['validity_timeframe'];
    }

    /**
     * Sets validity_timeframe
     *
     * @param \OpenAPI\Client\Model\VoucherValidityTimeframe|null $validity_timeframe validity_timeframe
     *
     * @return self
     */
    public function setValidityTimeframe($validity_timeframe)
    {
        if (is_null($validity_timeframe)) {
            throw new \InvalidArgumentException('non-nullable validity_timeframe cannot be null');
        }
        $this->container['validity_timeframe'] = $validity_timeframe;

        return $this;
    }

    /**
     * Gets validity_day_of_week
     *
     * @return int[]|null
     */
    public function getValidityDayOfWeek()
    {
        return $this->container['validity_day_of_week'];
    }

    /**
     * Sets validity_day_of_week
     *
     * @param int[]|null $validity_day_of_week Integer array corresponding to the particular days of the week in which the voucher is valid.  - `0`  Sunday   - `1`  Monday   - `2`  Tuesday   - `3`  Wednesday   - `4`  Thursday   - `5`  Friday   - `6`  Saturday
     *
     * @return self
     */
    public function setValidityDayOfWeek($validity_day_of_week)
    {
        if (is_null($validity_day_of_week)) {
            throw new \InvalidArgumentException('non-nullable validity_day_of_week cannot be null');
        }
        $allowedValues = $this->getValidityDayOfWeekAllowableValues();
        if (array_diff($validity_day_of_week, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'validity_day_of_week', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['validity_day_of_week'] = $validity_day_of_week;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.    - `true` indicates an *active* voucher - `false` indicates an *inactive* voucher
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            array_push($this->openAPINullablesSetToNull, 'active');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('active', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets additional_info
     *
     * @return string|null
     */
    public function getAdditionalInfo()
    {
        return $this->container['additional_info'];
    }

    /**
     * Sets additional_info
     *
     * @param string|null $additional_info An optional field to keep any extra textual information about the code such as a code description and details.
     *
     * @return self
     */
    public function setAdditionalInfo($additional_info)
    {
        if (is_null($additional_info)) {
            throw new \InvalidArgumentException('non-nullable additional_info cannot be null');
        }
        $this->container['additional_info'] = $additional_info;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            throw new \InvalidArgumentException('non-nullable metadata cannot be null');
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets assets
     *
     * @return \OpenAPI\Client\Model\VoucherAssets|null
     */
    public function getAssets()
    {
        return $this->container['assets'];
    }

    /**
     * Sets assets
     *
     * @param \OpenAPI\Client\Model\VoucherAssets|null $assets assets
     *
     * @return self
     */
    public function setAssets($assets)
    {
        if (is_null($assets)) {
            throw new \InvalidArgumentException('non-nullable assets cannot be null');
        }
        $this->container['assets'] = $assets;

        return $this;
    }

    /**
     * Gets is_referral_code
     *
     * @return bool|null
     */
    public function getIsReferralCode()
    {
        return $this->container['is_referral_code'];
    }

    /**
     * Sets is_referral_code
     *
     * @param bool|null $is_referral_code Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.
     *
     * @return self
     */
    public function setIsReferralCode($is_referral_code)
    {
        if (is_null($is_referral_code)) {
            array_push($this->openAPINullablesSetToNull, 'is_referral_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_referral_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_referral_code'] = $is_referral_code;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp representing the date and time when the voucher was created in ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at Timestamp representing the date and time when the voucher was last updated in ISO 8601 format.
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        if (is_null($updated_at)) {
            throw new \InvalidArgumentException('non-nullable updated_at cannot be null');
        }
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets holder_id
     *
     * @return string|null
     */
    public function getHolderId()
    {
        return $this->container['holder_id'];
    }

    /**
     * Sets holder_id
     *
<<<<<<< Updated upstream
     * @param string|null $holder_id Unique customer ID of voucher owner.
=======
     * @param string|null $holder_id Unique customer identifier of the redeemable holder. It equals to the customer ID assigned by Voucherify.
>>>>>>> Stashed changes
     *
     * @return self
     */
    public function setHolderId($holder_id)
    {
        if (is_null($holder_id)) {
            throw new \InvalidArgumentException('non-nullable holder_id cannot be null');
        }
        $this->container['holder_id'] = $holder_id;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return \OpenAPI\Client\Model\SimpleCustomer|null
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param \OpenAPI\Client\Model\SimpleCustomer|null $holder holder
     *
     * @return self
     */
    public function setHolder($holder)
    {
        if (is_null($holder)) {
            throw new \InvalidArgumentException('non-nullable holder cannot be null');
        }
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object The type of object represented by JSON. Default is `voucher`.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            throw new \InvalidArgumentException('non-nullable object cannot be null');
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
<<<<<<< Updated upstream
     * Gets distributions
     *
     * @return object[]|null
     */
    public function getDistributions()
    {
        return $this->container['distributions'];
    }

    /**
     * Sets distributions
     *
     * @param object[]|null $distributions distributions
     *
     * @return self
     */
    public function setDistributions($distributions)
    {
        if (is_null($distributions)) {
            throw new \InvalidArgumentException('non-nullable distributions cannot be null');
        }
        $this->container['distributions'] = $distributions;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Flag indicating whether this voucher is deleted.
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets validation_rules_assignments
     *
     * @return \OpenAPI\Client\Model\ValidationRulesAssignmentsList|null
     */
    public function getValidationRulesAssignments()
    {
        return $this->container['validation_rules_assignments'];
    }

    /**
     * Sets validation_rules_assignments
     *
     * @param \OpenAPI\Client\Model\ValidationRulesAssignmentsList|null $validation_rules_assignments validation_rules_assignments
     *
     * @return self
     */
    public function setValidationRulesAssignments($validation_rules_assignments)
    {
        if (is_null($validation_rules_assignments)) {
            throw new \InvalidArgumentException('non-nullable validation_rules_assignments cannot be null');
        }
        $this->container['validation_rules_assignments'] = $validation_rules_assignments;

        return $this;
    }

    /**
     * Gets publish
     *
     * @return \OpenAPI\Client\Model\VoucherPublish|null
=======
     * Gets publish
     *
     * @return \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyPublish|null
>>>>>>> Stashed changes
     */
    public function getPublish()
    {
        return $this->container['publish'];
    }

    /**
     * Sets publish
     *
<<<<<<< Updated upstream
     * @param \OpenAPI\Client\Model\VoucherPublish|null $publish publish
=======
     * @param \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyPublish|null $publish publish
>>>>>>> Stashed changes
     *
     * @return self
     */
    public function setPublish($publish)
    {
        if (is_null($publish)) {
            throw new \InvalidArgumentException('non-nullable publish cannot be null');
        }
        $this->container['publish'] = $publish;

        return $this;
    }

    /**
     * Gets redemption
     *
<<<<<<< Updated upstream
     * @return \OpenAPI\Client\Model\VoucherRedemption|null
=======
     * @return \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyRedemption|null
>>>>>>> Stashed changes
     */
    public function getRedemption()
    {
        return $this->container['redemption'];
    }

    /**
     * Sets redemption
     *
<<<<<<< Updated upstream
     * @param \OpenAPI\Client\Model\VoucherRedemption|null $redemption redemption
=======
     * @param \OpenAPI\Client\Model\CampaignsVouchersCreateResponseBodyRedemption|null $redemption redemption
>>>>>>> Stashed changes
     *
     * @return self
     */
    public function setRedemption($redemption)
    {
        if (is_null($redemption)) {
            throw new \InvalidArgumentException('non-nullable redemption cannot be null');
        }
        $this->container['redemption'] = $redemption;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \OpenAPI\Client\Model\Category[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \OpenAPI\Client\Model\Category[]|null $categories Contains details about the category.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            array_push($this->openAPINullablesSetToNull, 'categories');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('categories', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets validation_rules_assignments
     *
     * @return \OpenAPI\Client\Model\ValidationRulesAssignmentsList|null
     */
    public function getValidationRulesAssignments()
    {
        return $this->container['validation_rules_assignments'];
    }

    /**
     * Sets validation_rules_assignments
     *
     * @param \OpenAPI\Client\Model\ValidationRulesAssignmentsList|null $validation_rules_assignments validation_rules_assignments
     *
     * @return self
     */
    public function setValidationRulesAssignments($validation_rules_assignments)
    {
        if (is_null($validation_rules_assignments)) {
            throw new \InvalidArgumentException('non-nullable validation_rules_assignments cannot be null');
        }
        $this->container['validation_rules_assignments'] = $validation_rules_assignments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


