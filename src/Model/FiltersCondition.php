<?php
/**
 * FiltersCondition
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * FiltersCondition Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class FiltersCondition implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'FiltersCondition';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'in' => 'mixed',
        'not_in' => 'mixed',
        'is' => 'mixed',
        'is_days_ago' => 'mixed',
        'is_days_in_future' => 'mixed',
        'is_not' => 'mixed',
        'has_value' => 'mixed',
        'is_unknown' => 'mixed',
        'contains' => 'mixed',
        'not_contain' => 'mixed',
        'starts_with' => 'mixed',
        'ends_with' => 'mixed',
        'more_than' => 'mixed',
        'less_than' => 'mixed',
        'more_than_ago' => 'mixed',
        'less_than_ago' => 'mixed',
        'more_than_future' => 'mixed',
        'less_than_future' => 'mixed',
        'more_than_equal' => 'mixed',
        'less_than_equal' => 'mixed',
        'after' => 'mixed',
        'before' => 'mixed',
        'count' => 'mixed',
        'count_less' => 'mixed',
        'count_more' => 'mixed'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'in' => null,
        'not_in' => null,
        'is' => null,
        'is_days_ago' => null,
        'is_days_in_future' => null,
        'is_not' => null,
        'has_value' => null,
        'is_unknown' => null,
        'contains' => null,
        'not_contain' => null,
        'starts_with' => null,
        'ends_with' => null,
        'more_than' => null,
        'less_than' => null,
        'more_than_ago' => null,
        'less_than_ago' => null,
        'more_than_future' => null,
        'less_than_future' => null,
        'more_than_equal' => null,
        'less_than_equal' => null,
        'after' => null,
        'before' => null,
        'count' => null,
        'count_less' => null,
        'count_more' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'in' => true,
        'not_in' => true,
        'is' => true,
        'is_days_ago' => true,
        'is_days_in_future' => true,
        'is_not' => true,
        'has_value' => true,
        'is_unknown' => true,
        'contains' => true,
        'not_contain' => true,
        'starts_with' => true,
        'ends_with' => true,
        'more_than' => true,
        'less_than' => true,
        'more_than_ago' => true,
        'less_than_ago' => true,
        'more_than_future' => true,
        'less_than_future' => true,
        'more_than_equal' => true,
        'less_than_equal' => true,
        'after' => true,
        'before' => true,
        'count' => true,
        'count_less' => true,
        'count_more' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'in' => '$in',
        'not_in' => '$not_in',
        'is' => '$is',
        'is_days_ago' => '$is_days_ago',
        'is_days_in_future' => '$is_days_in_future',
        'is_not' => '$is_not',
        'has_value' => '$has_value',
        'is_unknown' => '$is_unknown',
        'contains' => '$contains',
        'not_contain' => '$not_contain',
        'starts_with' => '$starts_with',
        'ends_with' => '$ends_with',
        'more_than' => '$more_than',
        'less_than' => '$less_than',
        'more_than_ago' => '$more_than_ago',
        'less_than_ago' => '$less_than_ago',
        'more_than_future' => '$more_than_future',
        'less_than_future' => '$less_than_future',
        'more_than_equal' => '$more_than_equal',
        'less_than_equal' => '$less_than_equal',
        'after' => '$after',
        'before' => '$before',
        'count' => '$count',
        'count_less' => '$count_less',
        'count_more' => '$count_more'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'in' => 'setIn',
        'not_in' => 'setNotIn',
        'is' => 'setIs',
        'is_days_ago' => 'setIsDaysAgo',
        'is_days_in_future' => 'setIsDaysInFuture',
        'is_not' => 'setIsNot',
        'has_value' => 'setHasValue',
        'is_unknown' => 'setIsUnknown',
        'contains' => 'setContains',
        'not_contain' => 'setNotContain',
        'starts_with' => 'setStartsWith',
        'ends_with' => 'setEndsWith',
        'more_than' => 'setMoreThan',
        'less_than' => 'setLessThan',
        'more_than_ago' => 'setMoreThanAgo',
        'less_than_ago' => 'setLessThanAgo',
        'more_than_future' => 'setMoreThanFuture',
        'less_than_future' => 'setLessThanFuture',
        'more_than_equal' => 'setMoreThanEqual',
        'less_than_equal' => 'setLessThanEqual',
        'after' => 'setAfter',
        'before' => 'setBefore',
        'count' => 'setCount',
        'count_less' => 'setCountLess',
        'count_more' => 'setCountMore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'in' => 'getIn',
        'not_in' => 'getNotIn',
        'is' => 'getIs',
        'is_days_ago' => 'getIsDaysAgo',
        'is_days_in_future' => 'getIsDaysInFuture',
        'is_not' => 'getIsNot',
        'has_value' => 'getHasValue',
        'is_unknown' => 'getIsUnknown',
        'contains' => 'getContains',
        'not_contain' => 'getNotContain',
        'starts_with' => 'getStartsWith',
        'ends_with' => 'getEndsWith',
        'more_than' => 'getMoreThan',
        'less_than' => 'getLessThan',
        'more_than_ago' => 'getMoreThanAgo',
        'less_than_ago' => 'getLessThanAgo',
        'more_than_future' => 'getMoreThanFuture',
        'less_than_future' => 'getLessThanFuture',
        'more_than_equal' => 'getMoreThanEqual',
        'less_than_equal' => 'getLessThanEqual',
        'after' => 'getAfter',
        'before' => 'getBefore',
        'count' => 'getCount',
        'count_less' => 'getCountLess',
        'count_more' => 'getCountMore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('in', $data ?? [], null);
        $this->setIfExists('not_in', $data ?? [], null);
        $this->setIfExists('is', $data ?? [], null);
        $this->setIfExists('is_days_ago', $data ?? [], null);
        $this->setIfExists('is_days_in_future', $data ?? [], null);
        $this->setIfExists('is_not', $data ?? [], null);
        $this->setIfExists('has_value', $data ?? [], null);
        $this->setIfExists('is_unknown', $data ?? [], null);
        $this->setIfExists('contains', $data ?? [], null);
        $this->setIfExists('not_contain', $data ?? [], null);
        $this->setIfExists('starts_with', $data ?? [], null);
        $this->setIfExists('ends_with', $data ?? [], null);
        $this->setIfExists('more_than', $data ?? [], null);
        $this->setIfExists('less_than', $data ?? [], null);
        $this->setIfExists('more_than_ago', $data ?? [], null);
        $this->setIfExists('less_than_ago', $data ?? [], null);
        $this->setIfExists('more_than_future', $data ?? [], null);
        $this->setIfExists('less_than_future', $data ?? [], null);
        $this->setIfExists('more_than_equal', $data ?? [], null);
        $this->setIfExists('less_than_equal', $data ?? [], null);
        $this->setIfExists('after', $data ?? [], null);
        $this->setIfExists('before', $data ?? [], null);
        $this->setIfExists('count', $data ?? [], null);
        $this->setIfExists('count_less', $data ?? [], null);
        $this->setIfExists('count_more', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in
     *
     * @return mixed|null
     */
    public function getIn(): mixed
    {
        return $this->container['in'];
    }

    /**
     * Sets in
     *
     * @param mixed|null $in in
     *
     * @return $this
     */
    public function setIn(mixed $in): static
    {
        if (is_null($in)) {
            array_push($this->openAPINullablesSetToNull, 'in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['in'] = $in;

        return $this;
    }

    /**
     * Gets not_in
     *
     * @return mixed|null
     */
    public function getNotIn(): mixed
    {
        return $this->container['not_in'];
    }

    /**
     * Sets not_in
     *
     * @param mixed|null $not_in not_in
     *
     * @return $this
     */
    public function setNotIn(mixed $not_in): static
    {
        if (is_null($not_in)) {
            array_push($this->openAPINullablesSetToNull, 'not_in');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('not_in', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['not_in'] = $not_in;

        return $this;
    }

    /**
     * Gets is
     *
     * @return mixed|null
     */
    public function getIs(): mixed
    {
        return $this->container['is'];
    }

    /**
     * Sets is
     *
     * @param mixed|null $is is
     *
     * @return $this
     */
    public function setIs(mixed $is): static
    {
        if (is_null($is)) {
            array_push($this->openAPINullablesSetToNull, 'is');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is'] = $is;

        return $this;
    }

    /**
     * Gets is_days_ago
     *
     * @return mixed|null
     */
    public function getIsDaysAgo(): mixed
    {
        return $this->container['is_days_ago'];
    }

    /**
     * Sets is_days_ago
     *
     * @param mixed|null $is_days_ago is_days_ago
     *
     * @return $this
     */
    public function setIsDaysAgo(mixed $is_days_ago): static
    {
        if (is_null($is_days_ago)) {
            array_push($this->openAPINullablesSetToNull, 'is_days_ago');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_days_ago', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_days_ago'] = $is_days_ago;

        return $this;
    }

    /**
     * Gets is_days_in_future
     *
     * @return mixed|null
     */
    public function getIsDaysInFuture(): mixed
    {
        return $this->container['is_days_in_future'];
    }

    /**
     * Sets is_days_in_future
     *
     * @param mixed|null $is_days_in_future is_days_in_future
     *
     * @return $this
     */
    public function setIsDaysInFuture(mixed $is_days_in_future): static
    {
        if (is_null($is_days_in_future)) {
            array_push($this->openAPINullablesSetToNull, 'is_days_in_future');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_days_in_future', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_days_in_future'] = $is_days_in_future;

        return $this;
    }

    /**
     * Gets is_not
     *
     * @return mixed|null
     */
    public function getIsNot(): mixed
    {
        return $this->container['is_not'];
    }

    /**
     * Sets is_not
     *
     * @param mixed|null $is_not is_not
     *
     * @return $this
     */
    public function setIsNot(mixed $is_not): static
    {
        if (is_null($is_not)) {
            array_push($this->openAPINullablesSetToNull, 'is_not');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_not', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_not'] = $is_not;

        return $this;
    }

    /**
     * Gets has_value
     *
     * @return mixed|null
     */
    public function getHasValue(): mixed
    {
        return $this->container['has_value'];
    }

    /**
     * Sets has_value
     *
     * @param mixed|null $has_value has_value
     *
     * @return $this
     */
    public function setHasValue(mixed $has_value): static
    {
        if (is_null($has_value)) {
            array_push($this->openAPINullablesSetToNull, 'has_value');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_value', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_value'] = $has_value;

        return $this;
    }

    /**
     * Gets is_unknown
     *
     * @return mixed|null
     */
    public function getIsUnknown(): mixed
    {
        return $this->container['is_unknown'];
    }

    /**
     * Sets is_unknown
     *
     * @param mixed|null $is_unknown is_unknown
     *
     * @return $this
     */
    public function setIsUnknown(mixed $is_unknown): static
    {
        if (is_null($is_unknown)) {
            array_push($this->openAPINullablesSetToNull, 'is_unknown');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_unknown', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_unknown'] = $is_unknown;

        return $this;
    }

    /**
     * Gets contains
     *
     * @return mixed|null
     */
    public function getContains(): mixed
    {
        return $this->container['contains'];
    }

    /**
     * Sets contains
     *
     * @param mixed|null $contains contains
     *
     * @return $this
     */
    public function setContains(mixed $contains): static
    {
        if (is_null($contains)) {
            array_push($this->openAPINullablesSetToNull, 'contains');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contains', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['contains'] = $contains;

        return $this;
    }

    /**
     * Gets not_contain
     *
     * @return mixed|null
     */
    public function getNotContain(): mixed
    {
        return $this->container['not_contain'];
    }

    /**
     * Sets not_contain
     *
     * @param mixed|null $not_contain not_contain
     *
     * @return $this
     */
    public function setNotContain(mixed $not_contain): static
    {
        if (is_null($not_contain)) {
            array_push($this->openAPINullablesSetToNull, 'not_contain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('not_contain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['not_contain'] = $not_contain;

        return $this;
    }

    /**
     * Gets starts_with
     *
     * @return mixed|null
     */
    public function getStartsWith(): mixed
    {
        return $this->container['starts_with'];
    }

    /**
     * Sets starts_with
     *
     * @param mixed|null $starts_with starts_with
     *
     * @return $this
     */
    public function setStartsWith(mixed $starts_with): static
    {
        if (is_null($starts_with)) {
            array_push($this->openAPINullablesSetToNull, 'starts_with');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('starts_with', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['starts_with'] = $starts_with;

        return $this;
    }

    /**
     * Gets ends_with
     *
     * @return mixed|null
     */
    public function getEndsWith(): mixed
    {
        return $this->container['ends_with'];
    }

    /**
     * Sets ends_with
     *
     * @param mixed|null $ends_with ends_with
     *
     * @return $this
     */
    public function setEndsWith(mixed $ends_with): static
    {
        if (is_null($ends_with)) {
            array_push($this->openAPINullablesSetToNull, 'ends_with');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ends_with', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ends_with'] = $ends_with;

        return $this;
    }

    /**
     * Gets more_than
     *
     * @return mixed|null
     */
    public function getMoreThan(): mixed
    {
        return $this->container['more_than'];
    }

    /**
     * Sets more_than
     *
     * @param mixed|null $more_than more_than
     *
     * @return $this
     */
    public function setMoreThan(mixed $more_than): static
    {
        if (is_null($more_than)) {
            array_push($this->openAPINullablesSetToNull, 'more_than');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_than', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_than'] = $more_than;

        return $this;
    }

    /**
     * Gets less_than
     *
     * @return mixed|null
     */
    public function getLessThan(): mixed
    {
        return $this->container['less_than'];
    }

    /**
     * Sets less_than
     *
     * @param mixed|null $less_than less_than
     *
     * @return $this
     */
    public function setLessThan(mixed $less_than): static
    {
        if (is_null($less_than)) {
            array_push($this->openAPINullablesSetToNull, 'less_than');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('less_than', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['less_than'] = $less_than;

        return $this;
    }

    /**
     * Gets more_than_ago
     *
     * @return mixed|null
     */
    public function getMoreThanAgo(): mixed
    {
        return $this->container['more_than_ago'];
    }

    /**
     * Sets more_than_ago
     *
     * @param mixed|null $more_than_ago more_than_ago
     *
     * @return $this
     */
    public function setMoreThanAgo(mixed $more_than_ago): static
    {
        if (is_null($more_than_ago)) {
            array_push($this->openAPINullablesSetToNull, 'more_than_ago');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_than_ago', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_than_ago'] = $more_than_ago;

        return $this;
    }

    /**
     * Gets less_than_ago
     *
     * @return mixed|null
     */
    public function getLessThanAgo(): mixed
    {
        return $this->container['less_than_ago'];
    }

    /**
     * Sets less_than_ago
     *
     * @param mixed|null $less_than_ago less_than_ago
     *
     * @return $this
     */
    public function setLessThanAgo(mixed $less_than_ago): static
    {
        if (is_null($less_than_ago)) {
            array_push($this->openAPINullablesSetToNull, 'less_than_ago');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('less_than_ago', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['less_than_ago'] = $less_than_ago;

        return $this;
    }

    /**
     * Gets more_than_future
     *
     * @return mixed|null
     */
    public function getMoreThanFuture(): mixed
    {
        return $this->container['more_than_future'];
    }

    /**
     * Sets more_than_future
     *
     * @param mixed|null $more_than_future more_than_future
     *
     * @return $this
     */
    public function setMoreThanFuture(mixed $more_than_future): static
    {
        if (is_null($more_than_future)) {
            array_push($this->openAPINullablesSetToNull, 'more_than_future');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_than_future', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_than_future'] = $more_than_future;

        return $this;
    }

    /**
     * Gets less_than_future
     *
     * @return mixed|null
     */
    public function getLessThanFuture(): mixed
    {
        return $this->container['less_than_future'];
    }

    /**
     * Sets less_than_future
     *
     * @param mixed|null $less_than_future less_than_future
     *
     * @return $this
     */
    public function setLessThanFuture(mixed $less_than_future): static
    {
        if (is_null($less_than_future)) {
            array_push($this->openAPINullablesSetToNull, 'less_than_future');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('less_than_future', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['less_than_future'] = $less_than_future;

        return $this;
    }

    /**
     * Gets more_than_equal
     *
     * @return mixed|null
     */
    public function getMoreThanEqual(): mixed
    {
        return $this->container['more_than_equal'];
    }

    /**
     * Sets more_than_equal
     *
     * @param mixed|null $more_than_equal more_than_equal
     *
     * @return $this
     */
    public function setMoreThanEqual(mixed $more_than_equal): static
    {
        if (is_null($more_than_equal)) {
            array_push($this->openAPINullablesSetToNull, 'more_than_equal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('more_than_equal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['more_than_equal'] = $more_than_equal;

        return $this;
    }

    /**
     * Gets less_than_equal
     *
     * @return mixed|null
     */
    public function getLessThanEqual(): mixed
    {
        return $this->container['less_than_equal'];
    }

    /**
     * Sets less_than_equal
     *
     * @param mixed|null $less_than_equal less_than_equal
     *
     * @return $this
     */
    public function setLessThanEqual(mixed $less_than_equal): static
    {
        if (is_null($less_than_equal)) {
            array_push($this->openAPINullablesSetToNull, 'less_than_equal');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('less_than_equal', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['less_than_equal'] = $less_than_equal;

        return $this;
    }

    /**
     * Gets after
     *
     * @return mixed|null
     */
    public function getAfter(): mixed
    {
        return $this->container['after'];
    }

    /**
     * Sets after
     *
     * @param mixed|null $after after
     *
     * @return $this
     */
    public function setAfter(mixed $after): static
    {
        if (is_null($after)) {
            array_push($this->openAPINullablesSetToNull, 'after');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('after', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['after'] = $after;

        return $this;
    }

    /**
     * Gets before
     *
     * @return mixed|null
     */
    public function getBefore(): mixed
    {
        return $this->container['before'];
    }

    /**
     * Sets before
     *
     * @param mixed|null $before before
     *
     * @return $this
     */
    public function setBefore(mixed $before): static
    {
        if (is_null($before)) {
            array_push($this->openAPINullablesSetToNull, 'before');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('before', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['before'] = $before;

        return $this;
    }

    /**
     * Gets count
     *
     * @return mixed|null
     */
    public function getCount(): mixed
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param mixed|null $count count
     *
     * @return $this
     */
    public function setCount(mixed $count): static
    {
        if (is_null($count)) {
            array_push($this->openAPINullablesSetToNull, 'count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets count_less
     *
     * @return mixed|null
     */
    public function getCountLess(): mixed
    {
        return $this->container['count_less'];
    }

    /**
     * Sets count_less
     *
     * @param mixed|null $count_less count_less
     *
     * @return $this
     */
    public function setCountLess(mixed $count_less): static
    {
        if (is_null($count_less)) {
            array_push($this->openAPINullablesSetToNull, 'count_less');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count_less', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count_less'] = $count_less;

        return $this;
    }

    /**
     * Gets count_more
     *
     * @return mixed|null
     */
    public function getCountMore(): mixed
    {
        return $this->container['count_more'];
    }

    /**
     * Sets count_more
     *
     * @param mixed|null $count_more count_more
     *
     * @return $this
     */
    public function setCountMore(mixed $count_more): static
    {
        if (is_null($count_more)) {
            array_push($this->openAPINullablesSetToNull, 'count_more');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('count_more', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['count_more'] = $count_more;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


