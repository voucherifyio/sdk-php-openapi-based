<?php
/**
 * CustomerActivityData
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerActivityData Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerActivityData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerActivityData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer' => '\OpenAPI\Client\Model\CustomerActivityDataCustomer',
        'unconfirmed_customer' => '\OpenAPI\Client\Model\CustomerActivityDataUnconfirmedCustomer',
        'referrer' => '\OpenAPI\Client\Model\SimpleCustomer',
        'campaign' => '\OpenAPI\Client\Model\SimpleCampaign',
        'voucher' => '\OpenAPI\Client\Model\SimpleVoucher',
        'custom_event' => '\OpenAPI\Client\Model\CustomEvent',
        'redemption' => '\OpenAPI\Client\Model\CustomerActivityDataRedemption',
        'segment' => '\OpenAPI\Client\Model\SimpleSegment',
        'distribution' => 'object',
        'sent_at' => '\DateTime',
        'recovered_at' => '\DateTime',
        'failed_at' => '\DateTime',
        'holder' => '\OpenAPI\Client\Model\SimpleCustomer',
        'reward' => '\OpenAPI\Client\Model\SimpleRedemptionRewardResult',
        'referral_tier' => '\OpenAPI\Client\Model\SimpleReferralTier',
        'balance' => 'int',
        'customer_event' => 'object',
        'loyalty_tier' => '\OpenAPI\Client\Model\LoyaltyTier',
        'earning_rule' => '\OpenAPI\Client\Model\EarningRule',
        'order' => '\OpenAPI\Client\Model\CustomerActivityDataOrder',
        'event' => 'object',
        'transaction' => '\OpenAPI\Client\Model\VoucherTransaction',
        'source_voucher' => '\OpenAPI\Client\Model\SimpleVoucher',
        'destination_voucher' => '\OpenAPI\Client\Model\SimpleVoucher',
        'points' => 'int',
        'buckets' => '\OpenAPI\Client\Model\VoucherTransaction[]',
        'publication' => 'object',
        'validation' => '\OpenAPI\Client\Model\ValidationEntity',
        'promotion_tier' => '\OpenAPI\Client\Model\SimplePromotionTier',
        'redemption_rollback' => '\OpenAPI\Client\Model\SimpleRedemption',
        'consents' => '\OpenAPI\Client\Model\SimpleConsent[]',
        'reward_redemption' => 'object',
        'reward_assignment' => '\OpenAPI\Client\Model\RewardAssignment',
        'source' => 'string',
        'loyalty' => 'object',
        'created_at' => '\DateTime',
        'loyalty_tier_from' => '\OpenAPI\Client\Model\LoyaltyTier',
        'loyalty_tier_to' => '\OpenAPI\Client\Model\LoyaltyTier',
        'expiration_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer' => null,
        'unconfirmed_customer' => null,
        'referrer' => null,
        'campaign' => null,
        'voucher' => null,
        'custom_event' => null,
        'redemption' => null,
        'segment' => null,
        'distribution' => null,
        'sent_at' => 'date-time',
        'recovered_at' => 'date-time',
        'failed_at' => 'date-time',
        'holder' => null,
        'reward' => null,
        'referral_tier' => null,
        'balance' => null,
        'customer_event' => null,
        'loyalty_tier' => null,
        'earning_rule' => null,
        'order' => null,
        'event' => null,
        'transaction' => null,
        'source_voucher' => null,
        'destination_voucher' => null,
        'points' => null,
        'buckets' => null,
        'publication' => null,
        'validation' => null,
        'promotion_tier' => null,
        'redemption_rollback' => null,
        'consents' => null,
        'reward_redemption' => null,
        'reward_assignment' => null,
        'source' => null,
        'loyalty' => null,
        'created_at' => 'date-time',
        'loyalty_tier_from' => null,
        'loyalty_tier_to' => null,
        'expiration_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'customer' => false,
		'unconfirmed_customer' => false,
		'referrer' => false,
		'campaign' => false,
		'voucher' => false,
		'custom_event' => false,
		'redemption' => false,
		'segment' => false,
		'distribution' => false,
		'sent_at' => false,
		'recovered_at' => false,
		'failed_at' => false,
		'holder' => false,
		'reward' => false,
		'referral_tier' => false,
		'balance' => false,
		'customer_event' => false,
		'loyalty_tier' => false,
		'earning_rule' => false,
		'order' => false,
		'event' => false,
		'transaction' => false,
		'source_voucher' => false,
		'destination_voucher' => false,
		'points' => false,
		'buckets' => false,
		'publication' => false,
		'validation' => false,
		'promotion_tier' => false,
		'redemption_rollback' => false,
		'consents' => false,
		'reward_redemption' => false,
		'reward_assignment' => false,
		'source' => false,
		'loyalty' => false,
		'created_at' => false,
		'loyalty_tier_from' => false,
		'loyalty_tier_to' => false,
		'expiration_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer' => 'customer',
        'unconfirmed_customer' => 'unconfirmed_customer',
        'referrer' => 'referrer',
        'campaign' => 'campaign',
        'voucher' => 'voucher',
        'custom_event' => 'custom_event',
        'redemption' => 'redemption',
        'segment' => 'segment',
        'distribution' => 'distribution',
        'sent_at' => 'sent_at',
        'recovered_at' => 'recovered_at',
        'failed_at' => 'failed_at',
        'holder' => 'holder',
        'reward' => 'reward',
        'referral_tier' => 'referral_tier',
        'balance' => 'balance',
        'customer_event' => 'customer_event',
        'loyalty_tier' => 'loyalty_tier',
        'earning_rule' => 'earning_rule',
        'order' => 'order',
        'event' => 'event',
        'transaction' => 'transaction',
        'source_voucher' => 'source_voucher',
        'destination_voucher' => 'destination_voucher',
        'points' => 'points',
        'buckets' => 'buckets',
        'publication' => 'publication',
        'validation' => 'validation',
        'promotion_tier' => 'promotion_tier',
        'redemption_rollback' => 'redemption_rollback',
        'consents' => 'consents',
        'reward_redemption' => 'reward_redemption',
        'reward_assignment' => 'reward_assignment',
        'source' => 'source',
        'loyalty' => 'loyalty',
        'created_at' => 'created_at',
        'loyalty_tier_from' => 'loyalty_tier_from',
        'loyalty_tier_to' => 'loyalty_tier_to',
        'expiration_date' => 'expiration_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer' => 'setCustomer',
        'unconfirmed_customer' => 'setUnconfirmedCustomer',
        'referrer' => 'setReferrer',
        'campaign' => 'setCampaign',
        'voucher' => 'setVoucher',
        'custom_event' => 'setCustomEvent',
        'redemption' => 'setRedemption',
        'segment' => 'setSegment',
        'distribution' => 'setDistribution',
        'sent_at' => 'setSentAt',
        'recovered_at' => 'setRecoveredAt',
        'failed_at' => 'setFailedAt',
        'holder' => 'setHolder',
        'reward' => 'setReward',
        'referral_tier' => 'setReferralTier',
        'balance' => 'setBalance',
        'customer_event' => 'setCustomerEvent',
        'loyalty_tier' => 'setLoyaltyTier',
        'earning_rule' => 'setEarningRule',
        'order' => 'setOrder',
        'event' => 'setEvent',
        'transaction' => 'setTransaction',
        'source_voucher' => 'setSourceVoucher',
        'destination_voucher' => 'setDestinationVoucher',
        'points' => 'setPoints',
        'buckets' => 'setBuckets',
        'publication' => 'setPublication',
        'validation' => 'setValidation',
        'promotion_tier' => 'setPromotionTier',
        'redemption_rollback' => 'setRedemptionRollback',
        'consents' => 'setConsents',
        'reward_redemption' => 'setRewardRedemption',
        'reward_assignment' => 'setRewardAssignment',
        'source' => 'setSource',
        'loyalty' => 'setLoyalty',
        'created_at' => 'setCreatedAt',
        'loyalty_tier_from' => 'setLoyaltyTierFrom',
        'loyalty_tier_to' => 'setLoyaltyTierTo',
        'expiration_date' => 'setExpirationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer' => 'getCustomer',
        'unconfirmed_customer' => 'getUnconfirmedCustomer',
        'referrer' => 'getReferrer',
        'campaign' => 'getCampaign',
        'voucher' => 'getVoucher',
        'custom_event' => 'getCustomEvent',
        'redemption' => 'getRedemption',
        'segment' => 'getSegment',
        'distribution' => 'getDistribution',
        'sent_at' => 'getSentAt',
        'recovered_at' => 'getRecoveredAt',
        'failed_at' => 'getFailedAt',
        'holder' => 'getHolder',
        'reward' => 'getReward',
        'referral_tier' => 'getReferralTier',
        'balance' => 'getBalance',
        'customer_event' => 'getCustomerEvent',
        'loyalty_tier' => 'getLoyaltyTier',
        'earning_rule' => 'getEarningRule',
        'order' => 'getOrder',
        'event' => 'getEvent',
        'transaction' => 'getTransaction',
        'source_voucher' => 'getSourceVoucher',
        'destination_voucher' => 'getDestinationVoucher',
        'points' => 'getPoints',
        'buckets' => 'getBuckets',
        'publication' => 'getPublication',
        'validation' => 'getValidation',
        'promotion_tier' => 'getPromotionTier',
        'redemption_rollback' => 'getRedemptionRollback',
        'consents' => 'getConsents',
        'reward_redemption' => 'getRewardRedemption',
        'reward_assignment' => 'getRewardAssignment',
        'source' => 'getSource',
        'loyalty' => 'getLoyalty',
        'created_at' => 'getCreatedAt',
        'loyalty_tier_from' => 'getLoyaltyTierFrom',
        'loyalty_tier_to' => 'getLoyaltyTierTo',
        'expiration_date' => 'getExpirationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('unconfirmed_customer', $data ?? [], null);
        $this->setIfExists('referrer', $data ?? [], null);
        $this->setIfExists('campaign', $data ?? [], null);
        $this->setIfExists('voucher', $data ?? [], null);
        $this->setIfExists('custom_event', $data ?? [], null);
        $this->setIfExists('redemption', $data ?? [], null);
        $this->setIfExists('segment', $data ?? [], null);
        $this->setIfExists('distribution', $data ?? [], null);
        $this->setIfExists('sent_at', $data ?? [], null);
        $this->setIfExists('recovered_at', $data ?? [], null);
        $this->setIfExists('failed_at', $data ?? [], null);
        $this->setIfExists('holder', $data ?? [], null);
        $this->setIfExists('reward', $data ?? [], null);
        $this->setIfExists('referral_tier', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('customer_event', $data ?? [], null);
        $this->setIfExists('loyalty_tier', $data ?? [], null);
        $this->setIfExists('earning_rule', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('event', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('source_voucher', $data ?? [], null);
        $this->setIfExists('destination_voucher', $data ?? [], null);
        $this->setIfExists('points', $data ?? [], null);
        $this->setIfExists('buckets', $data ?? [], null);
        $this->setIfExists('publication', $data ?? [], null);
        $this->setIfExists('validation', $data ?? [], null);
        $this->setIfExists('promotion_tier', $data ?? [], null);
        $this->setIfExists('redemption_rollback', $data ?? [], null);
        $this->setIfExists('consents', $data ?? [], null);
        $this->setIfExists('reward_redemption', $data ?? [], null);
        $this->setIfExists('reward_assignment', $data ?? [], null);
        $this->setIfExists('source', $data ?? [], null);
        $this->setIfExists('loyalty', $data ?? [], null);
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('loyalty_tier_from', $data ?? [], null);
        $this->setIfExists('loyalty_tier_to', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets unconfirmed_customer
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataUnconfirmedCustomer|null
     */
    public function getUnconfirmedCustomer()
    {
        return $this->container['unconfirmed_customer'];
    }

    /**
     * Sets unconfirmed_customer
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataUnconfirmedCustomer|null $unconfirmed_customer unconfirmed_customer
     *
     * @return self
     */
    public function setUnconfirmedCustomer($unconfirmed_customer)
    {
        if (is_null($unconfirmed_customer)) {
            throw new \InvalidArgumentException('non-nullable unconfirmed_customer cannot be null');
        }
        $this->container['unconfirmed_customer'] = $unconfirmed_customer;

        return $this;
    }

    /**
     * Gets referrer
     *
     * @return \OpenAPI\Client\Model\SimpleCustomer|null
     */
    public function getReferrer()
    {
        return $this->container['referrer'];
    }

    /**
     * Sets referrer
     *
     * @param \OpenAPI\Client\Model\SimpleCustomer|null $referrer referrer
     *
     * @return self
     */
    public function setReferrer($referrer)
    {
        if (is_null($referrer)) {
            throw new \InvalidArgumentException('non-nullable referrer cannot be null');
        }
        $this->container['referrer'] = $referrer;

        return $this;
    }

    /**
     * Gets campaign
     *
     * @return \OpenAPI\Client\Model\SimpleCampaign|null
     */
    public function getCampaign()
    {
        return $this->container['campaign'];
    }

    /**
     * Sets campaign
     *
     * @param \OpenAPI\Client\Model\SimpleCampaign|null $campaign campaign
     *
     * @return self
     */
    public function setCampaign($campaign)
    {
        if (is_null($campaign)) {
            throw new \InvalidArgumentException('non-nullable campaign cannot be null');
        }
        $this->container['campaign'] = $campaign;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return \OpenAPI\Client\Model\SimpleVoucher|null
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param \OpenAPI\Client\Model\SimpleVoucher|null $voucher voucher
     *
     * @return self
     */
    public function setVoucher($voucher)
    {
        if (is_null($voucher)) {
            throw new \InvalidArgumentException('non-nullable voucher cannot be null');
        }
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets custom_event
     *
     * @return \OpenAPI\Client\Model\CustomEvent|null
     */
    public function getCustomEvent()
    {
        return $this->container['custom_event'];
    }

    /**
     * Sets custom_event
     *
     * @param \OpenAPI\Client\Model\CustomEvent|null $custom_event custom_event
     *
     * @return self
     */
    public function setCustomEvent($custom_event)
    {
        if (is_null($custom_event)) {
            throw new \InvalidArgumentException('non-nullable custom_event cannot be null');
        }
        $this->container['custom_event'] = $custom_event;

        return $this;
    }

    /**
     * Gets redemption
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemption|null
     */
    public function getRedemption()
    {
        return $this->container['redemption'];
    }

    /**
     * Sets redemption
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemption|null $redemption redemption
     *
     * @return self
     */
    public function setRedemption($redemption)
    {
        if (is_null($redemption)) {
            throw new \InvalidArgumentException('non-nullable redemption cannot be null');
        }
        $this->container['redemption'] = $redemption;

        return $this;
    }

    /**
     * Gets segment
     *
     * @return \OpenAPI\Client\Model\SimpleSegment|null
     */
    public function getSegment()
    {
        return $this->container['segment'];
    }

    /**
     * Sets segment
     *
     * @param \OpenAPI\Client\Model\SimpleSegment|null $segment segment
     *
     * @return self
     */
    public function setSegment($segment)
    {
        if (is_null($segment)) {
            throw new \InvalidArgumentException('non-nullable segment cannot be null');
        }
        $this->container['segment'] = $segment;

        return $this;
    }

    /**
     * Gets distribution
     *
     * @return object|null
     */
    public function getDistribution()
    {
        return $this->container['distribution'];
    }

    /**
     * Sets distribution
     *
     * @param object|null $distribution distribution
     *
     * @return self
     */
    public function setDistribution($distribution)
    {
        if (is_null($distribution)) {
            throw new \InvalidArgumentException('non-nullable distribution cannot be null');
        }
        $this->container['distribution'] = $distribution;

        return $this;
    }

    /**
     * Gets sent_at
     *
     * @return \DateTime|null
     */
    public function getSentAt()
    {
        return $this->container['sent_at'];
    }

    /**
     * Sets sent_at
     *
     * @param \DateTime|null $sent_at Timestamp representing the date and time when the distribution was sent in ISO 8601 format.
     *
     * @return self
     */
    public function setSentAt($sent_at)
    {
        if (is_null($sent_at)) {
            throw new \InvalidArgumentException('non-nullable sent_at cannot be null');
        }
        $this->container['sent_at'] = $sent_at;

        return $this;
    }

    /**
     * Gets recovered_at
     *
     * @return \DateTime|null
     */
    public function getRecoveredAt()
    {
        return $this->container['recovered_at'];
    }

    /**
     * Sets recovered_at
     *
     * @param \DateTime|null $recovered_at Timestamp representing the date and time when the distribution was recovered in ISO 8601 format.
     *
     * @return self
     */
    public function setRecoveredAt($recovered_at)
    {
        if (is_null($recovered_at)) {
            throw new \InvalidArgumentException('non-nullable recovered_at cannot be null');
        }
        $this->container['recovered_at'] = $recovered_at;

        return $this;
    }

    /**
     * Gets failed_at
     *
     * @return \DateTime|null
     */
    public function getFailedAt()
    {
        return $this->container['failed_at'];
    }

    /**
     * Sets failed_at
     *
     * @param \DateTime|null $failed_at Timestamp representing the date and time when the distribution failed in ISO 8601 format.
     *
     * @return self
     */
    public function setFailedAt($failed_at)
    {
        if (is_null($failed_at)) {
            throw new \InvalidArgumentException('non-nullable failed_at cannot be null');
        }
        $this->container['failed_at'] = $failed_at;

        return $this;
    }

    /**
     * Gets holder
     *
     * @return \OpenAPI\Client\Model\SimpleCustomer|null
     */
    public function getHolder()
    {
        return $this->container['holder'];
    }

    /**
     * Sets holder
     *
     * @param \OpenAPI\Client\Model\SimpleCustomer|null $holder holder
     *
     * @return self
     */
    public function setHolder($holder)
    {
        if (is_null($holder)) {
            throw new \InvalidArgumentException('non-nullable holder cannot be null');
        }
        $this->container['holder'] = $holder;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return \OpenAPI\Client\Model\SimpleRedemptionRewardResult|null
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param \OpenAPI\Client\Model\SimpleRedemptionRewardResult|null $reward reward
     *
     * @return self
     */
    public function setReward($reward)
    {
        if (is_null($reward)) {
            throw new \InvalidArgumentException('non-nullable reward cannot be null');
        }
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets referral_tier
     *
     * @return \OpenAPI\Client\Model\SimpleReferralTier|null
     */
    public function getReferralTier()
    {
        return $this->container['referral_tier'];
    }

    /**
     * Sets referral_tier
     *
     * @param \OpenAPI\Client\Model\SimpleReferralTier|null $referral_tier referral_tier
     *
     * @return self
     */
    public function setReferralTier($referral_tier)
    {
        if (is_null($referral_tier)) {
            throw new \InvalidArgumentException('non-nullable referral_tier cannot be null');
        }
        $this->container['referral_tier'] = $referral_tier;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return int|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param int|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets customer_event
     *
     * @return object|null
     */
    public function getCustomerEvent()
    {
        return $this->container['customer_event'];
    }

    /**
     * Sets customer_event
     *
     * @param object|null $customer_event customer_event
     *
     * @return self
     */
    public function setCustomerEvent($customer_event)
    {
        if (is_null($customer_event)) {
            throw new \InvalidArgumentException('non-nullable customer_event cannot be null');
        }
        $this->container['customer_event'] = $customer_event;

        return $this;
    }

    /**
     * Gets loyalty_tier
     *
     * @return \OpenAPI\Client\Model\LoyaltyTier|null
     */
    public function getLoyaltyTier()
    {
        return $this->container['loyalty_tier'];
    }

    /**
     * Sets loyalty_tier
     *
     * @param \OpenAPI\Client\Model\LoyaltyTier|null $loyalty_tier loyalty_tier
     *
     * @return self
     */
    public function setLoyaltyTier($loyalty_tier)
    {
        if (is_null($loyalty_tier)) {
            throw new \InvalidArgumentException('non-nullable loyalty_tier cannot be null');
        }
        $this->container['loyalty_tier'] = $loyalty_tier;

        return $this;
    }

    /**
     * Gets earning_rule
     *
     * @return \OpenAPI\Client\Model\EarningRule|null
     */
    public function getEarningRule()
    {
        return $this->container['earning_rule'];
    }

    /**
     * Sets earning_rule
     *
     * @param \OpenAPI\Client\Model\EarningRule|null $earning_rule earning_rule
     *
     * @return self
     */
    public function setEarningRule($earning_rule)
    {
        if (is_null($earning_rule)) {
            throw new \InvalidArgumentException('non-nullable earning_rule cannot be null');
        }
        $this->container['earning_rule'] = $earning_rule;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets event
     *
     * @return object|null
     */
    public function getEvent()
    {
        return $this->container['event'];
    }

    /**
     * Sets event
     *
     * @param object|null $event event
     *
     * @return self
     */
    public function setEvent($event)
    {
        if (is_null($event)) {
            throw new \InvalidArgumentException('non-nullable event cannot be null');
        }
        $this->container['event'] = $event;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \OpenAPI\Client\Model\VoucherTransaction|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \OpenAPI\Client\Model\VoucherTransaction|null $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets source_voucher
     *
     * @return \OpenAPI\Client\Model\SimpleVoucher|null
     */
    public function getSourceVoucher()
    {
        return $this->container['source_voucher'];
    }

    /**
     * Sets source_voucher
     *
     * @param \OpenAPI\Client\Model\SimpleVoucher|null $source_voucher source_voucher
     *
     * @return self
     */
    public function setSourceVoucher($source_voucher)
    {
        if (is_null($source_voucher)) {
            throw new \InvalidArgumentException('non-nullable source_voucher cannot be null');
        }
        $this->container['source_voucher'] = $source_voucher;

        return $this;
    }

    /**
     * Gets destination_voucher
     *
     * @return \OpenAPI\Client\Model\SimpleVoucher|null
     */
    public function getDestinationVoucher()
    {
        return $this->container['destination_voucher'];
    }

    /**
     * Sets destination_voucher
     *
     * @param \OpenAPI\Client\Model\SimpleVoucher|null $destination_voucher destination_voucher
     *
     * @return self
     */
    public function setDestinationVoucher($destination_voucher)
    {
        if (is_null($destination_voucher)) {
            throw new \InvalidArgumentException('non-nullable destination_voucher cannot be null');
        }
        $this->container['destination_voucher'] = $destination_voucher;

        return $this;
    }

    /**
     * Gets points
     *
     * @return int|null
     */
    public function getPoints()
    {
        return $this->container['points'];
    }

    /**
     * Sets points
     *
     * @param int|null $points points
     *
     * @return self
     */
    public function setPoints($points)
    {
        if (is_null($points)) {
            throw new \InvalidArgumentException('non-nullable points cannot be null');
        }
        $this->container['points'] = $points;

        return $this;
    }

    /**
     * Gets buckets
     *
     * @return \OpenAPI\Client\Model\VoucherTransaction[]|null
     */
    public function getBuckets()
    {
        return $this->container['buckets'];
    }

    /**
     * Sets buckets
     *
     * @param \OpenAPI\Client\Model\VoucherTransaction[]|null $buckets buckets
     *
     * @return self
     */
    public function setBuckets($buckets)
    {
        if (is_null($buckets)) {
            throw new \InvalidArgumentException('non-nullable buckets cannot be null');
        }
        $this->container['buckets'] = $buckets;

        return $this;
    }

    /**
     * Gets publication
     *
     * @return object|null
     */
    public function getPublication()
    {
        return $this->container['publication'];
    }

    /**
     * Sets publication
     *
     * @param object|null $publication publication
     *
     * @return self
     */
    public function setPublication($publication)
    {
        if (is_null($publication)) {
            throw new \InvalidArgumentException('non-nullable publication cannot be null');
        }
        $this->container['publication'] = $publication;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return \OpenAPI\Client\Model\ValidationEntity|null
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param \OpenAPI\Client\Model\ValidationEntity|null $validation validation
     *
     * @return self
     */
    public function setValidation($validation)
    {
        if (is_null($validation)) {
            throw new \InvalidArgumentException('non-nullable validation cannot be null');
        }
        $this->container['validation'] = $validation;

        return $this;
    }

    /**
     * Gets promotion_tier
     *
     * @return \OpenAPI\Client\Model\SimplePromotionTier|null
     */
    public function getPromotionTier()
    {
        return $this->container['promotion_tier'];
    }

    /**
     * Sets promotion_tier
     *
     * @param \OpenAPI\Client\Model\SimplePromotionTier|null $promotion_tier promotion_tier
     *
     * @return self
     */
    public function setPromotionTier($promotion_tier)
    {
        if (is_null($promotion_tier)) {
            throw new \InvalidArgumentException('non-nullable promotion_tier cannot be null');
        }
        $this->container['promotion_tier'] = $promotion_tier;

        return $this;
    }

    /**
     * Gets redemption_rollback
     *
     * @return \OpenAPI\Client\Model\SimpleRedemption|null
     */
    public function getRedemptionRollback()
    {
        return $this->container['redemption_rollback'];
    }

    /**
     * Sets redemption_rollback
     *
     * @param \OpenAPI\Client\Model\SimpleRedemption|null $redemption_rollback redemption_rollback
     *
     * @return self
     */
    public function setRedemptionRollback($redemption_rollback)
    {
        if (is_null($redemption_rollback)) {
            throw new \InvalidArgumentException('non-nullable redemption_rollback cannot be null');
        }
        $this->container['redemption_rollback'] = $redemption_rollback;

        return $this;
    }

    /**
     * Gets consents
     *
     * @return \OpenAPI\Client\Model\SimpleConsent[]|null
     */
    public function getConsents()
    {
        return $this->container['consents'];
    }

    /**
     * Sets consents
     *
     * @param \OpenAPI\Client\Model\SimpleConsent[]|null $consents consents
     *
     * @return self
     */
    public function setConsents($consents)
    {
        if (is_null($consents)) {
            throw new \InvalidArgumentException('non-nullable consents cannot be null');
        }
        $this->container['consents'] = $consents;

        return $this;
    }

    /**
     * Gets reward_redemption
     *
     * @return object|null
     */
    public function getRewardRedemption()
    {
        return $this->container['reward_redemption'];
    }

    /**
     * Sets reward_redemption
     *
     * @param object|null $reward_redemption reward_redemption
     *
     * @return self
     */
    public function setRewardRedemption($reward_redemption)
    {
        if (is_null($reward_redemption)) {
            throw new \InvalidArgumentException('non-nullable reward_redemption cannot be null');
        }
        $this->container['reward_redemption'] = $reward_redemption;

        return $this;
    }

    /**
     * Gets reward_assignment
     *
     * @return \OpenAPI\Client\Model\RewardAssignment|null
     */
    public function getRewardAssignment()
    {
        return $this->container['reward_assignment'];
    }

    /**
     * Sets reward_assignment
     *
     * @param \OpenAPI\Client\Model\RewardAssignment|null $reward_assignment reward_assignment
     *
     * @return self
     */
    public function setRewardAssignment($reward_assignment)
    {
        if (is_null($reward_assignment)) {
            throw new \InvalidArgumentException('non-nullable reward_assignment cannot be null');
        }
        $this->container['reward_assignment'] = $reward_assignment;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string|null
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string|null $source source
     *
     * @return self
     */
    public function setSource($source)
    {
        if (is_null($source)) {
            throw new \InvalidArgumentException('non-nullable source cannot be null');
        }
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets loyalty
     *
     * @return object|null
     */
    public function getLoyalty()
    {
        return $this->container['loyalty'];
    }

    /**
     * Sets loyalty
     *
     * @param object|null $loyalty loyalty
     *
     * @return self
     */
    public function setLoyalty($loyalty)
    {
        if (is_null($loyalty)) {
            throw new \InvalidArgumentException('non-nullable loyalty cannot be null');
        }
        $this->container['loyalty'] = $loyalty;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            throw new \InvalidArgumentException('non-nullable created_at cannot be null');
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets loyalty_tier_from
     *
     * @return \OpenAPI\Client\Model\LoyaltyTier|null
     */
    public function getLoyaltyTierFrom()
    {
        return $this->container['loyalty_tier_from'];
    }

    /**
     * Sets loyalty_tier_from
     *
     * @param \OpenAPI\Client\Model\LoyaltyTier|null $loyalty_tier_from loyalty_tier_from
     *
     * @return self
     */
    public function setLoyaltyTierFrom($loyalty_tier_from)
    {
        if (is_null($loyalty_tier_from)) {
            throw new \InvalidArgumentException('non-nullable loyalty_tier_from cannot be null');
        }
        $this->container['loyalty_tier_from'] = $loyalty_tier_from;

        return $this;
    }

    /**
     * Gets loyalty_tier_to
     *
     * @return \OpenAPI\Client\Model\LoyaltyTier|null
     */
    public function getLoyaltyTierTo()
    {
        return $this->container['loyalty_tier_to'];
    }

    /**
     * Sets loyalty_tier_to
     *
     * @param \OpenAPI\Client\Model\LoyaltyTier|null $loyalty_tier_to loyalty_tier_to
     *
     * @return self
     */
    public function setLoyaltyTierTo($loyalty_tier_to)
    {
        if (is_null($loyalty_tier_to)) {
            throw new \InvalidArgumentException('non-nullable loyalty_tier_to cannot be null');
        }
        $this->container['loyalty_tier_to'] = $loyalty_tier_to;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date expiration_date
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


