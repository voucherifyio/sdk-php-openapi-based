<?php
/**
 * CustomerActivityDataRedemption
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Voucherify API
 *
 * Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.
 *
 * The version of the OpenAPI document: v2018-08-01
 * Contact: support@voucherify.io
 * @generated Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.0.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomerActivityDataRedemption Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomerActivityDataRedemption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomerActivityDataRedemption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'created_at' => '\DateTime',
        'tracking_id' => 'string',
        'metadata' => 'object',
        'channel_type' => 'string',
        'channel_id' => 'string',
        'failure_code' => 'string',
        'failure_message' => 'string',
        'order' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionOrder',
        'previous_order' => '\OpenAPI\Client\Model\OrderCalculated',
        'reward' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionReward',
        'amount' => 'int',
        'reason' => 'string',
        'result' => 'string',
        'status' => 'string',
        'related_redemptions' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionRelatedRedemptions',
        'parent_redemption_id' => 'string',
        'redemption' => 'string',
        'customer' => '\OpenAPI\Client\Model\SimpleCustomer',
        'customer_id' => 'string',
        'related_object_type' => 'string',
        'related_object_id' => 'string',
        'related_object_parent_id' => 'string',
        'campaign_name' => 'string',
        'voucher' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionVoucher',
        'promotion_tier' => '\OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTier',
        'date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'created_at' => 'date-time',
        'tracking_id' => null,
        'metadata' => null,
        'channel_type' => null,
        'channel_id' => null,
        'failure_code' => null,
        'failure_message' => null,
        'order' => null,
        'previous_order' => null,
        'reward' => null,
        'amount' => null,
        'reason' => null,
        'result' => null,
        'status' => null,
        'related_redemptions' => null,
        'parent_redemption_id' => null,
        'redemption' => null,
        'customer' => null,
        'customer_id' => null,
        'related_object_type' => null,
        'related_object_id' => null,
        'related_object_parent_id' => null,
        'campaign_name' => null,
        'voucher' => null,
        'promotion_tier' => null,
        'date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
		'object' => true,
		'created_at' => true,
		'tracking_id' => true,
		'metadata' => true,
		'channel_type' => true,
		'channel_id' => true,
		'failure_code' => true,
		'failure_message' => true,
		'order' => true,
		'previous_order' => false,
		'reward' => true,
		'amount' => true,
		'reason' => true,
		'result' => true,
		'status' => true,
		'related_redemptions' => true,
		'parent_redemption_id' => true,
		'redemption' => true,
		'customer' => false,
		'customer_id' => true,
		'related_object_type' => true,
		'related_object_id' => true,
		'related_object_parent_id' => true,
		'campaign_name' => true,
		'voucher' => true,
		'promotion_tier' => true,
		'date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'created_at' => 'created_at',
        'tracking_id' => 'tracking_id',
        'metadata' => 'metadata',
        'channel_type' => 'channel_type',
        'channel_id' => 'channel_id',
        'failure_code' => 'failure_code',
        'failure_message' => 'failure_message',
        'order' => 'order',
        'previous_order' => 'previous_order',
        'reward' => 'reward',
        'amount' => 'amount',
        'reason' => 'reason',
        'result' => 'result',
        'status' => 'status',
        'related_redemptions' => 'related_redemptions',
        'parent_redemption_id' => 'parent_redemption_id',
        'redemption' => 'redemption',
        'customer' => 'customer',
        'customer_id' => 'customer_id',
        'related_object_type' => 'related_object_type',
        'related_object_id' => 'related_object_id',
        'related_object_parent_id' => 'related_object_parent_id',
        'campaign_name' => 'campaign_name',
        'voucher' => 'voucher',
        'promotion_tier' => 'promotion_tier',
        'date' => 'date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'created_at' => 'setCreatedAt',
        'tracking_id' => 'setTrackingId',
        'metadata' => 'setMetadata',
        'channel_type' => 'setChannelType',
        'channel_id' => 'setChannelId',
        'failure_code' => 'setFailureCode',
        'failure_message' => 'setFailureMessage',
        'order' => 'setOrder',
        'previous_order' => 'setPreviousOrder',
        'reward' => 'setReward',
        'amount' => 'setAmount',
        'reason' => 'setReason',
        'result' => 'setResult',
        'status' => 'setStatus',
        'related_redemptions' => 'setRelatedRedemptions',
        'parent_redemption_id' => 'setParentRedemptionId',
        'redemption' => 'setRedemption',
        'customer' => 'setCustomer',
        'customer_id' => 'setCustomerId',
        'related_object_type' => 'setRelatedObjectType',
        'related_object_id' => 'setRelatedObjectId',
        'related_object_parent_id' => 'setRelatedObjectParentId',
        'campaign_name' => 'setCampaignName',
        'voucher' => 'setVoucher',
        'promotion_tier' => 'setPromotionTier',
        'date' => 'setDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'created_at' => 'getCreatedAt',
        'tracking_id' => 'getTrackingId',
        'metadata' => 'getMetadata',
        'channel_type' => 'getChannelType',
        'channel_id' => 'getChannelId',
        'failure_code' => 'getFailureCode',
        'failure_message' => 'getFailureMessage',
        'order' => 'getOrder',
        'previous_order' => 'getPreviousOrder',
        'reward' => 'getReward',
        'amount' => 'getAmount',
        'reason' => 'getReason',
        'result' => 'getResult',
        'status' => 'getStatus',
        'related_redemptions' => 'getRelatedRedemptions',
        'parent_redemption_id' => 'getParentRedemptionId',
        'redemption' => 'getRedemption',
        'customer' => 'getCustomer',
        'customer_id' => 'getCustomerId',
        'related_object_type' => 'getRelatedObjectType',
        'related_object_id' => 'getRelatedObjectId',
        'related_object_parent_id' => 'getRelatedObjectParentId',
        'campaign_name' => 'getCampaignName',
        'voucher' => 'getVoucher',
        'promotion_tier' => 'getPromotionTier',
        'date' => 'getDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNEL_TYPE_USER = 'USER';
    public const CHANNEL_TYPE_API = 'API';
    public const RESULT_SUCCESS = 'SUCCESS';
    public const RESULT_FAILURE = 'FAILURE';
    public const STATUS_SUCCEEDED = 'SUCCEEDED';
    public const STATUS_FAILED = 'FAILED';
    public const RELATED_OBJECT_TYPE_VOUCHER = 'voucher';
    public const RELATED_OBJECT_TYPE_PROMOTION_TIER = 'promotion_tier';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelTypeAllowableValues()
    {
        return [
            self::CHANNEL_TYPE_USER,
            self::CHANNEL_TYPE_API,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResultAllowableValues()
    {
        return [
            self::RESULT_SUCCESS,
            self::RESULT_FAILURE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_SUCCEEDED,
            self::STATUS_FAILED,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRelatedObjectTypeAllowableValues()
    {
        return [
            self::RELATED_OBJECT_TYPE_VOUCHER,
            self::RELATED_OBJECT_TYPE_PROMOTION_TIER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('object', $data ?? [], 'redemption');
        $this->setIfExists('created_at', $data ?? [], null);
        $this->setIfExists('tracking_id', $data ?? [], null);
        $this->setIfExists('metadata', $data ?? [], null);
        $this->setIfExists('channel_type', $data ?? [], null);
        $this->setIfExists('channel_id', $data ?? [], null);
        $this->setIfExists('failure_code', $data ?? [], null);
        $this->setIfExists('failure_message', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('previous_order', $data ?? [], null);
        $this->setIfExists('reward', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('related_redemptions', $data ?? [], null);
        $this->setIfExists('parent_redemption_id', $data ?? [], null);
        $this->setIfExists('redemption', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customer_id', $data ?? [], null);
        $this->setIfExists('related_object_type', $data ?? [], null);
        $this->setIfExists('related_object_id', $data ?? [], null);
        $this->setIfExists('related_object_parent_id', $data ?? [], null);
        $this->setIfExists('campaign_name', $data ?? [], null);
        $this->setIfExists('voucher', $data ?? [], null);
        $this->setIfExists('promotion_tier', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!is_null($this->container['channel_type']) && !in_array($this->container['channel_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel_type', must be one of '%s'",
                $this->container['channel_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($this->container['result']) && !in_array($this->container['result'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'result', must be one of '%s'",
                $this->container['result'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getRelatedObjectTypeAllowableValues();
        if (!is_null($this->container['related_object_type']) && !in_array($this->container['related_object_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'related_object_type', must be one of '%s'",
                $this->container['related_object_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Unique redemption ID.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object The type of the object represented by the JSON. This object stores information about the `redemption`.
     *
     * @return self
     */
    public function setObject($object)
    {
        if (is_null($object)) {
            array_push($this->openAPINullablesSetToNull, 'object');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('object', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        if (is_null($created_at)) {
            array_push($this->openAPINullablesSetToNull, 'created_at');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('created_at', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return string|null
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string|null $tracking_id Hashed customer source ID.
     *
     * @return self
     */
    public function setTrackingId($tracking_id)
    {
        if (is_null($tracking_id)) {
            array_push($this->openAPINullablesSetToNull, 'tracking_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tracking_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return object|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param object|null $metadata metadata
     *
     * @return self
     */
    public function setMetadata($metadata)
    {
        if (is_null($metadata)) {
            array_push($this->openAPINullablesSetToNull, 'metadata');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('metadata', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets channel_type
     *
     * @return string|null
     */
    public function getChannelType()
    {
        return $this->container['channel_type'];
    }

    /**
     * Sets channel_type
     *
     * @param string|null $channel_type The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.
     *
     * @return self
     */
    public function setChannelType($channel_type)
    {
        if (is_null($channel_type)) {
            array_push($this->openAPINullablesSetToNull, 'channel_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getChannelTypeAllowableValues();
        if (!is_null($channel_type) && !in_array($channel_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel_type', must be one of '%s'",
                    $channel_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_type'] = $channel_type;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return string|null
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param string|null $channel_id Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API.
     *
     * @return self
     */
    public function setChannelId($channel_id)
    {
        if (is_null($channel_id)) {
            array_push($this->openAPINullablesSetToNull, 'channel_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('channel_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets failure_code
     *
     * @return string|null
     */
    public function getFailureCode()
    {
        return $this->container['failure_code'];
    }

    /**
     * Sets failure_code
     *
     * @param string|null $failure_code If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed.
     *
     * @return self
     */
    public function setFailureCode($failure_code)
    {
        if (is_null($failure_code)) {
            array_push($this->openAPINullablesSetToNull, 'failure_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failure_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failure_code'] = $failure_code;

        return $this;
    }

    /**
     * Gets failure_message
     *
     * @return string|null
     */
    public function getFailureMessage()
    {
        return $this->container['failure_message'];
    }

    /**
     * Sets failure_message
     *
     * @param string|null $failure_message If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed.
     *
     * @return self
     */
    public function setFailureMessage($failure_message)
    {
        if (is_null($failure_message)) {
            array_push($this->openAPINullablesSetToNull, 'failure_message');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failure_message', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failure_message'] = $failure_message;

        return $this;
    }

    /**
     * Gets order
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionOrder|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionOrder|null $order order
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            array_push($this->openAPINullablesSetToNull, 'order');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets previous_order
     *
     * @return \OpenAPI\Client\Model\OrderCalculated|null
     */
    public function getPreviousOrder()
    {
        return $this->container['previous_order'];
    }

    /**
     * Sets previous_order
     *
     * @param \OpenAPI\Client\Model\OrderCalculated|null $previous_order previous_order
     *
     * @return self
     */
    public function setPreviousOrder($previous_order)
    {
        if (is_null($previous_order)) {
            throw new \InvalidArgumentException('non-nullable previous_order cannot be null');
        }
        $this->container['previous_order'] = $previous_order;

        return $this;
    }

    /**
     * Gets reward
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionReward|null
     */
    public function getReward()
    {
        return $this->container['reward'];
    }

    /**
     * Sets reward
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionReward|null $reward reward
     *
     * @return self
     */
    public function setReward($reward)
    {
        if (is_null($reward)) {
            array_push($this->openAPINullablesSetToNull, 'reward');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reward', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reward'] = $reward;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int|null $amount For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. and For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction. In the case of redemption rollback, the numbers are expressed as negative integers.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason System generated cause for the redemption being invalid in the context of the provided parameters.
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            array_push($this->openAPINullablesSetToNull, 'reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reason', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result Redemption result.
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            array_push($this->openAPINullablesSetToNull, 'result');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('result', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getResultAllowableValues();
        if (!is_null($result) && !in_array($result, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'result', must be one of '%s'",
                    $result,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status Redemption status.
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets related_redemptions
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionRelatedRedemptions|null
     */
    public function getRelatedRedemptions()
    {
        return $this->container['related_redemptions'];
    }

    /**
     * Sets related_redemptions
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionRelatedRedemptions|null $related_redemptions related_redemptions
     *
     * @return self
     */
    public function setRelatedRedemptions($related_redemptions)
    {
        if (is_null($related_redemptions)) {
            array_push($this->openAPINullablesSetToNull, 'related_redemptions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_redemptions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_redemptions'] = $related_redemptions;

        return $this;
    }

    /**
     * Gets parent_redemption_id
     *
     * @return string|null
     */
    public function getParentRedemptionId()
    {
        return $this->container['parent_redemption_id'];
    }

    /**
     * Sets parent_redemption_id
     *
     * @param string|null $parent_redemption_id Unique redemption ID of the parent redemption.
     *
     * @return self
     */
    public function setParentRedemptionId($parent_redemption_id)
    {
        if (is_null($parent_redemption_id)) {
            array_push($this->openAPINullablesSetToNull, 'parent_redemption_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('parent_redemption_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['parent_redemption_id'] = $parent_redemption_id;

        return $this;
    }

    /**
     * Gets redemption
     *
     * @return string|null
     */
    public function getRedemption()
    {
        return $this->container['redemption'];
    }

    /**
     * Sets redemption
     *
     * @param string|null $redemption Unique redemption ID of the parent redemption.
     *
     * @return self
     */
    public function setRedemption($redemption)
    {
        if (is_null($redemption)) {
            array_push($this->openAPINullablesSetToNull, 'redemption');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('redemption', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['redemption'] = $redemption;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\SimpleCustomer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\SimpleCustomer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id Unique customer ID of the redeeming customer.
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {
        if (is_null($customer_id)) {
            array_push($this->openAPINullablesSetToNull, 'customer_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('customer_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets related_object_type
     *
     * @return string|null
     */
    public function getRelatedObjectType()
    {
        return $this->container['related_object_type'];
    }

    /**
     * Sets related_object_type
     *
     * @param string|null $related_object_type Defines the related object.
     *
     * @return self
     */
    public function setRelatedObjectType($related_object_type)
    {
        if (is_null($related_object_type)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = $this->getRelatedObjectTypeAllowableValues();
        if (!is_null($related_object_type) && !in_array($related_object_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'related_object_type', must be one of '%s'",
                    $related_object_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['related_object_type'] = $related_object_type;

        return $this;
    }

    /**
     * Gets related_object_id
     *
     * @return string|null
     */
    public function getRelatedObjectId()
    {
        return $this->container['related_object_id'];
    }

    /**
     * Sets related_object_id
     *
     * @param string|null $related_object_id Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.
     *
     * @return self
     */
    public function setRelatedObjectId($related_object_id)
    {
        if (is_null($related_object_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_object_id'] = $related_object_id;

        return $this;
    }

    /**
     * Gets related_object_parent_id
     *
     * @return string|null
     */
    public function getRelatedObjectParentId()
    {
        return $this->container['related_object_parent_id'];
    }

    /**
     * Sets related_object_parent_id
     *
     * @param string|null $related_object_parent_id Unique related parent object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.
     *
     * @return self
     */
    public function setRelatedObjectParentId($related_object_parent_id)
    {
        if (is_null($related_object_parent_id)) {
            array_push($this->openAPINullablesSetToNull, 'related_object_parent_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('related_object_parent_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['related_object_parent_id'] = $related_object_parent_id;

        return $this;
    }

    /**
     * Gets campaign_name
     *
     * @return string|null
     */
    public function getCampaignName()
    {
        return $this->container['campaign_name'];
    }

    /**
     * Sets campaign_name
     *
     * @param string|null $campaign_name Campaign name
     *
     * @return self
     */
    public function setCampaignName($campaign_name)
    {
        if (is_null($campaign_name)) {
            array_push($this->openAPINullablesSetToNull, 'campaign_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('campaign_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['campaign_name'] = $campaign_name;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionVoucher|null
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionVoucher|null $voucher voucher
     *
     * @return self
     */
    public function setVoucher($voucher)
    {
        if (is_null($voucher)) {
            array_push($this->openAPINullablesSetToNull, 'voucher');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets promotion_tier
     *
     * @return \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTier|null
     */
    public function getPromotionTier()
    {
        return $this->container['promotion_tier'];
    }

    /**
     * Sets promotion_tier
     *
     * @param \OpenAPI\Client\Model\CustomerActivityDataRedemptionPromotionTier|null $promotion_tier promotion_tier
     *
     * @return self
     */
    public function setPromotionTier($promotion_tier)
    {
        if (is_null($promotion_tier)) {
            array_push($this->openAPINullablesSetToNull, 'promotion_tier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('promotion_tier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['promotion_tier'] = $promotion_tier;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date Timestamp representing the date and time when the redemption was created. The value is shown in the ISO 8601 format.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            array_push($this->openAPINullablesSetToNull, 'date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date'] = $date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


